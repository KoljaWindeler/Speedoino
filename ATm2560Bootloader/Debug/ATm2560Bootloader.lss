
ATm2560Bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800200  000007e4  00000878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  0080024e  0080024e  000008c6  2**0
                  ALLOC
  3 .stab         000018b4  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b7c  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ee       	ldi	r30, 0xE4	; 228
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 34       	cpi	r26, 0x4E	; 78
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	13 e0       	ldi	r17, 0x03	; 3
 110:	ae e4       	ldi	r26, 0x4E	; 78
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 35       	cpi	r26, 0x56	; 86
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 33 01 	call	0x266	; 0x266 <main>
 122:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <app_start>:
void 	app_start()
{
//*	May 23,	2010	<MLS> Modified app_start because it was not working on the 2560.
//*	Thanks to Peter Knight on the arduino.cc forum for this little trick
//*	http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1271415071
asm volatile(
 12a:	ee 27       	eor	r30, r30
 12c:	ff 27       	eor	r31, r31
 12e:	09 94       	ijmp
		"clr	r30		\n\t"
		"clr	r31		\n\t"
		"ijmp	\n\t"
		);
}
 130:	08 95       	ret

00000132 <putch>:


//******************************************************************************************
void putch(char ch)
{
	while (!(UCSR0A & _BV(UDRE0)));
 132:	90 91 c0 00 	lds	r25, 0x00C0
 136:	95 ff       	sbrs	r25, 5
 138:	fc cf       	rjmp	.-8      	; 0x132 <putch>
	UDR0 = ch;
 13a:	80 93 c6 00 	sts	0x00C6, r24
}
 13e:	08 95       	ret

00000140 <puthex>:
}


//******************************************************************************************
void puthex(char ch)
{
 140:	1f 93       	push	r17
	char ah;

	ah = ch >> 4;
 142:	98 2f       	mov	r25, r24
 144:	92 95       	swap	r25
 146:	9f 70       	andi	r25, 0x0F	; 15
	if(ah >= 0x0a)
 148:	9a 30       	cpi	r25, 0x0A	; 10
 14a:	10 f0       	brcs	.+4      	; 0x150 <puthex+0x10>
	{
		ah = ah - 0x0a + 'a';
 14c:	99 5a       	subi	r25, 0xA9	; 169
 14e:	01 c0       	rjmp	.+2      	; 0x152 <puthex+0x12>
	}
	else
	{
		ah += '0';
 150:	90 5d       	subi	r25, 0xD0	; 208
	}

	ch &= 0x0f;
 152:	18 2f       	mov	r17, r24
 154:	1f 70       	andi	r17, 0x0F	; 15
	if(ch >= 0x0a)
 156:	1a 30       	cpi	r17, 0x0A	; 10
 158:	10 f0       	brcs	.+4      	; 0x15e <puthex+0x1e>
	{
		ch = ch - 0x0a + 'a';
 15a:	19 5a       	subi	r17, 0xA9	; 169
 15c:	01 c0       	rjmp	.+2      	; 0x160 <puthex+0x20>
	}
	else
	{
		ch += '0';
 15e:	10 5d       	subi	r17, 0xD0	; 208
	}

	putch(ah);
 160:	89 2f       	mov	r24, r25
 162:	0e 94 99 00 	call	0x132	; 0x132 <putch>
	putch(ch);
 166:	81 2f       	mov	r24, r17
 168:	0e 94 99 00 	call	0x132	; 0x132 <putch>
}
 16c:	1f 91       	pop	r17
 16e:	08 95       	ret

00000170 <getch>:
}


//******************************************************************************************
char getch(void)
{
 170:	ef 92       	push	r14
 172:	ff 92       	push	r15
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
	uint32_t count = 0;
 178:	ee 24       	eor	r14, r14
 17a:	ff 24       	eor	r15, r15
 17c:	87 01       	movw	r16, r14
	while (!(UCSR0A & _BV(RXC0)))
 17e:	12 c0       	rjmp	.+36     	; 0x1a4 <getch+0x34>
	{
		/* 20060803 DojoCorp:: Addon coming from the previous Bootloader*/
		/* HACKME:: here is a good place to count times*/
		/* HACKME:: here is also a good play to listen on the "is it a bluetooth reset"-PIN and stop counting*/
		//if(PINA & (0x02)){ // nur hochz√§hlen wenn pin a1 auf high, der hat nen pull up
		if(bit_is_set(PINA,1)){
 180:	01 9b       	sbis	0x00, 1	; 0
 182:	05 c0       	rjmp	.+10     	; 0x18e <getch+0x1e>
			count++;
 184:	08 94       	sec
 186:	e1 1c       	adc	r14, r1
 188:	f1 1c       	adc	r15, r1
 18a:	01 1d       	adc	r16, r1
 18c:	11 1d       	adc	r17, r1
		}
		if (count > MAX_TIME_COUNT)
 18e:	81 e2       	ldi	r24, 0x21	; 33
 190:	e8 16       	cp	r14, r24
 192:	81 ea       	ldi	r24, 0xA1	; 161
 194:	f8 06       	cpc	r15, r24
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	08 07       	cpc	r16, r24
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	18 07       	cpc	r17, r24
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <getch+0x34>
			app_start();
 1a0:	0e 94 95 00 	call	0x12a	; 0x12a <app_start>

//******************************************************************************************
char getch(void)
{
	uint32_t count = 0;
	while (!(UCSR0A & _BV(RXC0)))
 1a4:	80 91 c0 00 	lds	r24, 0x00C0
 1a8:	87 ff       	sbrs	r24, 7
 1aa:	ea cf       	rjmp	.-44     	; 0x180 <getch+0x10>
		}
		if (count > MAX_TIME_COUNT)
			app_start();
	}

	return UDR0;
 1ac:	80 91 c6 00 	lds	r24, 0x00C6
}
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	08 95       	ret

000001ba <gethexnib>:
}


//******************************************************************************************
char gethexnib(void)
{
 1ba:	1f 93       	push	r17
	char a;
	a = getch(); putch(a);
 1bc:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 1c0:	18 2f       	mov	r17, r24
 1c2:	0e 94 99 00 	call	0x132	; 0x132 <putch>
	if(a >= 'a')
 1c6:	11 36       	cpi	r17, 0x61	; 97
 1c8:	10 f0       	brcs	.+4      	; 0x1ce <gethexnib+0x14>
	{
		return (a - 'a' + 0x0a);
 1ca:	17 55       	subi	r17, 0x57	; 87
 1cc:	03 c0       	rjmp	.+6      	; 0x1d4 <gethexnib+0x1a>
	}
	else if(a >= '0')
 1ce:	10 33       	cpi	r17, 0x30	; 48
 1d0:	08 f0       	brcs	.+2      	; 0x1d4 <gethexnib+0x1a>
	{
		return(a - '0');
 1d2:	10 53       	subi	r17, 0x30	; 48
	}
	return a;
}
 1d4:	81 2f       	mov	r24, r17
 1d6:	1f 91       	pop	r17
 1d8:	08 95       	ret

000001da <gethex>:


//******************************************************************************************
char gethex(void)
{
 1da:	1f 93       	push	r17
	return (gethexnib() << 4) + gethexnib();
 1dc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gethexnib>
 1e0:	18 2f       	mov	r17, r24
 1e2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <gethexnib>
 1e6:	12 95       	swap	r17
 1e8:	10 7f       	andi	r17, 0xF0	; 240
}
 1ea:	81 0f       	add	r24, r17
 1ec:	1f 91       	pop	r17
 1ee:	08 95       	ret

000001f0 <getNch>:


//******************************************************************************************
void getNch(uint8_t count)
{
	while(count--)
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <getNch+0x10>
	{
		while(!(UCSR0A & _BV(RXC0)));
 1f2:	90 91 c0 00 	lds	r25, 0x00C0
 1f6:	97 ff       	sbrs	r25, 7
 1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <getNch+0x2>
		UDR0;
 1fa:	90 91 c6 00 	lds	r25, 0x00C6
 1fe:	81 50       	subi	r24, 0x01	; 1


//******************************************************************************************
void getNch(uint8_t count)
{
	while(count--)
 200:	88 23       	and	r24, r24
 202:	b9 f7       	brne	.-18     	; 0x1f2 <getNch+0x2>
	{
		while(!(UCSR0A & _BV(RXC0)));
		UDR0;
	}
}
 204:	08 95       	ret

00000206 <byte_response>:


//******************************************************************************************
void byte_response(uint8_t val)
{
 206:	1f 93       	push	r17
 208:	18 2f       	mov	r17, r24
	if (getch() == ' ')
 20a:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 20e:	80 32       	cpi	r24, 0x20	; 32
 210:	51 f4       	brne	.+20     	; 0x226 <byte_response+0x20>
	{
		putch(0x14);
 212:	84 e1       	ldi	r24, 0x14	; 20
 214:	0e 94 99 00 	call	0x132	; 0x132 <putch>
		putch(val);
 218:	81 2f       	mov	r24, r17
 21a:	0e 94 99 00 	call	0x132	; 0x132 <putch>
		putch(0x10);
 21e:	80 e1       	ldi	r24, 0x10	; 16
 220:	0e 94 99 00 	call	0x132	; 0x132 <putch>
 224:	09 c0       	rjmp	.+18     	; 0x238 <byte_response+0x32>
	}
	else
	{
		if (++error_count == MAX_ERROR_COUNT)
 226:	80 91 4e 02 	lds	r24, 0x024E
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	80 93 4e 02 	sts	0x024E, r24
 230:	85 30       	cpi	r24, 0x05	; 5
 232:	11 f4       	brne	.+4      	; 0x238 <byte_response+0x32>
			app_start();
 234:	0e 94 95 00 	call	0x12a	; 0x12a <app_start>
	}
}
 238:	1f 91       	pop	r17
 23a:	08 95       	ret

0000023c <nothing_response>:


//******************************************************************************************
void nothing_response(void)
{
	if (getch() == ' ')
 23c:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 240:	80 32       	cpi	r24, 0x20	; 32
 242:	39 f4       	brne	.+14     	; 0x252 <nothing_response+0x16>
	{
		putch(0x14);
 244:	84 e1       	ldi	r24, 0x14	; 20
 246:	0e 94 99 00 	call	0x132	; 0x132 <putch>
		putch(0x10);
 24a:	80 e1       	ldi	r24, 0x10	; 16
 24c:	0e 94 99 00 	call	0x132	; 0x132 <putch>
 250:	08 95       	ret
	}
	else
	{
		if (++error_count == MAX_ERROR_COUNT)
 252:	80 91 4e 02 	lds	r24, 0x024E
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 4e 02 	sts	0x024E, r24
 25c:	85 30       	cpi	r24, 0x05	; 5
 25e:	11 f4       	brne	.+4      	; 0x264 <nothing_response+0x28>
			app_start();
 260:	0e 94 95 00 	call	0x12a	; 0x12a <app_start>
 264:	08 95       	ret

00000266 <main>:


//******************************************************************************************
/* main program starts here */
int main(void)
{
 266:	6f 92       	push	r6
 268:	7f 92       	push	r7
 26a:	8f 92       	push	r8
 26c:	9f 92       	push	r9
 26e:	af 92       	push	r10
 270:	bf 92       	push	r11
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	0f 93       	push	r16
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29

	// Check if the WDT was used to reset, in which case we dont bootload and skip straight to the code. woot.
	if (! (ch &  _BV(EXTRF)))	// if its a not an external reset...
		app_start();			// skip bootloader
#else
	asm volatile("nop\n\t");
 282:	00 00       	nop


	/* initialize UART(s) depending on CPU defined */
	uint16_t baud_setting;
	baud_setting	=	(F_CPU / 8 / BAUD_RATE - 1) / 2;
	UBRR0H		=	baud_setting >> 8;
 284:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L		=	baud_setting;
 288:	80 e1       	ldi	r24, 0x10	; 16
 28a:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0A		=	0x00;
 28e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C		=	0x06;
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B		=	_BV(TXEN0) | _BV(RXEN0);
 298:	88 e1       	ldi	r24, 0x18	; 24
 29a:	80 93 c1 00 	sts	0x00C1, r24


	/* enabled in pa1 to read if its a bluetooth reset*/
	DDRA = 0x00; // all as input
 29e:	11 b8       	out	0x01, r1	; 1
	PORTA= 0xff; // all with pullup
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	82 b9       	out	0x02, r24	; 2

	/* Enable internal pull-up resistor on pin D0 (RX), in order
	to supress line noise that prevents the bootloader from
	timing out (DAM: 20070509) */
	/* feature added to the Arduino Mega --DC: 080930 */
	DDRE	&=	~_BV(PINE0);
 2a4:	68 98       	cbi	0x0d, 0	; 13
	PORTE	|=	_BV(PINE0);
 2a6:	70 9a       	sbi	0x0e, 0	; 14




	putch(0x14); /* here i am*/
 2a8:	84 e1       	ldi	r24, 0x14	; 20
 2aa:	0e 94 99 00 	call	0x132	; 0x132 <putch>
	putch(0x10); /* here i am*/
 2ae:	80 e1       	ldi	r24, 0x10	; 16
 2b0:	0e 94 99 00 	call	0x132	; 0x132 <putch>
					}
				}
				else
				{					        //Write to FLASH one page at a time
					if (address.byte[1]>127 && lower_round!=1) 	address_high	=	0x01;	//Only possible with m128, m256 will need 3rd address byte. FIXME
					else if(address.byte[1]<=127 && lower_round==1) address_high	=	0x02;
 2b4:	72 e0       	ldi	r23, 0x02	; 2
 2b6:	77 2e       	mov	r7, r23
					else if(address.byte[1]>127 && lower_round==1) 	address_high	=	0x03;
 2b8:	63 e0       	ldi	r22, 0x03	; 3
 2ba:	66 2e       	mov	r6, r22
	/* forever loop */
	for (;;)
	{

		/* get character from UART */
		ch	=	getch();
 2bc:	0e 94 b8 00 	call	0x170	; 0x170 <getch>

		/* A bunch of if...else if... gives smaller code than switch...case ! */

		/* Hello is anyone home ? */
		if(ch=='0')
 2c0:	80 33       	cpi	r24, 0x30	; 48
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <main+0x60>
 2c4:	40 c0       	rjmp	.+128    	; 0x346 <main+0xe0>


		/* Request programmer ID */
		/* Not using PROGMEM string due to boot block in m128 being beyond 64kB boundry  */
		/* Would need to selectively manipulate RAMPZ, and it's only 9 characters anyway so who cares.  */
		else if(ch=='1')
 2c6:	81 33       	cpi	r24, 0x31	; 49
 2c8:	e1 f4       	brne	.+56     	; 0x302 <main+0x9c>
		{
			if (getch() == ' ')
 2ca:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 2ce:	80 32       	cpi	r24, 0x20	; 32
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <main+0x6e>
 2d2:	65 c2       	rjmp	.+1226   	; 0x79e <block_done+0x216>
			{
				putch(0x14);
 2d4:	84 e1       	ldi	r24, 0x14	; 20
 2d6:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				putch('A');
 2da:	81 e4       	ldi	r24, 0x41	; 65
 2dc:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				putch('V');
 2e0:	86 e5       	ldi	r24, 0x56	; 86
 2e2:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				putch('R');
 2e6:	82 e5       	ldi	r24, 0x52	; 82
 2e8:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				putch(' ');
 2ec:	80 e2       	ldi	r24, 0x20	; 32
 2ee:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				putch('I');
 2f2:	89 e4       	ldi	r24, 0x49	; 73
 2f4:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				putch('S');
 2f8:	83 e5       	ldi	r24, 0x53	; 83
 2fa:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				putch('P');
 2fe:	80 e5       	ldi	r24, 0x50	; 80
 300:	45 c1       	rjmp	.+650    	; 0x58c <block_done+0x4>
				if (++error_count == MAX_ERROR_COUNT)
					app_start();
			}
		}
		/* AVR ISP/STK500 board commands  DON'T CARE so default nothing_response */
		else if(ch=='@')
 302:	80 34       	cpi	r24, 0x40	; 64
 304:	39 f4       	brne	.+14     	; 0x314 <main+0xae>
		{
			ch2	=	getch();
 306:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
			if (ch2>0x85) getch();
 30a:	86 38       	cpi	r24, 0x86	; 134
 30c:	e0 f0       	brcs	.+56     	; 0x346 <main+0xe0>
 30e:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 312:	19 c0       	rjmp	.+50     	; 0x346 <main+0xe0>
			nothing_response();
		}


		/* AVR ISP/STK500 board requests */
		else if(ch=='A')
 314:	81 34       	cpi	r24, 0x41	; 65
 316:	91 f4       	brne	.+36     	; 0x33c <main+0xd6>
		{
			ch2	=	getch();
 318:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
			if		(ch2==0x80) byte_response(HW_VER);		// Hardware version
 31c:	80 38       	cpi	r24, 0x80	; 128
 31e:	11 f4       	brne	.+4      	; 0x324 <main+0xbe>
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	b5 c1       	rjmp	.+874    	; 0x68e <block_done+0x106>
			else if	(ch2==0x81) byte_response(SW_MAJOR);	// Software major version
 324:	81 38       	cpi	r24, 0x81	; 129
 326:	09 f4       	brne	.+2      	; 0x32a <main+0xc4>
 328:	4d c0       	rjmp	.+154    	; 0x3c4 <main+0x15e>
			else if	(ch2==0x82) byte_response(SW_MINOR);	// Software minor version
 32a:	82 38       	cpi	r24, 0x82	; 130
 32c:	11 f4       	brne	.+4      	; 0x332 <main+0xcc>
 32e:	80 e1       	ldi	r24, 0x10	; 16
 330:	ae c1       	rjmp	.+860    	; 0x68e <block_done+0x106>
			else if	(ch2==0x98) byte_response(0x03);		// Unknown but seems to be required by avr studio 3.56
 332:	88 39       	cpi	r24, 0x98	; 152
 334:	09 f0       	breq	.+2      	; 0x338 <main+0xd2>
 336:	aa c1       	rjmp	.+852    	; 0x68c <block_done+0x104>
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	a9 c1       	rjmp	.+850    	; 0x68e <block_done+0x106>
			else				byte_response(0x00);		// Covers various unnecessary responses we don't care about
		}


		/* Device Parameters  DON'T CARE, DEVICE IS FIXED  */
		else if(ch=='B')
 33c:	82 34       	cpi	r24, 0x42	; 66
 33e:	31 f4       	brne	.+12     	; 0x34c <main+0xe6>
		{
			getNch(20);
 340:	84 e1       	ldi	r24, 0x14	; 20
 342:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <getNch>
			nothing_response();
 346:	0e 94 1e 01 	call	0x23c	; 0x23c <nothing_response>
 34a:	b8 cf       	rjmp	.-144    	; 0x2bc <main+0x56>
		}


		/* Parallel programming stuff  DON'T CARE  */
		else if(ch=='E')
 34c:	85 34       	cpi	r24, 0x45	; 69
 34e:	11 f4       	brne	.+4      	; 0x354 <main+0xee>
		{
			getNch(5);
 350:	85 e0       	ldi	r24, 0x05	; 5
 352:	f7 cf       	rjmp	.-18     	; 0x342 <main+0xdc>
		}


		/* P: Enter programming mode  */
		/* R: Erase device, don't care as we will erase one page at a time anyway.  */
		else if(ch=='P' || ch=='R')
 354:	80 35       	cpi	r24, 0x50	; 80
 356:	b9 f3       	breq	.-18     	; 0x346 <main+0xe0>
 358:	82 35       	cpi	r24, 0x52	; 82
 35a:	a9 f3       	breq	.-22     	; 0x346 <main+0xe0>
		{
			nothing_response();
		}
		/* Leave programming mode  */
		else if(ch=='Q')
 35c:	81 35       	cpi	r24, 0x51	; 81
 35e:	99 f3       	breq	.-26     	; 0x346 <main+0xe0>


		/* Set address, little endian. EEPROM in bytes, FLASH in words  */
		/* Perhaps extra address bytes may be added in future to support > 128kB FLASH.  */
		/* This might explain why little endian was used here, big endian used everywhere else.  */
		else if(ch=='U')
 360:	85 35       	cpi	r24, 0x55	; 85
 362:	d9 f4       	brne	.+54     	; 0x39a <main+0x134>
		{
			address.byte[0]	=	getch();
 364:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 368:	80 93 4f 02 	sts	0x024F, r24
			address.byte[1]	=	getch();
 36c:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 370:	80 93 50 02 	sts	0x0250, r24
			if(address.word==0){
 374:	80 91 4f 02 	lds	r24, 0x024F
 378:	90 91 50 02 	lds	r25, 0x0250
 37c:	00 97       	sbiw	r24, 0x00	; 0
 37e:	19 f7       	brne	.-58     	; 0x346 <main+0xe0>
				if(lower_round==2){ // wir m√ºssen es ja auf irgendwas setzten was weder 1 noch 0 ist, -1 geht nicht weil unsigned
 380:	80 91 4c 02 	lds	r24, 0x024C
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	19 f4       	brne	.+6      	; 0x38e <main+0x128>
					lower_round=0;
 388:	10 92 4c 02 	sts	0x024C, r1
 38c:	dc cf       	rjmp	.-72     	; 0x346 <main+0xe0>
				}else if(lower_round==0){
 38e:	88 23       	and	r24, r24
 390:	d1 f6       	brne	.-76     	; 0x346 <main+0xe0>
					lower_round=1;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	80 93 4c 02 	sts	0x024C, r24
 398:	d6 cf       	rjmp	.-84     	; 0x346 <main+0xe0>
			nothing_response();
		}


		/* Universal SPI programming command, disabled.  Would be used for fuses and lock bits.  */
		else if(ch=='V')
 39a:	86 35       	cpi	r24, 0x56	; 86
 39c:	c9 f4       	brne	.+50     	; 0x3d0 <main+0x16a>
		{
			if (getch() == 0x30)
 39e:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 3a2:	80 33       	cpi	r24, 0x30	; 48
 3a4:	89 f4       	brne	.+34     	; 0x3c8 <main+0x162>
			{
				getch();
 3a6:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
				ch	=	getch();
 3aa:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 3ae:	08 2f       	mov	r16, r24
				getch();
 3b0:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
				if (ch == 0)
 3b4:	00 23       	and	r16, r16
 3b6:	11 f4       	brne	.+4      	; 0x3bc <main+0x156>
				{
					byte_response(SIG1);
 3b8:	8e e1       	ldi	r24, 0x1E	; 30
 3ba:	69 c1       	rjmp	.+722    	; 0x68e <block_done+0x106>
				}
				else if (ch == 1)
 3bc:	01 30       	cpi	r16, 0x01	; 1
 3be:	11 f4       	brne	.+4      	; 0x3c4 <main+0x15e>
				{
					byte_response(SIG2);
 3c0:	88 e9       	ldi	r24, 0x98	; 152
 3c2:	65 c1       	rjmp	.+714    	; 0x68e <block_done+0x106>
				}
				else
				{
					byte_response(SIG3);
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	63 c1       	rjmp	.+710    	; 0x68e <block_done+0x106>
				}
			}
			else
			{
				getNch(3);
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <getNch>
 3ce:	5e c1       	rjmp	.+700    	; 0x68c <block_done+0x104>
			}
		}


		/* Write memory, length is big endian and is in bytes  */
		else if(ch=='d')
 3d0:	84 36       	cpi	r24, 0x64	; 100
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <main+0x170>
 3d4:	e1 c0       	rjmp	.+450    	; 0x598 <block_done+0x10>
		{
			length.byte[1]	=	getch();
 3d6:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 3da:	80 93 52 03 	sts	0x0352, r24
			length.byte[0]	=	getch();
 3de:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 3e2:	80 93 51 03 	sts	0x0351, r24
			flags.eeprom	=	0;
 3e6:	80 91 55 03 	lds	r24, 0x0355
 3ea:	8e 7f       	andi	r24, 0xFE	; 254
 3ec:	80 93 55 03 	sts	0x0355, r24
			if (getch() == 'E') flags.eeprom	=	1;
 3f0:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 3f4:	85 34       	cpi	r24, 0x45	; 69
 3f6:	29 f4       	brne	.+10     	; 0x402 <main+0x19c>
 3f8:	80 91 55 03 	lds	r24, 0x0355
 3fc:	81 60       	ori	r24, 0x01	; 1
 3fe:	80 93 55 03 	sts	0x0355, r24
 402:	51 e5       	ldi	r21, 0x51	; 81
 404:	c5 2e       	mov	r12, r21
 406:	52 e0       	ldi	r21, 0x02	; 2
 408:	d5 2e       	mov	r13, r21


//******************************************************************************************
/* main program starts here */
int main(void)
{
 40a:	76 01       	movw	r14, r12
 40c:	00 e0       	ldi	r16, 0x00	; 0
 40e:	10 e0       	ldi	r17, 0x00	; 0
 410:	07 c0       	rjmp	.+14     	; 0x420 <main+0x1ba>
			length.byte[0]	=	getch();
			flags.eeprom	=	0;
			if (getch() == 'E') flags.eeprom	=	1;
			for (w=0;w<length.word;w++)
			{
				buff[w]	=	getch();	                        // Store data in buffer, can't keep up with serial data stream whilst programming pages
 412:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 416:	f7 01       	movw	r30, r14
 418:	81 93       	st	Z+, r24
 41a:	7f 01       	movw	r14, r30
		{
			length.byte[1]	=	getch();
			length.byte[0]	=	getch();
			flags.eeprom	=	0;
			if (getch() == 'E') flags.eeprom	=	1;
			for (w=0;w<length.word;w++)
 41c:	0f 5f       	subi	r16, 0xFF	; 255
 41e:	1f 4f       	sbci	r17, 0xFF	; 255
 420:	80 91 51 03 	lds	r24, 0x0351
 424:	90 91 52 03 	lds	r25, 0x0352
 428:	08 17       	cp	r16, r24
 42a:	19 07       	cpc	r17, r25
 42c:	90 f3       	brcs	.-28     	; 0x412 <main+0x1ac>
			{
				buff[w]	=	getch();	                        // Store data in buffer, can't keep up with serial data stream whilst programming pages
			}
			if (getch() == ' ')
 42e:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 432:	80 32       	cpi	r24, 0x20	; 32
 434:	09 f0       	breq	.+2      	; 0x438 <main+0x1d2>
 436:	b3 c1       	rjmp	.+870    	; 0x79e <block_done+0x216>
			{
				if (flags.eeprom)
 438:	80 91 55 03 	lds	r24, 0x0355
 43c:	80 ff       	sbrs	r24, 0
 43e:	29 c0       	rjmp	.+82     	; 0x492 <main+0x22c>
				{		                //Write to EEPROM one byte at a time
					address.word <<= 1;
 440:	80 91 4f 02 	lds	r24, 0x024F
 444:	90 91 50 02 	lds	r25, 0x0250
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	90 93 50 02 	sts	0x0250, r25
 450:	80 93 4f 02 	sts	0x024F, r24
					for(w=0;w<length.word;w++)
 454:	00 e0       	ldi	r16, 0x00	; 0
 456:	10 e0       	ldi	r17, 0x00	; 0
 458:	14 c0       	rjmp	.+40     	; 0x482 <main+0x21c>
					{
						eeprom_write_byte((void *)address.word,buff[w]);
 45a:	f6 01       	movw	r30, r12
 45c:	61 91       	ld	r22, Z+
 45e:	6f 01       	movw	r12, r30
 460:	80 91 4f 02 	lds	r24, 0x024F
 464:	90 91 50 02 	lds	r25, 0x0250
 468:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__eewr_byte_m2560>
						address.word++;
 46c:	80 91 4f 02 	lds	r24, 0x024F
 470:	90 91 50 02 	lds	r25, 0x0250
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	90 93 50 02 	sts	0x0250, r25
 47a:	80 93 4f 02 	sts	0x024F, r24
			if (getch() == ' ')
			{
				if (flags.eeprom)
				{		                //Write to EEPROM one byte at a time
					address.word <<= 1;
					for(w=0;w<length.word;w++)
 47e:	0f 5f       	subi	r16, 0xFF	; 255
 480:	1f 4f       	sbci	r17, 0xFF	; 255
 482:	80 91 51 03 	lds	r24, 0x0351
 486:	90 91 52 03 	lds	r25, 0x0352
 48a:	08 17       	cp	r16, r24
 48c:	19 07       	cpc	r17, r25
 48e:	28 f3       	brcs	.-54     	; 0x45a <main+0x1f4>
 490:	7c c0       	rjmp	.+248    	; 0x58a <block_done+0x2>
						address.word++;
					}
				}
				else
				{					        //Write to FLASH one page at a time
					if (address.byte[1]>127 && lower_round!=1) 	address_high	=	0x01;	//Only possible with m128, m256 will need 3rd address byte. FIXME
 492:	90 91 50 02 	lds	r25, 0x0250
 496:	80 91 4c 02 	lds	r24, 0x024C
 49a:	97 ff       	sbrs	r25, 7
 49c:	06 c0       	rjmp	.+12     	; 0x4aa <main+0x244>
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	49 f0       	breq	.+18     	; 0x4b4 <main+0x24e>
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 93 54 03 	sts	0x0354, r24
 4a8:	0a c0       	rjmp	.+20     	; 0x4be <main+0x258>
					else if(address.byte[1]<=127 && lower_round==1) address_high	=	0x02;
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	31 f4       	brne	.+12     	; 0x4ba <main+0x254>
 4ae:	70 92 54 03 	sts	0x0354, r7
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <main+0x258>
					else if(address.byte[1]>127 && lower_round==1) 	address_high	=	0x03;
 4b4:	60 92 54 03 	sts	0x0354, r6
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <main+0x258>
					else 						address_high	=	0x00;
 4ba:	10 92 54 03 	sts	0x0354, r1

					RAMPZ	=	address_high;
 4be:	80 91 54 03 	lds	r24, 0x0354
 4c2:	8b bf       	out	0x3b, r24	; 59
					address.word	=	address.word << 1;	        //address * 2 -> byte location
 4c4:	80 91 4f 02 	lds	r24, 0x024F
 4c8:	90 91 50 02 	lds	r25, 0x0250
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	90 93 50 02 	sts	0x0250, r25
 4d4:	80 93 4f 02 	sts	0x024F, r24
					if ((length.byte[0] & 0x01)) length.word++;	//Even up an odd number of bytes
 4d8:	80 91 51 03 	lds	r24, 0x0351
 4dc:	80 ff       	sbrs	r24, 0
 4de:	09 c0       	rjmp	.+18     	; 0x4f2 <main+0x28c>
 4e0:	80 91 51 03 	lds	r24, 0x0351
 4e4:	90 91 52 03 	lds	r25, 0x0352
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	90 93 52 03 	sts	0x0352, r25
 4ee:	80 93 51 03 	sts	0x0351, r24
					cli();					//Disable interrupts, just to be sure
 4f2:	f8 94       	cli
					while(bit_is_set(EECR,EEPE));			//Wait for previous EEPROM writes to complete
 4f4:	f9 99       	sbic	0x1f, 1	; 31
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <main+0x28e>
					asm volatile(
 4f8:	11 27       	eor	r17, r17
 4fa:	e0 91 4f 02 	lds	r30, 0x024F
 4fe:	f0 91 50 02 	lds	r31, 0x0250
 502:	c1 e5       	ldi	r28, 0x51	; 81
 504:	d2 e0       	ldi	r29, 0x02	; 2
 506:	80 91 51 03 	lds	r24, 0x0351
 50a:	90 91 52 03 	lds	r25, 0x0352

0000050e <length_loop>:
 50e:	10 30       	cpi	r17, 0x00	; 0
 510:	91 f4       	brne	.+36     	; 0x536 <no_page_erase>

00000512 <wait_spm1>:
 512:	00 91 57 00 	lds	r16, 0x0057
 516:	01 70       	andi	r16, 0x01	; 1
 518:	01 30       	cpi	r16, 0x01	; 1
 51a:	d9 f3       	breq	.-10     	; 0x512 <wait_spm1>
 51c:	03 e0       	ldi	r16, 0x03	; 3
 51e:	00 93 57 00 	sts	0x0057, r16
 522:	e8 95       	spm

00000524 <wait_spm2>:
 524:	00 91 57 00 	lds	r16, 0x0057
 528:	01 70       	andi	r16, 0x01	; 1
 52a:	01 30       	cpi	r16, 0x01	; 1
 52c:	d9 f3       	breq	.-10     	; 0x524 <wait_spm2>
 52e:	01 e1       	ldi	r16, 0x11	; 17
 530:	00 93 57 00 	sts	0x0057, r16
 534:	e8 95       	spm

00000536 <no_page_erase>:
 536:	09 90       	ld	r0, Y+
 538:	19 90       	ld	r1, Y+

0000053a <wait_spm3>:
 53a:	00 91 57 00 	lds	r16, 0x0057
 53e:	01 70       	andi	r16, 0x01	; 1
 540:	01 30       	cpi	r16, 0x01	; 1
 542:	d9 f3       	breq	.-10     	; 0x53a <wait_spm3>
 544:	01 e0       	ldi	r16, 0x01	; 1
 546:	00 93 57 00 	sts	0x0057, r16
 54a:	e8 95       	spm
 54c:	13 95       	inc	r17
 54e:	10 38       	cpi	r17, 0x80	; 128
 550:	98 f0       	brcs	.+38     	; 0x578 <same_page>

00000552 <write_page>:
 552:	11 27       	eor	r17, r17

00000554 <wait_spm4>:
 554:	00 91 57 00 	lds	r16, 0x0057
 558:	01 70       	andi	r16, 0x01	; 1
 55a:	01 30       	cpi	r16, 0x01	; 1
 55c:	d9 f3       	breq	.-10     	; 0x554 <wait_spm4>
 55e:	05 e0       	ldi	r16, 0x05	; 5
 560:	00 93 57 00 	sts	0x0057, r16
 564:	e8 95       	spm

00000566 <wait_spm5>:
 566:	00 91 57 00 	lds	r16, 0x0057
 56a:	01 70       	andi	r16, 0x01	; 1
 56c:	01 30       	cpi	r16, 0x01	; 1
 56e:	d9 f3       	breq	.-10     	; 0x566 <wait_spm5>
 570:	01 e1       	ldi	r16, 0x11	; 17
 572:	00 93 57 00 	sts	0x0057, r16
 576:	e8 95       	spm

00000578 <same_page>:
 578:	32 96       	adiw	r30, 0x02	; 2
 57a:	02 97       	sbiw	r24, 0x02	; 2
 57c:	09 f0       	breq	.+2      	; 0x580 <final_write>
 57e:	c7 cf       	rjmp	.-114    	; 0x50e <length_loop>

00000580 <final_write>:
 580:	10 30       	cpi	r17, 0x00	; 0
 582:	11 f0       	breq	.+4      	; 0x588 <block_done>
 584:	02 96       	adiw	r24, 0x02	; 2
 586:	e5 cf       	rjmp	.-54     	; 0x552 <write_page>

00000588 <block_done>:
 588:	11 24       	eor	r1, r1
						 : "=m" (SPMCSR) : "M" (PAGE_SIZE) : "r0","r16","r17","r24","r25","r28","r29","r30","r31"
						 );
					/* Should really add a wait for RWW section to be enabled, don't actually need it since we never */
					/* exit the bootloader without a power cycle anyhow */
				}
				putch(0x14);
 58a:	84 e1       	ldi	r24, 0x14	; 20
 58c:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				putch(0x10);
 590:	80 e1       	ldi	r24, 0x10	; 16
 592:	0e 94 99 00 	call	0x132	; 0x132 <putch>
 596:	92 ce       	rjmp	.-732    	; 0x2bc <main+0x56>
			}
		}


		/* Read memory block mode, length is big endian.  */
		else if(ch=='t')
 598:	84 37       	cpi	r24, 0x74	; 116
 59a:	09 f0       	breq	.+2      	; 0x59e <block_done+0x16>
 59c:	63 c0       	rjmp	.+198    	; 0x664 <block_done+0xdc>
		{
			length.byte[1]	=	getch();
 59e:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 5a2:	80 93 52 03 	sts	0x0352, r24
			length.byte[0]	=	getch();
 5a6:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 5aa:	80 93 51 03 	sts	0x0351, r24
			if (address.word>0x7FFF) flags.rampz	=	1;		// No go with m256, FIXME
 5ae:	80 91 4f 02 	lds	r24, 0x024F
 5b2:	90 91 50 02 	lds	r25, 0x0250
 5b6:	20 91 55 03 	lds	r18, 0x0355
 5ba:	97 ff       	sbrs	r25, 7
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <block_done+0x3a>
 5be:	22 60       	ori	r18, 0x02	; 2
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <block_done+0x3c>
			else flags.rampz	=	0;
 5c2:	2d 7f       	andi	r18, 0xFD	; 253
 5c4:	20 93 55 03 	sts	0x0355, r18
			address.word	=	address.word << 1;	        // address * 2 -> byte location
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	90 93 50 02 	sts	0x0250, r25
 5d0:	80 93 4f 02 	sts	0x024F, r24
			if (getch() == 'E') flags.eeprom	=	1;
 5d4:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 5d8:	20 91 55 03 	lds	r18, 0x0355
 5dc:	85 34       	cpi	r24, 0x45	; 69
 5de:	11 f4       	brne	.+4      	; 0x5e4 <block_done+0x5c>
 5e0:	21 60       	ori	r18, 0x01	; 1
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <block_done+0x5e>
			else flags.eeprom	=	0;
 5e4:	2e 7f       	andi	r18, 0xFE	; 254
 5e6:	20 93 55 03 	sts	0x0355, r18
			if (getch() == ' ')
 5ea:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 5ee:	80 32       	cpi	r24, 0x20	; 32
 5f0:	09 f0       	breq	.+2      	; 0x5f4 <block_done+0x6c>
 5f2:	64 ce       	rjmp	.-824    	; 0x2bc <main+0x56>
			{		                // Command terminator
				putch(0x14);
 5f4:	84 e1       	ldi	r24, 0x14	; 20
 5f6:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				for (w=0;w < length.word;w++)
 5fa:	00 e0       	ldi	r16, 0x00	; 0
 5fc:	10 e0       	ldi	r17, 0x00	; 0
 5fe:	2a c0       	rjmp	.+84     	; 0x654 <block_done+0xcc>
				{		        // Can handle odd and even lengths okay
					if (flags.eeprom)
 600:	80 91 55 03 	lds	r24, 0x0355
 604:	80 ff       	sbrs	r24, 0
 606:	07 c0       	rjmp	.+14     	; 0x616 <block_done+0x8e>
					{	                        // Byte access EEPROM read
						putch(eeprom_read_byte((void *)address.word));
 608:	80 91 4f 02 	lds	r24, 0x024F
 60c:	90 91 50 02 	lds	r25, 0x0250
 610:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__eerd_byte_m2560>
 614:	12 c0       	rjmp	.+36     	; 0x63a <block_done+0xb2>
 616:	e0 91 4f 02 	lds	r30, 0x024F
 61a:	f0 91 50 02 	lds	r31, 0x0250
						address.word++;
					}
					else
					{

						if (!flags.rampz) putch(pgm_read_byte_near(address.word));
 61e:	81 fd       	sbrc	r24, 1
 620:	02 c0       	rjmp	.+4      	; 0x626 <block_done+0x9e>
 622:	84 91       	lpm	r24, Z+
 624:	0a c0       	rjmp	.+20     	; 0x63a <block_done+0xb2>
						else putch(pgm_read_byte_far(address.word + 0x10000));
 626:	cf 01       	movw	r24, r30
 628:	a0 e0       	ldi	r26, 0x00	; 0
 62a:	b0 e0       	ldi	r27, 0x00	; 0
 62c:	80 50       	subi	r24, 0x00	; 0
 62e:	90 40       	sbci	r25, 0x00	; 0
 630:	af 4f       	sbci	r26, 0xFF	; 255
 632:	bf 4f       	sbci	r27, 0xFF	; 255
 634:	ab bf       	out	0x3b, r26	; 59
 636:	fc 01       	movw	r30, r24
 638:	87 91       	elpm	r24, Z+
 63a:	0e 94 99 00 	call	0x132	; 0x132 <putch>
						// Hmmmm, yuck  FIXME when m256 arrvies
						address.word++;
 63e:	80 91 4f 02 	lds	r24, 0x024F
 642:	90 91 50 02 	lds	r25, 0x0250
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	90 93 50 02 	sts	0x0250, r25
 64c:	80 93 4f 02 	sts	0x024F, r24
			if (getch() == 'E') flags.eeprom	=	1;
			else flags.eeprom	=	0;
			if (getch() == ' ')
			{		                // Command terminator
				putch(0x14);
				for (w=0;w < length.word;w++)
 650:	0f 5f       	subi	r16, 0xFF	; 255
 652:	1f 4f       	sbci	r17, 0xFF	; 255
 654:	80 91 51 03 	lds	r24, 0x0351
 658:	90 91 52 03 	lds	r25, 0x0352
 65c:	08 17       	cp	r16, r24
 65e:	19 07       	cpc	r17, r25
 660:	78 f2       	brcs	.-98     	; 0x600 <block_done+0x78>
 662:	96 cf       	rjmp	.-212    	; 0x590 <block_done+0x8>
			}
		}


		/* Get device signature bytes  */
		else if(ch=='u')
 664:	85 37       	cpi	r24, 0x75	; 117
 666:	81 f4       	brne	.+32     	; 0x688 <block_done+0x100>
		{
			if (getch() == ' ')
 668:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 66c:	80 32       	cpi	r24, 0x20	; 32
 66e:	09 f0       	breq	.+2      	; 0x672 <block_done+0xea>
 670:	96 c0       	rjmp	.+300    	; 0x79e <block_done+0x216>
			{
				putch(0x14);
 672:	84 e1       	ldi	r24, 0x14	; 20
 674:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				putch(SIG1);
 678:	8e e1       	ldi	r24, 0x1E	; 30
 67a:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				putch(SIG2);
 67e:	88 e9       	ldi	r24, 0x98	; 152
 680:	0e 94 99 00 	call	0x132	; 0x132 <putch>
				putch(SIG3);
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	82 cf       	rjmp	.-252    	; 0x58c <block_done+0x4>
			}
		}


		/* Read oscillator calibration byte */
		else if(ch=='v')
 688:	86 37       	cpi	r24, 0x76	; 118
 68a:	21 f4       	brne	.+8      	; 0x694 <block_done+0x10c>
		{
			byte_response(0x00);
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	0e 94 03 01 	call	0x206	; 0x206 <byte_response>
 692:	14 ce       	rjmp	.-984    	; 0x2bc <main+0x56>
	#if defined MONITOR

		/* here come the extended monitor commands by Erik Lins */

		/* check for three times exclamation mark pressed */
		else if(ch=='!')
 694:	81 32       	cpi	r24, 0x21	; 33
 696:	09 f0       	breq	.+2      	; 0x69a <block_done+0x112>
 698:	82 c0       	rjmp	.+260    	; 0x79e <block_done+0x216>
		{
			ch	=	getch();
 69a:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
			if(ch=='!')
 69e:	81 32       	cpi	r24, 0x21	; 33
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <block_done+0x11c>
 6a2:	0c ce       	rjmp	.-1000   	; 0x2bc <main+0x56>
			{
				ch	=	getch();
 6a4:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
				if(ch=='!')
 6a8:	81 32       	cpi	r24, 0x21	; 33
 6aa:	09 f0       	breq	.+2      	; 0x6ae <block_done+0x126>
 6ac:	07 ce       	rjmp	.-1010   	; 0x2bc <main+0x56>
					uint8_t addrl, addrh;
					welcome	=	"ATmegaBOOT / Arduino Mega2560 - (C) Arduino LLC modified by MLS - 100507\n\r";


					/* print a welcome message and command overview */
					for(i=0; welcome[i] != '\0'; ++i)
 6ae:	10 92 53 03 	sts	0x0353, r1
 6b2:	07 c0       	rjmp	.+14     	; 0x6c2 <block_done+0x13a>
					{
						putch(welcome[i]);
 6b4:	0e 94 99 00 	call	0x132	; 0x132 <putch>
					uint8_t addrl, addrh;
					welcome	=	"ATmegaBOOT / Arduino Mega2560 - (C) Arduino LLC modified by MLS - 100507\n\r";


					/* print a welcome message and command overview */
					for(i=0; welcome[i] != '\0'; ++i)
 6b8:	80 91 53 03 	lds	r24, 0x0353
 6bc:	8f 5f       	subi	r24, 0xFF	; 255
 6be:	80 93 53 03 	sts	0x0353, r24
 6c2:	e0 91 53 03 	lds	r30, 0x0353
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	e0 50       	subi	r30, 0x00	; 0
 6ca:	fe 4f       	sbci	r31, 0xFE	; 254
 6cc:	80 81       	ld	r24, Z
 6ce:	88 23       	and	r24, r24
 6d0:	89 f7       	brne	.-30     	; 0x6b4 <block_done+0x12c>
					}

					/* test for valid commands */
					for(;;)
					{
						putch('\n');
 6d2:	8a e0       	ldi	r24, 0x0A	; 10
 6d4:	0e 94 99 00 	call	0x132	; 0x132 <putch>
						putch('\r');
 6d8:	8d e0       	ldi	r24, 0x0D	; 13
 6da:	0e 94 99 00 	call	0x132	; 0x132 <putch>
						putch(':');
 6de:	8a e3       	ldi	r24, 0x3A	; 58
 6e0:	0e 94 99 00 	call	0x132	; 0x132 <putch>
						putch(' ');
 6e4:	80 e2       	ldi	r24, 0x20	; 32
 6e6:	0e 94 99 00 	call	0x132	; 0x132 <putch>

						ch	=	getch();
 6ea:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 6ee:	08 2f       	mov	r16, r24
						putch(ch);
 6f0:	0e 94 99 00 	call	0x132	; 0x132 <putch>


						/* read byte from address */
						if (ch == 'r')
 6f4:	02 37       	cpi	r16, 0x72	; 114
 6f6:	b1 f4       	brne	.+44     	; 0x724 <block_done+0x19c>
						{
							ch		=	getch();
 6f8:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
							putch(ch);
 6fc:	0e 94 99 00 	call	0x132	; 0x132 <putch>
							addrh	=	gethex();
 700:	0e 94 ed 00 	call	0x1da	; 0x1da <gethex>
 704:	e8 2e       	mov	r14, r24
							addrl	=	gethex();
 706:	0e 94 ed 00 	call	0x1da	; 0x1da <gethex>
 70a:	08 2f       	mov	r16, r24
							putch('=');
 70c:	8d e3       	ldi	r24, 0x3D	; 61
 70e:	0e 94 99 00 	call	0x132	; 0x132 <putch>
							ch		=	*(uint8_t *)((addrh << 8) + addrl);
 712:	9e 2c       	mov	r9, r14
 714:	88 24       	eor	r8, r8
 716:	f4 01       	movw	r30, r8
 718:	e0 0f       	add	r30, r16
 71a:	f1 1d       	adc	r31, r1
							puthex(ch);
 71c:	80 81       	ld	r24, Z
 71e:	0e 94 a0 00 	call	0x140	; 0x140 <puthex>
 722:	d7 cf       	rjmp	.-82     	; 0x6d2 <block_done+0x14a>
						}

						/* write a byte to address  */
						else if(ch == 'w')
 724:	07 37       	cpi	r16, 0x77	; 119
 726:	b9 f4       	brne	.+46     	; 0x756 <block_done+0x1ce>
						{
							ch = getch(); putch(ch);
 728:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 72c:	0e 94 99 00 	call	0x132	; 0x132 <putch>
							addrh = gethex();
 730:	0e 94 ed 00 	call	0x1da	; 0x1da <gethex>
 734:	e8 2e       	mov	r14, r24
							addrl = gethex();
 736:	0e 94 ed 00 	call	0x1da	; 0x1da <gethex>
 73a:	08 2f       	mov	r16, r24
							ch = getch(); putch(ch);
 73c:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 740:	0e 94 99 00 	call	0x132	; 0x132 <putch>
							ch = gethex();
 744:	0e 94 ed 00 	call	0x1da	; 0x1da <gethex>
							*(uint8_t *)((addrh << 8) + addrl) = ch;
 748:	be 2c       	mov	r11, r14
 74a:	aa 24       	eor	r10, r10
 74c:	f5 01       	movw	r30, r10
 74e:	e0 0f       	add	r30, r16
 750:	f1 1d       	adc	r31, r1
 752:	80 83       	st	Z, r24
 754:	be cf       	rjmp	.-132    	; 0x6d2 <block_done+0x14a>
						}

						/* read from uart and echo back */
						else if(ch == 'u')
 756:	05 37       	cpi	r16, 0x75	; 117
 758:	29 f4       	brne	.+10     	; 0x764 <block_done+0x1dc>
						{
							for(;;)
							{
								putch(getch());
 75a:	0e 94 b8 00 	call	0x170	; 0x170 <getch>
 75e:	0e 94 99 00 	call	0x132	; 0x132 <putch>
 762:	fb cf       	rjmp	.-10     	; 0x75a <block_done+0x1d2>
							}
						}

						/* external bus loop  */
						else if(ch == 'b')
 764:	02 36       	cpi	r16, 0x62	; 98
 766:	a9 f4       	brne	.+42     	; 0x792 <block_done+0x20a>
						{
							putch('b');
 768:	82 e6       	ldi	r24, 0x62	; 98
 76a:	0e 94 99 00 	call	0x132	; 0x132 <putch>
							putch('u');
 76e:	85 e7       	ldi	r24, 0x75	; 117
 770:	0e 94 99 00 	call	0x132	; 0x132 <putch>
							putch('s');
 774:	83 e7       	ldi	r24, 0x73	; 115
 776:	0e 94 99 00 	call	0x132	; 0x132 <putch>
							MCUCR	=	0x80;
 77a:	80 e8       	ldi	r24, 0x80	; 128
 77c:	85 bf       	out	0x35, r24	; 53
							XMCRA	=	0;
 77e:	10 92 74 00 	sts	0x0074, r1
							XMCRB	=	0;
 782:	10 92 75 00 	sts	0x0075, r1
							extaddr	=	0x1100;
							for(;;)
							{
								ch	=	*(volatile uint8_t *)extaddr;
								if (++extaddr == 0)
 786:	e0 e0       	ldi	r30, 0x00	; 0
 788:	f1 e1       	ldi	r31, 0x11	; 17
							XMCRA	=	0;
							XMCRB	=	0;
							extaddr	=	0x1100;
							for(;;)
							{
								ch	=	*(volatile uint8_t *)extaddr;
 78a:	81 91       	ld	r24, Z+
								if (++extaddr == 0)
 78c:	30 97       	sbiw	r30, 0x00	; 0
 78e:	e9 f7       	brne	.-6      	; 0x78a <block_done+0x202>
 790:	fa cf       	rjmp	.-12     	; 0x786 <block_done+0x1fe>
									extaddr	=	0x1100;
								}
							}
						}

						else if(ch == 'j')
 792:	0a 36       	cpi	r16, 0x6A	; 106
 794:	09 f0       	breq	.+2      	; 0x798 <block_done+0x210>
 796:	9d cf       	rjmp	.-198    	; 0x6d2 <block_done+0x14a>
						{
							app_start();
 798:	0e 94 95 00 	call	0x12a	; 0x12a <app_start>
 79c:	9a cf       	rjmp	.-204    	; 0x6d2 <block_done+0x14a>
				}
			}
		}
		/* end of monitor */
#endif
	else if (++error_count == MAX_ERROR_COUNT)
 79e:	80 91 4e 02 	lds	r24, 0x024E
 7a2:	8f 5f       	subi	r24, 0xFF	; 255
 7a4:	80 93 4e 02 	sts	0x024E, r24
 7a8:	85 30       	cpi	r24, 0x05	; 5
 7aa:	09 f0       	breq	.+2      	; 0x7ae <block_done+0x226>
 7ac:	87 cd       	rjmp	.-1266   	; 0x2bc <main+0x56>
	{
		app_start();
 7ae:	0e 94 95 00 	call	0x12a	; 0x12a <app_start>
 7b2:	84 cd       	rjmp	.-1272   	; 0x2bc <main+0x56>

000007b4 <__eerd_byte_m2560>:
 7b4:	f9 99       	sbic	0x1f, 1	; 31
 7b6:	fe cf       	rjmp	.-4      	; 0x7b4 <__eerd_byte_m2560>
 7b8:	92 bd       	out	0x22, r25	; 34
 7ba:	81 bd       	out	0x21, r24	; 33
 7bc:	f8 9a       	sbi	0x1f, 0	; 31
 7be:	99 27       	eor	r25, r25
 7c0:	80 b5       	in	r24, 0x20	; 32
 7c2:	08 95       	ret

000007c4 <__eewr_byte_m2560>:
 7c4:	26 2f       	mov	r18, r22

000007c6 <__eewr_r18_m2560>:
 7c6:	f9 99       	sbic	0x1f, 1	; 31
 7c8:	fe cf       	rjmp	.-4      	; 0x7c6 <__eewr_r18_m2560>
 7ca:	1f ba       	out	0x1f, r1	; 31
 7cc:	92 bd       	out	0x22, r25	; 34
 7ce:	81 bd       	out	0x21, r24	; 33
 7d0:	20 bd       	out	0x20, r18	; 32
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	f8 94       	cli
 7d6:	fa 9a       	sbi	0x1f, 2	; 31
 7d8:	f9 9a       	sbi	0x1f, 1	; 31
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	01 96       	adiw	r24, 0x01	; 1
 7de:	08 95       	ret

000007e0 <_exit>:
 7e0:	f8 94       	cli

000007e2 <__stop_program>:
 7e2:	ff cf       	rjmp	.-2      	; 0x7e2 <__stop_program>
