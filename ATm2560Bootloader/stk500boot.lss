
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  0003e84a  000008be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000084a  0003e000  0003e000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006e4  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000028  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000037  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ea  00000000  00000000  0000106b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000228  00000000  00000000  00001655  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008fe  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  0000217c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000222  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aca  00000000  00000000  000023ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000046  00000000  00000000  00002eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  00002efe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	0d 94 72 f0 	jmp	0x3e0e4	; 0x3e0e4 <__ctors_end>
   3e004:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e008:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e00c:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e010:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e014:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e018:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e01c:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e020:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e024:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e028:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e02c:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e030:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e034:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e038:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e03c:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e040:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e044:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e048:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e04c:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e050:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e054:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e058:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e05c:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e060:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e064:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e068:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e06c:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e070:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e074:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e078:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e07c:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e080:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e084:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e088:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e08c:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e090:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e094:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e098:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e09c:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0a0:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0a4:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0a8:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0ac:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0b0:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0b4:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0b8:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0bc:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0c0:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0c4:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0c8:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0cc:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0d0:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0d4:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0d8:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0dc:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>
   3e0e0:	0d 94 93 f0 	jmp	0x3e126	; 0x3e126 <__bad_interrupt>

0003e0e4 <__ctors_end>:
   3e0e4:	11 24       	eor	r1, r1
   3e0e6:	1f be       	out	0x3f, r1	; 63
   3e0e8:	cf ef       	ldi	r28, 0xFF	; 255
   3e0ea:	d1 e2       	ldi	r29, 0x21	; 33
   3e0ec:	de bf       	out	0x3e, r29	; 62
   3e0ee:	cd bf       	out	0x3d, r28	; 61
   3e0f0:	01 e0       	ldi	r16, 0x01	; 1
   3e0f2:	0c bf       	out	0x3c, r16	; 60

0003e0f4 <__do_copy_data>:
   3e0f4:	12 e0       	ldi	r17, 0x02	; 2
   3e0f6:	a0 e0       	ldi	r26, 0x00	; 0
   3e0f8:	b2 e0       	ldi	r27, 0x02	; 2
   3e0fa:	ea e4       	ldi	r30, 0x4A	; 74
   3e0fc:	f8 ee       	ldi	r31, 0xE8	; 232
   3e0fe:	03 e0       	ldi	r16, 0x03	; 3
   3e100:	0b bf       	out	0x3b, r16	; 59
   3e102:	02 c0       	rjmp	.+4      	; 0x3e108 <__do_copy_data+0x14>
   3e104:	07 90       	elpm	r0, Z+
   3e106:	0d 92       	st	X+, r0
   3e108:	a4 31       	cpi	r26, 0x14	; 20
   3e10a:	b1 07       	cpc	r27, r17
   3e10c:	d9 f7       	brne	.-10     	; 0x3e104 <__do_copy_data+0x10>
   3e10e:	0f 94 b0 f0 	call	0x3e160	; 0x3e160 <main>
   3e112:	0d 94 23 f4 	jmp	0x3e846	; 0x3e846 <_exit>

0003e116 <__jumpMain>:
//#define	SPH_REG	0x3E
//#define	SPL_REG	0x3D

//*****************************************************************************
void __jumpMain(void)
{
   3e116:	01 e2       	ldi	r16, 0x21	; 33
	//*	the first line did not do the job on the ATmega128

	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
   3e118:	0e bf       	out	0x3e, r16	; 62
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
   3e11a:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
   3e11c:	0d bf       	out	0x3d, r16	; 61
	asm volatile ( "clr __zero_reg__" );									// GCC depends on register r1 set to 0
   3e11e:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );	// set SREG to 0
   3e120:	1f be       	out	0x3f, r1	; 63
	asm volatile ( "jmp main");												// jump to main()
   3e122:	0d 94 b0 f0 	jmp	0x3e160	; 0x3e160 <main>

0003e126 <__bad_interrupt>:
   3e126:	0d 94 00 f0 	jmp	0x3e000	; 0x3e000 <__vectors>

0003e12a <sendchar>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;										// prepare transmission
   3e12a:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));	// wait until byte sent
   3e12e:	80 91 c0 00 	lds	r24, 0x00C0
   3e132:	86 ff       	sbrs	r24, 6
   3e134:	fc cf       	rjmp	.-8      	; 0x3e12e <sendchar+0x4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);			// delete TXCflag
   3e136:	80 91 c0 00 	lds	r24, 0x00C0
   3e13a:	80 64       	ori	r24, 0x40	; 64
   3e13c:	80 93 c0 00 	sts	0x00C0, r24
}
   3e140:	08 95       	ret

0003e142 <delay_ms>:

//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;
	for (i=0;i<timedelay;i++)
   3e142:	20 e0       	ldi	r18, 0x00	; 0
   3e144:	30 e0       	ldi	r19, 0x00	; 0
   3e146:	08 c0       	rjmp	.+16     	; 0x3e158 <delay_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3e148:	ef ec       	ldi	r30, 0xCF	; 207
   3e14a:	f7 e0       	ldi	r31, 0x07	; 7
   3e14c:	31 97       	sbiw	r30, 0x01	; 1
   3e14e:	f1 f7       	brne	.-4      	; 0x3e14c <delay_ms+0xa>
   3e150:	00 c0       	rjmp	.+0      	; 0x3e152 <delay_ms+0x10>
   3e152:	00 00       	nop
   3e154:	2f 5f       	subi	r18, 0xFF	; 255
   3e156:	3f 4f       	sbci	r19, 0xFF	; 255
   3e158:	28 17       	cp	r18, r24
   3e15a:	39 07       	cpc	r19, r25
   3e15c:	a8 f3       	brcs	.-22     	; 0x3e148 <delay_ms+0x6>
	{
		_delay_ms(0.5);
	}
}
   3e15e:	08 95       	ret

0003e160 <main>:



//*****************************************************************************
int main(void)
{
   3e160:	2f 92       	push	r2
   3e162:	3f 92       	push	r3
   3e164:	4f 92       	push	r4
   3e166:	5f 92       	push	r5
   3e168:	6f 92       	push	r6
   3e16a:	7f 92       	push	r7
   3e16c:	8f 92       	push	r8
   3e16e:	9f 92       	push	r9
   3e170:	af 92       	push	r10
   3e172:	bf 92       	push	r11
   3e174:	cf 92       	push	r12
   3e176:	df 92       	push	r13
   3e178:	ef 92       	push	r14
   3e17a:	ff 92       	push	r15
   3e17c:	0f 93       	push	r16
   3e17e:	1f 93       	push	r17
   3e180:	df 93       	push	r29
   3e182:	cf 93       	push	r28
   3e184:	cd b7       	in	r28, 0x3d	; 61
   3e186:	de b7       	in	r29, 0x3e	; 62
   3e188:	c7 52       	subi	r28, 0x27	; 39
   3e18a:	d1 40       	sbci	r29, 0x01	; 1
   3e18c:	0f b6       	in	r0, 0x3f	; 63
   3e18e:	f8 94       	cli
   3e190:	de bf       	out	0x3e, r29	; 62
   3e192:	0f be       	out	0x3f, r0	; 63
   3e194:	cd bf       	out	0x3d, r28	; 61
	unsigned long	boot_timeout;
	unsigned long	boot_timer;
	unsigned int	boot_state;

	/* enabled in pa1 to read if its a bluetooth reset*/
	DDRA  &= ~(1<<PA1); // one input --> 2.kleinstes bit 0, nicht a0 aber a1
   3e196:	09 98       	cbi	0x01, 1	; 1
	PORTA |= 1<<PA1; // with pullup
   3e198:	11 9a       	sbi	0x02, 1	; 2
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmiter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
   3e19a:	80 91 c0 00 	lds	r24, 0x00C0
   3e19e:	82 60       	ori	r24, 0x02	; 2
   3e1a0:	80 93 c0 00 	sts	0x00C0, r24
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
   3e1a4:	80 e1       	ldi	r24, 0x10	; 16
   3e1a6:	80 93 c4 00 	sts	0x00C4, r24
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
   3e1aa:	88 e1       	ldi	r24, 0x18	; 24
   3e1ac:	80 93 c1 00 	sts	0x00C1, r24

	asm volatile ("nop");			// wait until port has changed
   3e1b0:	00 00       	nop
   3e1b2:	8f e3       	ldi	r24, 0x3F	; 63
   3e1b4:	9f e1       	ldi	r25, 0x1F	; 31
   3e1b6:	01 97       	sbiw	r24, 0x01	; 1
   3e1b8:	f1 f7       	brne	.-4      	; 0x3e1b6 <main+0x56>
   3e1ba:	00 c0       	rjmp	.+0      	; 0x3e1bc <main+0x5c>
   3e1bc:	00 00       	nop

	/////////Kolja
	_delay_ms(2);
	msgLength		=	11;
	msgBuffer[1] 	=	STATUS_CMD_OK;
   3e1be:	1a 82       	std	Y+2, r1	; 0x02
	msgBuffer[2] 	=	8;
   3e1c0:	88 e0       	ldi	r24, 0x08	; 8
   3e1c2:	8b 83       	std	Y+3, r24	; 0x03
	msgBuffer[3] 	=	'A';
   3e1c4:	81 e4       	ldi	r24, 0x41	; 65
   3e1c6:	8c 83       	std	Y+4, r24	; 0x04
	msgBuffer[4] 	=	'V';
   3e1c8:	86 e5       	ldi	r24, 0x56	; 86
   3e1ca:	8d 83       	std	Y+5, r24	; 0x05
	msgBuffer[5] 	=	'R';
   3e1cc:	82 e5       	ldi	r24, 0x52	; 82
   3e1ce:	8e 83       	std	Y+6, r24	; 0x06
	msgBuffer[6] 	=	'I';
   3e1d0:	89 e4       	ldi	r24, 0x49	; 73
   3e1d2:	8f 83       	std	Y+7, r24	; 0x07
	msgBuffer[7] 	=	'S';
   3e1d4:	83 e5       	ldi	r24, 0x53	; 83
   3e1d6:	88 87       	std	Y+8, r24	; 0x08
	msgBuffer[8] 	=	'P';
   3e1d8:	80 e5       	ldi	r24, 0x50	; 80
   3e1da:	89 87       	std	Y+9, r24	; 0x09
	msgBuffer[9] 	=	'_';
   3e1dc:	8f e5       	ldi	r24, 0x5F	; 95
   3e1de:	8a 87       	std	Y+10, r24	; 0x0a
	msgBuffer[10]	=	'2';
   3e1e0:	82 e3       	ldi	r24, 0x32	; 50
   3e1e2:	8b 87       	std	Y+11, r24	; 0x0b
	sendchar(MESSAGE_START);
   3e1e4:	8b e1       	ldi	r24, 0x1B	; 27
   3e1e6:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
	checksum	=	MESSAGE_START^0;

	sendchar(seqNum);
   3e1ea:	81 e0       	ldi	r24, 0x01	; 1
   3e1ec:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
	checksum	^=	seqNum;

	c			=	((msgLength>>8)&0xFF);
	sendchar(c);
   3e1f0:	80 e0       	ldi	r24, 0x00	; 0
   3e1f2:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
	checksum	^=	c;

	c			=	msgLength&0x00FF;
	sendchar(c);
   3e1f6:	8b e0       	ldi	r24, 0x0B	; 11
   3e1f8:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
	checksum ^= c;

	sendchar(TOKEN);
   3e1fc:	8e e0       	ldi	r24, 0x0E	; 14
   3e1fe:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
}



//*****************************************************************************
int main(void)
   3e202:	8e 01       	movw	r16, r28
   3e204:	04 5f       	subi	r16, 0xF4	; 244
   3e206:	1f 4f       	sbci	r17, 0xFF	; 255
	checksum ^= c;

	sendchar(TOKEN);
	checksum ^= TOKEN;

	p	=	msgBuffer;
   3e208:	7e 01       	movw	r14, r28
   3e20a:	08 94       	sec
   3e20c:	e1 1c       	adc	r14, r1
   3e20e:	f1 1c       	adc	r15, r1
	c			=	msgLength&0x00FF;
	sendchar(c);
	checksum ^= c;

	sendchar(TOKEN);
	checksum ^= TOKEN;
   3e210:	9f e1       	ldi	r25, 0x1F	; 31
   3e212:	89 2e       	mov	r8, r25

	p	=	msgBuffer;
	while ( msgLength )
	{
		c	=	*p++;
   3e214:	f7 01       	movw	r30, r14
   3e216:	c1 90       	ld	r12, Z+
   3e218:	7f 01       	movw	r14, r30
		sendchar(c);
   3e21a:	8c 2d       	mov	r24, r12
   3e21c:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
		checksum ^=c;
   3e220:	8c 24       	eor	r8, r12

	sendchar(TOKEN);
	checksum ^= TOKEN;

	p	=	msgBuffer;
	while ( msgLength )
   3e222:	e0 16       	cp	r14, r16
   3e224:	f1 06       	cpc	r15, r17
   3e226:	b1 f7       	brne	.-20     	; 0x3e214 <main+0xb4>
		c	=	*p++;
		sendchar(c);
		checksum ^=c;
		msgLength--;
	}
	sendchar(checksum);
   3e228:	88 2d       	mov	r24, r8
   3e22a:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
	/* enabled in pa1 to read if its a bluetooth reset*/
	DDRA  &= ~(1<<PA1); // one input --> 2.kleinstes bit 0, nicht a0 aber a1
	PORTA |= 1<<PA1; // with pullup


	boot_timer	=	0;
   3e22e:	80 e0       	ldi	r24, 0x00	; 0
   3e230:	90 e0       	ldi	r25, 0x00	; 0
   3e232:	dc 01       	movw	r26, r24
   3e234:	13 c0       	rjmp	.+38     	; 0x3e25c <main+0xfc>
   3e236:	f5 e0       	ldi	r31, 0x05	; 5
   3e238:	fa 95       	dec	r31
   3e23a:	f1 f7       	brne	.-4      	; 0x3e238 <main+0xd8>
   3e23c:	00 00       	nop
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
		{
			_delay_ms(0.001);
			// nur wenn das bit gesetzt ist
			if(bit_is_set(PINA,1)){
   3e23e:	01 9b       	sbis	0x00, 1	; 0
   3e240:	03 c0       	rjmp	.+6      	; 0x3e248 <main+0xe8>
				boot_timer++;
   3e242:	01 96       	adiw	r24, 0x01	; 1
   3e244:	a1 1d       	adc	r26, r1
   3e246:	b1 1d       	adc	r27, r1
			}

			if (boot_timer > boot_timeout)
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
   3e248:	21 e0       	ldi	r18, 0x01	; 1
   3e24a:	30 e0       	ldi	r19, 0x00	; 0
   3e24c:	81 39       	cpi	r24, 0x91	; 145
   3e24e:	40 ed       	ldi	r20, 0xD0	; 208
   3e250:	94 07       	cpc	r25, r20
   3e252:	43 e0       	ldi	r20, 0x03	; 3
   3e254:	a4 07       	cpc	r26, r20
   3e256:	40 e0       	ldi	r20, 0x00	; 0
   3e258:	b4 07       	cpc	r27, r20
   3e25a:	10 f4       	brcc	.+4      	; 0x3e260 <main+0x100>
   3e25c:	20 e0       	ldi	r18, 0x00	; 0
   3e25e:	30 e0       	ldi	r19, 0x00	; 0


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
   3e260:	40 91 c0 00 	lds	r20, 0x00C0
	seqNum++;
	/////////Kolja

	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
   3e264:	47 fd       	sbrc	r20, 7
   3e266:	03 c0       	rjmp	.+6      	; 0x3e26e <main+0x10e>
   3e268:	21 15       	cp	r18, r1
   3e26a:	31 05       	cpc	r19, r1
   3e26c:	21 f3       	breq	.-56     	; 0x3e236 <main+0xd6>
	}
	sendchar(checksum);
	seqNum++;
	/////////Kolja

	while (boot_state==0)
   3e26e:	2f 5f       	subi	r18, 0xFF	; 255
   3e270:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}


	if (boot_state==1)
   3e272:	21 30       	cpi	r18, 0x01	; 1
   3e274:	31 05       	cpc	r19, r1
   3e276:	09 f0       	breq	.+2      	; 0x3e27a <main+0x11a>
   3e278:	c3 c2       	rjmp	.+1414   	; 0x3e800 <main+0x6a0>
   3e27a:	44 24       	eor	r4, r4
   3e27c:	55 24       	eor	r5, r5
   3e27e:	32 01       	movw	r6, r4
   3e280:	ee 24       	eor	r14, r14
   3e282:	ff 24       	eor	r15, r15
   3e284:	87 01       	movw	r16, r14
   3e286:	82 e0       	ldi	r24, 0x02	; 2
   3e288:	98 2e       	mov	r9, r24
   3e28a:	22 24       	eor	r2, r2
   3e28c:	33 24       	eor	r3, r3
		count++;
		if (count > MAX_TIME_COUNT)
		{
			unsigned int	data;
#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
   3e28e:	6b be       	out	0x3b, r6	; 59
   3e290:	f2 01       	movw	r30, r4
   3e292:	87 91       	elpm	r24, Z+
   3e294:	96 91       	elpm	r25, Z+
   3e296:	cc 5d       	subi	r28, 0xDC	; 220
   3e298:	de 4f       	sbci	r29, 0xFE	; 254
   3e29a:	99 83       	std	Y+1, r25	; 0x01
   3e29c:	88 83       	st	Y, r24
   3e29e:	c4 52       	subi	r28, 0x24	; 36
   3e2a0:	d1 40       	sbci	r29, 0x01	; 1
   3e2a2:	aa c2       	rjmp	.+1364   	; 0x3e7f8 <main+0x698>
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}


	if (boot_state==1)
   3e2a4:	20 e0       	ldi	r18, 0x00	; 0
   3e2a6:	30 e0       	ldi	r19, 0x00	; 0
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
			{
				if (boot_state==1)
   3e2a8:	21 30       	cpi	r18, 0x01	; 1
   3e2aa:	31 05       	cpc	r19, r1
   3e2ac:	d1 f4       	brne	.+52     	; 0x3e2e2 <main+0x182>
   3e2ae:	20 c0       	rjmp	.+64     	; 0x3e2f0 <main+0x190>
	uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
	{
		// wait for data
		count++;
   3e2b0:	2f 5f       	subi	r18, 0xFF	; 255
   3e2b2:	3f 4f       	sbci	r19, 0xFF	; 255
   3e2b4:	4f 4f       	sbci	r20, 0xFF	; 255
   3e2b6:	5f 4f       	sbci	r21, 0xFF	; 255
		if (count > MAX_TIME_COUNT)
   3e2b8:	21 30       	cpi	r18, 0x01	; 1
   3e2ba:	92 e1       	ldi	r25, 0x12	; 18
   3e2bc:	39 07       	cpc	r19, r25
   3e2be:	9a e7       	ldi	r25, 0x7A	; 122
   3e2c0:	49 07       	cpc	r20, r25
   3e2c2:	90 e0       	ldi	r25, 0x00	; 0
   3e2c4:	59 07       	cpc	r21, r25
   3e2c6:	80 f0       	brcs	.+32     	; 0x3e2e8 <main+0x188>
#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   3e2c8:	cc 5d       	subi	r28, 0xDC	; 220
   3e2ca:	de 4f       	sbci	r29, 0xFE	; 254
   3e2cc:	e8 81       	ld	r30, Y
   3e2ce:	f9 81       	ldd	r31, Y+1	; 0x01
   3e2d0:	c4 52       	subi	r28, 0x24	; 36
   3e2d2:	d1 40       	sbci	r29, 0x01	; 1
   3e2d4:	2f ef       	ldi	r18, 0xFF	; 255
   3e2d6:	ef 3f       	cpi	r30, 0xFF	; 255
   3e2d8:	f2 07       	cpc	r31, r18
   3e2da:	19 f0       	breq	.+6      	; 0x3e2e2 <main+0x182>
			{
				asm volatile(
   3e2dc:	ee 27       	eor	r30, r30
   3e2de:	ff 27       	eor	r31, r31
   3e2e0:	09 94       	ijmp
#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
   3e2e2:	20 e0       	ldi	r18, 0x00	; 0
   3e2e4:	30 e0       	ldi	r19, 0x00	; 0
   3e2e6:	a9 01       	movw	r20, r18
//*****************************************************************************
static unsigned char recchar_timeout(void)
{
	uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
   3e2e8:	90 91 c0 00 	lds	r25, 0x00C0
   3e2ec:	97 ff       	sbrs	r25, 7
   3e2ee:	e0 cf       	rjmp	.-64     	; 0x3e2b0 <main+0x150>
				);
			}
			count	=	0;
		}
	}
	return UART_DATA_REG;
   3e2f0:	20 91 c6 00 	lds	r18, 0x00C6
					c	=	recchar_timeout();
				}



				switch (msgParseState){
   3e2f4:	83 30       	cpi	r24, 0x03	; 3
   3e2f6:	f9 f0       	breq	.+62     	; 0x3e336 <main+0x1d6>
   3e2f8:	84 30       	cpi	r24, 0x04	; 4
   3e2fa:	28 f4       	brcc	.+10     	; 0x3e306 <main+0x1a6>
   3e2fc:	81 30       	cpi	r24, 0x01	; 1
   3e2fe:	69 f0       	breq	.+26     	; 0x3e31a <main+0x1ba>
   3e300:	82 30       	cpi	r24, 0x02	; 2
   3e302:	a0 f4       	brcc	.+40     	; 0x3e32c <main+0x1cc>
   3e304:	07 c0       	rjmp	.+14     	; 0x3e314 <main+0x1b4>
   3e306:	85 30       	cpi	r24, 0x05	; 5
   3e308:	29 f1       	breq	.+74     	; 0x3e354 <main+0x1f4>
   3e30a:	85 30       	cpi	r24, 0x05	; 5
   3e30c:	d8 f0       	brcs	.+54     	; 0x3e344 <main+0x1e4>
   3e30e:	86 30       	cpi	r24, 0x06	; 6
   3e310:	a9 f5       	brne	.+106    	; 0x3e37c <main+0x21c>
   3e312:	30 c0       	rjmp	.+96     	; 0x3e374 <main+0x214>
				case ST_START:
					if ( c == MESSAGE_START )
   3e314:	2b 31       	cpi	r18, 0x1B	; 27
   3e316:	31 f6       	brne	.-116    	; 0x3e2a4 <main+0x144>
   3e318:	8e c2       	rjmp	.+1308   	; 0x3e836 <main+0x6d6>
						checksum		=	MESSAGE_START^0;
					}
					break;

				case ST_GET_SEQ_NUM:
					if ( (c == 1) || (c == seqNum) )
   3e31a:	21 30       	cpi	r18, 0x01	; 1
   3e31c:	19 f0       	breq	.+6      	; 0x3e324 <main+0x1c4>
   3e31e:	29 15       	cp	r18, r9
   3e320:	09 f0       	breq	.+2      	; 0x3e324 <main+0x1c4>
   3e322:	8d c2       	rjmp	.+1306   	; 0x3e83e <main+0x6de>
					{
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
						checksum		^=	c;
   3e324:	82 26       	eor	r8, r18
   3e326:	92 2e       	mov	r9, r18

				case ST_GET_SEQ_NUM:
					if ( (c == 1) || (c == seqNum) )
					{
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
   3e328:	82 e0       	ldi	r24, 0x02	; 2
						checksum		^=	c;
   3e32a:	bc cf       	rjmp	.-136    	; 0x3e2a4 <main+0x144>
						msgParseState	=	ST_START;
					}
					break;

				case ST_MSG_SIZE_1:
					msgLength		=	c<<8;
   3e32c:	72 2f       	mov	r23, r18
   3e32e:	60 e0       	ldi	r22, 0x00	; 0
					msgParseState	=	ST_MSG_SIZE_2;
					checksum		^=	c;
   3e330:	82 26       	eor	r8, r18
					}
					break;

				case ST_MSG_SIZE_1:
					msgLength		=	c<<8;
					msgParseState	=	ST_MSG_SIZE_2;
   3e332:	83 e0       	ldi	r24, 0x03	; 3
					checksum		^=	c;
					break;
   3e334:	b7 cf       	rjmp	.-146    	; 0x3e2a4 <main+0x144>

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
   3e336:	82 2f       	mov	r24, r18
   3e338:	90 e0       	ldi	r25, 0x00	; 0
   3e33a:	68 2b       	or	r22, r24
   3e33c:	79 2b       	or	r23, r25
					msgParseState	=	ST_GET_TOKEN;
					checksum		^=	c;
   3e33e:	82 26       	eor	r8, r18
					checksum		^=	c;
					break;

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
					msgParseState	=	ST_GET_TOKEN;
   3e340:	84 e0       	ldi	r24, 0x04	; 4
					checksum		^=	c;
					break;
   3e342:	b0 cf       	rjmp	.-160    	; 0x3e2a4 <main+0x144>

				case ST_GET_TOKEN:
					if ( c == TOKEN )
   3e344:	2e 30       	cpi	r18, 0x0E	; 14
   3e346:	09 f0       	breq	.+2      	; 0x3e34a <main+0x1ea>
   3e348:	7a c2       	rjmp	.+1268   	; 0x3e83e <main+0x6de>
					{
						msgParseState	=	ST_GET_DATA;
						checksum		^=	c;
   3e34a:	82 26       	eor	r8, r18
						ii				=	0;
   3e34c:	22 24       	eor	r2, r2
   3e34e:	33 24       	eor	r3, r3
					break;

				case ST_GET_TOKEN:
					if ( c == TOKEN )
					{
						msgParseState	=	ST_GET_DATA;
   3e350:	85 e0       	ldi	r24, 0x05	; 5
   3e352:	a8 cf       	rjmp	.-176    	; 0x3e2a4 <main+0x144>
						msgParseState	=	ST_START;
					}
					break;

				case ST_GET_DATA:
					msgBuffer[ii++]	=	c;
   3e354:	e1 e0       	ldi	r30, 0x01	; 1
   3e356:	f0 e0       	ldi	r31, 0x00	; 0
   3e358:	ec 0f       	add	r30, r28
   3e35a:	fd 1f       	adc	r31, r29
   3e35c:	e2 0d       	add	r30, r2
   3e35e:	f3 1d       	adc	r31, r3
   3e360:	20 83       	st	Z, r18
   3e362:	08 94       	sec
   3e364:	21 1c       	adc	r2, r1
   3e366:	31 1c       	adc	r3, r1
					checksum		^=	c;
   3e368:	82 26       	eor	r8, r18
					if (ii == msgLength )
   3e36a:	26 16       	cp	r2, r22
   3e36c:	37 06       	cpc	r3, r23
   3e36e:	09 f0       	breq	.+2      	; 0x3e372 <main+0x212>
   3e370:	99 cf       	rjmp	.-206    	; 0x3e2a4 <main+0x144>
   3e372:	67 c2       	rjmp	.+1230   	; 0x3e842 <main+0x6e2>
						msgParseState	=	ST_GET_CHECK;
					}
					break;

				case ST_GET_CHECK:
					if ( c == checksum )
   3e374:	28 15       	cp	r18, r8
   3e376:	09 f0       	breq	.+2      	; 0x3e37a <main+0x21a>
   3e378:	62 c2       	rjmp	.+1220   	; 0x3e83e <main+0x6de>
   3e37a:	03 c0       	rjmp	.+6      	; 0x3e382 <main+0x222>
		{
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
   3e37c:	87 30       	cpi	r24, 0x07	; 7
   3e37e:	09 f0       	breq	.+2      	; 0x3e382 <main+0x222>
   3e380:	91 cf       	rjmp	.-222    	; 0x3e2a4 <main+0x144>

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0]){
   3e382:	49 81       	ldd	r20, Y+1	; 0x01
   3e384:	43 31       	cpi	r20, 0x13	; 19
   3e386:	09 f4       	brne	.+2      	; 0x3e38a <main+0x22a>
   3e388:	f2 c0       	rjmp	.+484    	; 0x3e56e <main+0x40e>
   3e38a:	44 31       	cpi	r20, 0x14	; 20
   3e38c:	c0 f4       	brcc	.+48     	; 0x3e3be <main+0x25e>
   3e38e:	46 30       	cpi	r20, 0x06	; 6
   3e390:	09 f4       	brne	.+2      	; 0x3e394 <main+0x234>
   3e392:	c1 c0       	rjmp	.+386    	; 0x3e516 <main+0x3b6>
   3e394:	47 30       	cpi	r20, 0x07	; 7
   3e396:	48 f4       	brcc	.+18     	; 0x3e3aa <main+0x24a>
   3e398:	42 30       	cpi	r20, 0x02	; 2
   3e39a:	69 f1       	breq	.+90     	; 0x3e3f6 <main+0x296>
   3e39c:	43 30       	cpi	r20, 0x03	; 3
   3e39e:	09 f4       	brne	.+2      	; 0x3e3a2 <main+0x242>
   3e3a0:	5e c0       	rjmp	.+188    	; 0x3e45e <main+0x2fe>
   3e3a2:	41 30       	cpi	r20, 0x01	; 1
   3e3a4:	09 f0       	breq	.+2      	; 0x3e3a8 <main+0x248>
   3e3a6:	d1 c1       	rjmp	.+930    	; 0x3e74a <main+0x5ea>
   3e3a8:	42 c0       	rjmp	.+132    	; 0x3e42e <main+0x2ce>
   3e3aa:	41 31       	cpi	r20, 0x11	; 17
   3e3ac:	09 f4       	brne	.+2      	; 0x3e3b0 <main+0x250>
   3e3ae:	64 c0       	rjmp	.+200    	; 0x3e478 <main+0x318>
   3e3b0:	42 31       	cpi	r20, 0x12	; 18
   3e3b2:	08 f0       	brcs	.+2      	; 0x3e3b6 <main+0x256>
   3e3b4:	a7 c0       	rjmp	.+334    	; 0x3e504 <main+0x3a4>
   3e3b6:	40 31       	cpi	r20, 0x10	; 16
   3e3b8:	09 f0       	breq	.+2      	; 0x3e3bc <main+0x25c>
   3e3ba:	c7 c1       	rjmp	.+910    	; 0x3e74a <main+0x5ea>
   3e3bc:	1c c0       	rjmp	.+56     	; 0x3e3f6 <main+0x296>
   3e3be:	48 31       	cpi	r20, 0x18	; 24
   3e3c0:	09 f4       	brne	.+2      	; 0x3e3c4 <main+0x264>
   3e3c2:	76 c0       	rjmp	.+236    	; 0x3e4b0 <main+0x350>
   3e3c4:	49 31       	cpi	r20, 0x19	; 25
   3e3c6:	50 f4       	brcc	.+20     	; 0x3e3dc <main+0x27c>
   3e3c8:	45 31       	cpi	r20, 0x15	; 21
   3e3ca:	09 f4       	brne	.+2      	; 0x3e3ce <main+0x26e>
   3e3cc:	d0 c0       	rjmp	.+416    	; 0x3e56e <main+0x40e>
   3e3ce:	45 31       	cpi	r20, 0x15	; 21
   3e3d0:	08 f4       	brcc	.+2      	; 0x3e3d4 <main+0x274>
   3e3d2:	61 c1       	rjmp	.+706    	; 0x3e696 <main+0x536>
   3e3d4:	46 31       	cpi	r20, 0x16	; 22
   3e3d6:	09 f0       	breq	.+2      	; 0x3e3da <main+0x27a>
   3e3d8:	b8 c1       	rjmp	.+880    	; 0x3e74a <main+0x5ea>
   3e3da:	5d c1       	rjmp	.+698    	; 0x3e696 <main+0x536>
   3e3dc:	4a 31       	cpi	r20, 0x1A	; 26
   3e3de:	09 f4       	brne	.+2      	; 0x3e3e2 <main+0x282>
   3e3e0:	59 c0       	rjmp	.+178    	; 0x3e494 <main+0x334>
   3e3e2:	4a 31       	cpi	r20, 0x1A	; 26
   3e3e4:	08 f4       	brcc	.+2      	; 0x3e3e8 <main+0x288>
   3e3e6:	7b c0       	rjmp	.+246    	; 0x3e4de <main+0x37e>
   3e3e8:	4b 31       	cpi	r20, 0x1B	; 27
   3e3ea:	09 f4       	brne	.+2      	; 0x3e3ee <main+0x28e>
   3e3ec:	48 c0       	rjmp	.+144    	; 0x3e47e <main+0x31e>
   3e3ee:	4d 31       	cpi	r20, 0x1D	; 29
   3e3f0:	09 f0       	breq	.+2      	; 0x3e3f4 <main+0x294>
   3e3f2:	ab c1       	rjmp	.+854    	; 0x3e74a <main+0x5ea>
   3e3f4:	02 c0       	rjmp	.+4      	; 0x3e3fa <main+0x29a>
   3e3f6:	90 e0       	ldi	r25, 0x00	; 0
   3e3f8:	40 c0       	rjmp	.+128    	; 0x3e47a <main+0x31a>
			case CMD_SPI_MULTI:
			{
				unsigned char answerByte;
				unsigned char flag=0;

				if ( msgBuffer[4]== 0x30 )
   3e3fa:	9d 81       	ldd	r25, Y+5	; 0x05
   3e3fc:	90 33       	cpi	r25, 0x30	; 48
   3e3fe:	39 f4       	brne	.+14     	; 0x3e40e <main+0x2ae>
				{
					unsigned char signatureIndex = msgBuffer[6];
   3e400:	8f 81       	ldd	r24, Y+7	; 0x07

					if ( signatureIndex == 0 )
   3e402:	88 23       	and	r24, r24
   3e404:	31 f0       	breq	.+12     	; 0x3e412 <main+0x2b2>
						answerByte = (SIGNATURE_BYTES >>16) & 0x000000FF;
					else if ( signatureIndex == 1 )
   3e406:	81 30       	cpi	r24, 0x01	; 1
   3e408:	31 f4       	brne	.+12     	; 0x3e416 <main+0x2b6>
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
   3e40a:	88 e9       	ldi	r24, 0x98	; 152
   3e40c:	05 c0       	rjmp	.+10     	; 0x3e418 <main+0x2b8>
					else
						answerByte = SIGNATURE_BYTES & 0x000000FF;
				}
				else if ( msgBuffer[4] & 0x50 )
				{
					answerByte = 0; //read fuse/lock bits not implemented, return dummy value
   3e40e:	80 e0       	ldi	r24, 0x00	; 0
   3e410:	03 c0       	rjmp	.+6      	; 0x3e418 <main+0x2b8>
				if ( msgBuffer[4]== 0x30 )
				{
					unsigned char signatureIndex = msgBuffer[6];

					if ( signatureIndex == 0 )
						answerByte = (SIGNATURE_BYTES >>16) & 0x000000FF;
   3e412:	8e e1       	ldi	r24, 0x1E	; 30
   3e414:	01 c0       	rjmp	.+2      	; 0x3e418 <main+0x2b8>
					else if ( signatureIndex == 1 )
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
					else
						answerByte = SIGNATURE_BYTES & 0x000000FF;
   3e416:	81 e0       	ldi	r24, 0x01	; 1
					// flag = 1; // Remark this line for AVRDUDE <Worapoht>
				}
				if ( !flag )
				{
					msgLength = 7;
					msgBuffer[1] = STATUS_CMD_OK;
   3e418:	1a 82       	std	Y+2, r1	; 0x02
					msgBuffer[2] = 0;
   3e41a:	1b 82       	std	Y+3, r1	; 0x03
					msgBuffer[3] = msgBuffer[4];
   3e41c:	9c 83       	std	Y+4, r25	; 0x04
					msgBuffer[4] = 0;
   3e41e:	1d 82       	std	Y+5, r1	; 0x05
					msgBuffer[5] = answerByte;
   3e420:	8e 83       	std	Y+6, r24	; 0x06
					msgBuffer[6] = STATUS_CMD_OK;
   3e422:	1f 82       	std	Y+7, r1	; 0x07
   3e424:	90 e0       	ldi	r25, 0x00	; 0
					answerByte = 0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
					// flag = 1; // Remark this line for AVRDUDE <Worapoht>
				}
				if ( !flag )
				{
					msgLength = 7;
   3e426:	b7 e0       	ldi	r27, 0x07	; 7
   3e428:	cb 2e       	mov	r12, r27
   3e42a:	d1 2c       	mov	r13, r1
   3e42c:	94 c1       	rjmp	.+808    	; 0x3e756 <main+0x5f6>
			}
			break;

			case CMD_SIGN_ON:
				msgLength		=	11;
				msgBuffer[1] 	=	STATUS_CMD_OK;
   3e42e:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] 	=	8;
   3e430:	88 e0       	ldi	r24, 0x08	; 8
   3e432:	8b 83       	std	Y+3, r24	; 0x03
				msgBuffer[3] 	=	'A';
   3e434:	81 e4       	ldi	r24, 0x41	; 65
   3e436:	8c 83       	std	Y+4, r24	; 0x04
				msgBuffer[4] 	=	'V';
   3e438:	86 e5       	ldi	r24, 0x56	; 86
   3e43a:	8d 83       	std	Y+5, r24	; 0x05
				msgBuffer[5] 	=	'R';
   3e43c:	82 e5       	ldi	r24, 0x52	; 82
   3e43e:	8e 83       	std	Y+6, r24	; 0x06
				msgBuffer[6] 	=	'I';
   3e440:	89 e4       	ldi	r24, 0x49	; 73
   3e442:	8f 83       	std	Y+7, r24	; 0x07
				msgBuffer[7] 	=	'S';
   3e444:	83 e5       	ldi	r24, 0x53	; 83
   3e446:	88 87       	std	Y+8, r24	; 0x08
				msgBuffer[8] 	=	'P';
   3e448:	80 e5       	ldi	r24, 0x50	; 80
   3e44a:	89 87       	std	Y+9, r24	; 0x09
				msgBuffer[9] 	=	'_';
   3e44c:	8f e5       	ldi	r24, 0x5F	; 95
   3e44e:	8a 87       	std	Y+10, r24	; 0x0a
				msgBuffer[10]	=	'2';
   3e450:	82 e3       	ldi	r24, 0x32	; 50
   3e452:	8b 87       	std	Y+11, r24	; 0x0b
				break;
   3e454:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
			break;

			case CMD_SIGN_ON:
				msgLength		=	11;
   3e456:	ab e0       	ldi	r26, 0x0B	; 11
   3e458:	ca 2e       	mov	r12, r26
   3e45a:	d1 2c       	mov	r13, r1
				msgBuffer[6] 	=	'I';
				msgBuffer[7] 	=	'S';
				msgBuffer[8] 	=	'P';
				msgBuffer[9] 	=	'_';
				msgBuffer[10]	=	'2';
				break;
   3e45c:	7c c1       	rjmp	.+760    	; 0x3e756 <main+0x5f6>

			case CMD_GET_PARAMETER:
			{
				unsigned char value;

				switch(msgBuffer[1])
   3e45e:	ea 81       	ldd	r30, Y+2	; 0x02
   3e460:	e0 58       	subi	r30, 0x80	; 128
   3e462:	e3 31       	cpi	r30, 0x13	; 19
   3e464:	28 f4       	brcc	.+10     	; 0x3e470 <main+0x310>
   3e466:	f0 e0       	ldi	r31, 0x00	; 0
   3e468:	e0 50       	subi	r30, 0x00	; 0
   3e46a:	fe 4f       	sbci	r31, 0xFE	; 254
   3e46c:	80 81       	ld	r24, Z
   3e46e:	01 c0       	rjmp	.+2      	; 0x3e472 <main+0x312>
   3e470:	80 e0       	ldi	r24, 0x00	; 0
				default:
					value	=	0;
					break;
				}
				msgLength		=	3;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3e472:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2]	=	value;
   3e474:	8b 83       	std	Y+3, r24	; 0x03
   3e476:	41 c0       	rjmp	.+130    	; 0x3e4fa <main+0x39a>
			}
			break;

			case CMD_LEAVE_PROGMODE_ISP:
				isLeave	=	1;
   3e478:	91 e0       	ldi	r25, 0x01	; 1
				//*	fall thru

			case CMD_SET_PARAMETER: // häh??
			case CMD_ENTER_PROGMODE_ISP:
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3e47a:	1a 82       	std	Y+2, r1	; 0x02
   3e47c:	69 c1       	rjmp	.+722    	; 0x3e750 <main+0x5f0>
				break;

			case CMD_READ_SIGNATURE_ISP:
			{
				unsigned char signatureIndex	=	msgBuffer[4];
   3e47e:	8d 81       	ldd	r24, Y+5	; 0x05
				unsigned char signature;

				if ( signatureIndex == 0 )
   3e480:	88 23       	and	r24, r24
   3e482:	21 f0       	breq	.+8      	; 0x3e48c <main+0x32c>
					signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
				else if ( signatureIndex == 1 )
   3e484:	81 30       	cpi	r24, 0x01	; 1
   3e486:	21 f4       	brne	.+8      	; 0x3e490 <main+0x330>
					signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
   3e488:	88 e9       	ldi	r24, 0x98	; 152
   3e48a:	26 c0       	rjmp	.+76     	; 0x3e4d8 <main+0x378>
			{
				unsigned char signatureIndex	=	msgBuffer[4];
				unsigned char signature;

				if ( signatureIndex == 0 )
					signature	=	(SIGNATURE_BYTES >>16) & 0x000000FF;
   3e48c:	8e e1       	ldi	r24, 0x1E	; 30
   3e48e:	24 c0       	rjmp	.+72     	; 0x3e4d8 <main+0x378>
				else if ( signatureIndex == 1 )
					signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
				else
					signature	=	SIGNATURE_BYTES & 0x000000FF;
   3e490:	81 e0       	ldi	r24, 0x01	; 1
   3e492:	22 c0       	rjmp	.+68     	; 0x3e4d8 <main+0x378>
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength		=	4;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3e494:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
   3e496:	e1 e0       	ldi	r30, 0x01	; 1
   3e498:	f0 e0       	ldi	r31, 0x00	; 0
   3e49a:	89 e0       	ldi	r24, 0x09	; 9
   3e49c:	80 93 57 00 	sts	0x0057, r24
   3e4a0:	e4 91       	lpm	r30, Z+
   3e4a2:	eb 83       	std	Y+3, r30	; 0x03
				msgBuffer[3]	=	STATUS_CMD_OK;
   3e4a4:	1c 82       	std	Y+4, r1	; 0x04
				break;
   3e4a6:	90 e0       	ldi	r25, 0x00	; 0
				msgBuffer[3]	=	STATUS_CMD_OK;
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength		=	4;
   3e4a8:	f4 e0       	ldi	r31, 0x04	; 4
   3e4aa:	cf 2e       	mov	r12, r31
   3e4ac:	d1 2c       	mov	r13, r1
				msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[2]	=	boot_lock_fuse_bits_get( GET_LOCK_BITS );
				msgBuffer[3]	=	STATUS_CMD_OK;
				break;
   3e4ae:	53 c1       	rjmp	.+678    	; 0x3e756 <main+0x5f6>

			case CMD_READ_FUSE_ISP:
			{
				unsigned char fuseBits;

				if ( msgBuffer[2] == 0x50 )
   3e4b0:	8b 81       	ldd	r24, Y+3	; 0x03
   3e4b2:	80 35       	cpi	r24, 0x50	; 80
   3e4b4:	59 f4       	brne	.+22     	; 0x3e4cc <main+0x36c>
				{
					if ( msgBuffer[3] == 0x08 )
   3e4b6:	8c 81       	ldd	r24, Y+4	; 0x04
   3e4b8:	88 30       	cpi	r24, 0x08	; 8
   3e4ba:	21 f4       	brne	.+8      	; 0x3e4c4 <main+0x364>
						fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3e4bc:	89 e0       	ldi	r24, 0x09	; 9
   3e4be:	e2 e0       	ldi	r30, 0x02	; 2
   3e4c0:	f0 e0       	ldi	r31, 0x00	; 0
   3e4c2:	07 c0       	rjmp	.+14     	; 0x3e4d2 <main+0x372>
					else
						fuseBits	=	boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
   3e4c4:	89 e0       	ldi	r24, 0x09	; 9
   3e4c6:	e0 e0       	ldi	r30, 0x00	; 0
   3e4c8:	f0 e0       	ldi	r31, 0x00	; 0
   3e4ca:	03 c0       	rjmp	.+6      	; 0x3e4d2 <main+0x372>
				}
				else
				{
					fuseBits	=	boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
   3e4cc:	e3 e0       	ldi	r30, 0x03	; 3
   3e4ce:	f0 e0       	ldi	r31, 0x00	; 0
   3e4d0:	89 e0       	ldi	r24, 0x09	; 9
   3e4d2:	80 93 57 00 	sts	0x0057, r24
   3e4d6:	84 91       	lpm	r24, Z+
				}
				msgLength		=	4;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3e4d8:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2]	=	fuseBits;
   3e4da:	8b 83       	std	Y+3, r24	; 0x03
   3e4dc:	e3 cf       	rjmp	.-58     	; 0x3e4a4 <main+0x344>
#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
			case CMD_PROGRAM_LOCK_ISP:
			{
				unsigned char lockBits	=	msgBuffer[4];

				lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
   3e4de:	8d 81       	ldd	r24, Y+5	; 0x05
				boot_lock_bits_set(lockBits);		// and program it
   3e4e0:	83 6c       	ori	r24, 0xC3	; 195
   3e4e2:	99 e0       	ldi	r25, 0x09	; 9
   3e4e4:	e1 e0       	ldi	r30, 0x01	; 1
   3e4e6:	f0 e0       	ldi	r31, 0x00	; 0
   3e4e8:	08 2e       	mov	r0, r24
   3e4ea:	90 93 57 00 	sts	0x0057, r25
   3e4ee:	e8 95       	spm
				boot_spm_busy_wait();
   3e4f0:	07 b6       	in	r0, 0x37	; 55
   3e4f2:	00 fc       	sbrc	r0, 0
   3e4f4:	fd cf       	rjmp	.-6      	; 0x3e4f0 <main+0x390>

				msgLength		=	3;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3e4f6:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2]	=	STATUS_CMD_OK;
   3e4f8:	1b 82       	std	Y+3, r1	; 0x03
			}
			break;
   3e4fa:	90 e0       	ldi	r25, 0x00	; 0

				lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
				boot_lock_bits_set(lockBits);		// and program it
				boot_spm_busy_wait();

				msgLength		=	3;
   3e4fc:	e3 e0       	ldi	r30, 0x03	; 3
   3e4fe:	ce 2e       	mov	r12, r30
   3e500:	d1 2c       	mov	r13, r1
				msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[2]	=	STATUS_CMD_OK;
			}
			break;
   3e502:	29 c1       	rjmp	.+594    	; 0x3e756 <main+0x5f6>
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3e504:	1a 82       	std	Y+2, r1	; 0x02
				break;
   3e506:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
				msgLength		=	2;
   3e508:	72 e0       	ldi	r23, 0x02	; 2
   3e50a:	c7 2e       	mov	r12, r23
   3e50c:	d1 2c       	mov	r13, r1
				msgBuffer[2]	=	STATUS_CMD_OK;
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
   3e50e:	44 24       	eor	r4, r4
   3e510:	55 24       	eor	r5, r5
   3e512:	32 01       	movw	r6, r4
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
				break;
   3e514:	20 c1       	rjmp	.+576    	; 0x3e756 <main+0x5f6>

			case CMD_LOAD_ADDRESS:
#if defined(RAMPZ)
				address	=	( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
   3e516:	ea 80       	ldd	r14, Y+2	; 0x02
   3e518:	ff 24       	eor	r15, r15
   3e51a:	00 e0       	ldi	r16, 0x00	; 0
   3e51c:	10 e0       	ldi	r17, 0x00	; 0
   3e51e:	1e 2d       	mov	r17, r14
   3e520:	00 27       	eor	r16, r16
   3e522:	ff 24       	eor	r15, r15
   3e524:	ee 24       	eor	r14, r14
   3e526:	8b 81       	ldd	r24, Y+3	; 0x03
   3e528:	90 e0       	ldi	r25, 0x00	; 0
   3e52a:	a0 e0       	ldi	r26, 0x00	; 0
   3e52c:	b0 e0       	ldi	r27, 0x00	; 0
   3e52e:	dc 01       	movw	r26, r24
   3e530:	99 27       	eor	r25, r25
   3e532:	88 27       	eor	r24, r24
   3e534:	e8 2a       	or	r14, r24
   3e536:	f9 2a       	or	r15, r25
   3e538:	0a 2b       	or	r16, r26
   3e53a:	1b 2b       	or	r17, r27
   3e53c:	8d 81       	ldd	r24, Y+5	; 0x05
   3e53e:	90 e0       	ldi	r25, 0x00	; 0
   3e540:	a0 e0       	ldi	r26, 0x00	; 0
   3e542:	b0 e0       	ldi	r27, 0x00	; 0
   3e544:	e8 2a       	or	r14, r24
   3e546:	f9 2a       	or	r15, r25
   3e548:	0a 2b       	or	r16, r26
   3e54a:	1b 2b       	or	r17, r27
   3e54c:	8c 81       	ldd	r24, Y+4	; 0x04
   3e54e:	90 e0       	ldi	r25, 0x00	; 0
   3e550:	a0 e0       	ldi	r26, 0x00	; 0
   3e552:	b0 e0       	ldi	r27, 0x00	; 0
   3e554:	ba 2f       	mov	r27, r26
   3e556:	a9 2f       	mov	r26, r25
   3e558:	98 2f       	mov	r25, r24
   3e55a:	88 27       	eor	r24, r24
   3e55c:	e8 2a       	or	r14, r24
   3e55e:	f9 2a       	or	r15, r25
   3e560:	0a 2b       	or	r16, r26
   3e562:	1b 2b       	or	r17, r27
   3e564:	ee 0c       	add	r14, r14
   3e566:	ff 1c       	adc	r15, r15
   3e568:	00 1f       	adc	r16, r16
   3e56a:	11 1f       	adc	r17, r17
   3e56c:	92 c0       	rjmp	.+292    	; 0x3e692 <main+0x532>
				break;

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2]; // 80
   3e56e:	fa 81       	ldd	r31, Y+2	; 0x02
   3e570:	c1 5e       	subi	r28, 0xE1	; 225
   3e572:	de 4f       	sbci	r29, 0xFE	; 254
   3e574:	f8 83       	st	Y, r31
   3e576:	cf 51       	subi	r28, 0x1F	; 31
   3e578:	d1 40       	sbci	r29, 0x01	; 1
   3e57a:	c2 5e       	subi	r28, 0xE2	; 226
   3e57c:	de 4f       	sbci	r29, 0xFE	; 254
   3e57e:	18 82       	st	Y, r1
   3e580:	ce 51       	subi	r28, 0x1E	; 30
   3e582:	d1 40       	sbci	r29, 0x01	; 1
   3e584:	8b 81       	ldd	r24, Y+3	; 0x03
   3e586:	90 e0       	ldi	r25, 0x00	; 0
   3e588:	c2 5e       	subi	r28, 0xE2	; 226
   3e58a:	de 4f       	sbci	r29, 0xFE	; 254
   3e58c:	28 81       	ld	r18, Y
   3e58e:	39 81       	ldd	r19, Y+1	; 0x01
   3e590:	ce 51       	subi	r28, 0x1E	; 30
   3e592:	d1 40       	sbci	r29, 0x01	; 1
   3e594:	82 2b       	or	r24, r18
   3e596:	93 2b       	or	r25, r19
				unsigned int	data;
				unsigned char	highByte, lowByte;
				address_t		tempaddress	=	address;


				if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
   3e598:	43 31       	cpi	r20, 0x13	; 19
   3e59a:	09 f0       	breq	.+2      	; 0x3e59e <main+0x43e>
   3e59c:	58 c0       	rjmp	.+176    	; 0x3e64e <main+0x4ee>
				{
					// erase only main section (bootloader protection)
					if (eraseAddress < APP_END )
   3e59e:	30 e0       	ldi	r19, 0x00	; 0
   3e5a0:	43 16       	cp	r4, r19
   3e5a2:	30 ec       	ldi	r19, 0xC0	; 192
   3e5a4:	53 06       	cpc	r5, r19
   3e5a6:	33 e0       	ldi	r19, 0x03	; 3
   3e5a8:	63 06       	cpc	r6, r19
   3e5aa:	30 e0       	ldi	r19, 0x00	; 0
   3e5ac:	73 06       	cpc	r7, r19
   3e5ae:	90 f4       	brcc	.+36     	; 0x3e5d4 <main+0x474>
					{
						boot_page_erase(eraseAddress);	// Perform page erase
   3e5b0:	43 e0       	ldi	r20, 0x03	; 3
   3e5b2:	f2 01       	movw	r30, r4
   3e5b4:	60 92 5b 00 	sts	0x005B, r6
   3e5b8:	40 93 57 00 	sts	0x0057, r20
   3e5bc:	e8 95       	spm
						boot_spm_busy_wait();		// Wait until the memory is erased.
   3e5be:	07 b6       	in	r0, 0x37	; 55
   3e5c0:	00 fc       	sbrc	r0, 0
   3e5c2:	fd cf       	rjmp	.-6      	; 0x3e5be <main+0x45e>
						eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   3e5c4:	20 e0       	ldi	r18, 0x00	; 0
   3e5c6:	31 e0       	ldi	r19, 0x01	; 1
   3e5c8:	40 e0       	ldi	r20, 0x00	; 0
   3e5ca:	50 e0       	ldi	r21, 0x00	; 0
   3e5cc:	42 0e       	add	r4, r18
   3e5ce:	53 1e       	adc	r5, r19
   3e5d0:	64 1e       	adc	r6, r20
   3e5d2:	75 1e       	adc	r7, r21
				unsigned char fuseBits;

				if ( msgBuffer[2] == 0x50 )
				{
					if ( msgBuffer[3] == 0x08 )
						fuseBits	=	boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
   3e5d4:	b8 01       	movw	r22, r16
   3e5d6:	a7 01       	movw	r20, r14

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2]; // 80
				unsigned char	*p	=	msgBuffer+10;
   3e5d8:	de 01       	movw	r26, r28
   3e5da:	1b 96       	adiw	r26, 0x0b	; 11
						eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
					}

					/* Write FLASH */
					do {
						lowByte		=	*p++;
   3e5dc:	2c 91       	ld	r18, X
						highByte 	=	*p++;
   3e5de:	11 96       	adiw	r26, 0x01	; 1
   3e5e0:	3c 91       	ld	r19, X
   3e5e2:	11 97       	sbiw	r26, 0x01	; 1
}



//*****************************************************************************
int main(void)
   3e5e4:	12 96       	adiw	r26, 0x02	; 2
					/* Write FLASH */
					do {
						lowByte		=	*p++;
						highByte 	=	*p++;

						data		=	(highByte << 8) | lowByte;
   3e5e6:	cf 5d       	subi	r28, 0xDF	; 223
   3e5e8:	de 4f       	sbci	r29, 0xFE	; 254
   3e5ea:	38 83       	st	Y, r19
   3e5ec:	c1 52       	subi	r28, 0x21	; 33
   3e5ee:	d1 40       	sbci	r29, 0x01	; 1
   3e5f0:	c0 5e       	subi	r28, 0xE0	; 224
   3e5f2:	de 4f       	sbci	r29, 0xFE	; 254
   3e5f4:	18 82       	st	Y, r1
   3e5f6:	c0 52       	subi	r28, 0x20	; 32
   3e5f8:	d1 40       	sbci	r29, 0x01	; 1
   3e5fa:	30 e0       	ldi	r19, 0x00	; 0
   3e5fc:	c0 5e       	subi	r28, 0xE0	; 224
   3e5fe:	de 4f       	sbci	r29, 0xFE	; 254
   3e600:	e8 81       	ld	r30, Y
   3e602:	f9 81       	ldd	r31, Y+1	; 0x01
   3e604:	c0 52       	subi	r28, 0x20	; 32
   3e606:	d1 40       	sbci	r29, 0x01	; 1
   3e608:	2e 2b       	or	r18, r30
   3e60a:	3f 2b       	or	r19, r31
						boot_page_fill(address,data);
   3e60c:	dd 24       	eor	r13, r13
   3e60e:	d3 94       	inc	r13
   3e610:	09 01       	movw	r0, r18
   3e612:	fa 01       	movw	r30, r20
   3e614:	60 93 5b 00 	sts	0x005B, r22
   3e618:	d0 92 57 00 	sts	0x0057, r13
   3e61c:	e8 95       	spm
   3e61e:	11 24       	eor	r1, r1

						address	=	address + 2;	// Select next word in memory
   3e620:	4e 5f       	subi	r20, 0xFE	; 254
   3e622:	5f 4f       	sbci	r21, 0xFF	; 255
   3e624:	6f 4f       	sbci	r22, 0xFF	; 255
   3e626:	7f 4f       	sbci	r23, 0xFF	; 255
						size	-=	2;				// Reduce number of bytes to write by two
   3e628:	02 97       	sbiw	r24, 0x02	; 2
					} while (size);					// Loop until all bytes written
   3e62a:	c1 f6       	brne	.-80     	; 0x3e5dc <main+0x47c>

					boot_page_write(tempaddress);
   3e62c:	25 e0       	ldi	r18, 0x05	; 5
   3e62e:	f7 01       	movw	r30, r14
   3e630:	00 93 5b 00 	sts	0x005B, r16
   3e634:	20 93 57 00 	sts	0x0057, r18
   3e638:	e8 95       	spm
					boot_spm_busy_wait();
   3e63a:	07 b6       	in	r0, 0x37	; 55
   3e63c:	00 fc       	sbrc	r0, 0
   3e63e:	fd cf       	rjmp	.-6      	; 0x3e63a <main+0x4da>
					boot_rww_enable();				// Re-enable the RWW section
   3e640:	31 e1       	ldi	r19, 0x11	; 17
   3e642:	30 93 57 00 	sts	0x0057, r19
   3e646:	e8 95       	spm
						highByte 	=	*p++;

						data		=	(highByte << 8) | lowByte;
						boot_page_fill(address,data);

						address	=	address + 2;	// Select next word in memory
   3e648:	7a 01       	movw	r14, r20
   3e64a:	8b 01       	movw	r16, r22
   3e64c:	22 c0       	rjmp	.+68     	; 0x3e692 <main+0x532>
}



//*****************************************************************************
int main(void)
   3e64e:	01 97       	sbiw	r24, 0x01	; 1
   3e650:	a0 e0       	ldi	r26, 0x00	; 0
   3e652:	b0 e0       	ldi	r27, 0x00	; 0
   3e654:	01 96       	adiw	r24, 0x01	; 1
   3e656:	a1 1d       	adc	r26, r1
   3e658:	b1 1d       	adc	r27, r1
   3e65a:	8e 0d       	add	r24, r14
   3e65c:	9f 1d       	adc	r25, r15
   3e65e:	a0 1f       	adc	r26, r16
   3e660:	b1 1f       	adc	r27, r17

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2]; // 80
				unsigned char	*p	=	msgBuffer+10;
   3e662:	fe 01       	movw	r30, r28
   3e664:	3b 96       	adiw	r30, 0x0b	; 11
				}
				else
				{
					/* write EEPROM */
					do {
						EEARL	=	address;			// Setup EEPROM address
   3e666:	e1 bc       	out	0x21, r14	; 33
						EEARH	=	(address >> 8);
   3e668:	55 27       	eor	r21, r21
   3e66a:	41 2f       	mov	r20, r17
   3e66c:	30 2f       	mov	r19, r16
   3e66e:	2f 2d       	mov	r18, r15
   3e670:	22 bd       	out	0x22, r18	; 34
						address++;						// Select next EEPROM byte
   3e672:	08 94       	sec
   3e674:	e1 1c       	adc	r14, r1
   3e676:	f1 1c       	adc	r15, r1
   3e678:	01 1d       	adc	r16, r1
   3e67a:	11 1d       	adc	r17, r1

						EEDR	=	*p++;				// get byte from buffer
   3e67c:	21 91       	ld	r18, Z+
   3e67e:	20 bd       	out	0x20, r18	; 32
						EECR	|=	(1<<EEMWE);			// Write data into EEPROM
   3e680:	fa 9a       	sbi	0x1f, 2	; 31
						EECR	|=	(1<<EEWE);
   3e682:	f9 9a       	sbi	0x1f, 1	; 31

						while (EECR & (1<<EEWE));	// Wait for write operation to finish
   3e684:	f9 99       	sbic	0x1f, 1	; 31
   3e686:	fe cf       	rjmp	.-4      	; 0x3e684 <main+0x524>
						size--;						// Decrease number of bytes to write
					} while (size);					// Loop until all bytes written
   3e688:	e8 16       	cp	r14, r24
   3e68a:	f9 06       	cpc	r15, r25
   3e68c:	0a 07       	cpc	r16, r26
   3e68e:	1b 07       	cpc	r17, r27
   3e690:	51 f7       	brne	.-44     	; 0x3e666 <main+0x506>
				}
				msgLength	=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3e692:	1a 82       	std	Y+2, r1	; 0x02
   3e694:	5c c0       	rjmp	.+184    	; 0x3e74e <main+0x5ee>
			break;

			case CMD_READ_FLASH_ISP:
			case CMD_READ_EEPROM_ISP:
			{
				unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
   3e696:	5a 81       	ldd	r21, Y+2	; 0x02
   3e698:	cd 5d       	subi	r28, 0xDD	; 221
   3e69a:	de 4f       	sbci	r29, 0xFE	; 254
   3e69c:	58 83       	st	Y, r21
   3e69e:	c3 52       	subi	r28, 0x23	; 35
   3e6a0:	d1 40       	sbci	r29, 0x01	; 1
   3e6a2:	ce 5d       	subi	r28, 0xDE	; 222
   3e6a4:	de 4f       	sbci	r29, 0xFE	; 254
   3e6a6:	18 82       	st	Y, r1
   3e6a8:	c2 52       	subi	r28, 0x22	; 34
   3e6aa:	d1 40       	sbci	r29, 0x01	; 1
   3e6ac:	2b 81       	ldd	r18, Y+3	; 0x03
   3e6ae:	30 e0       	ldi	r19, 0x00	; 0
   3e6b0:	ce 5d       	subi	r28, 0xDE	; 222
   3e6b2:	de 4f       	sbci	r29, 0xFE	; 254
   3e6b4:	88 81       	ld	r24, Y
   3e6b6:	99 81       	ldd	r25, Y+1	; 0x01
   3e6b8:	c2 52       	subi	r28, 0x22	; 34
   3e6ba:	d1 40       	sbci	r29, 0x01	; 1
   3e6bc:	28 2b       	or	r18, r24
   3e6be:	39 2b       	or	r19, r25
				unsigned char	*p		=	msgBuffer+1;
				msgLength				=	size+3;
   3e6c0:	73 e0       	ldi	r23, 0x03	; 3
   3e6c2:	c7 2e       	mov	r12, r23
   3e6c4:	d1 2c       	mov	r13, r1
   3e6c6:	c2 0e       	add	r12, r18
   3e6c8:	d3 1e       	adc	r13, r19

				*p++	=	STATUS_CMD_OK;
   3e6ca:	1a 82       	std	Y+2, r1	; 0x02
				if (msgBuffer[0] == CMD_READ_FLASH_ISP )
   3e6cc:	44 31       	cpi	r20, 0x14	; 20
   3e6ce:	c1 f4       	brne	.+48     	; 0x3e700 <main+0x5a0>
			{
				unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char	*p		=	msgBuffer+1;
				msgLength				=	size+3;

				*p++	=	STATUS_CMD_OK;
   3e6d0:	de 01       	movw	r26, r28
   3e6d2:	13 96       	adiw	r26, 0x03	; 3
   3e6d4:	ad 01       	movw	r20, r26
   3e6d6:	d8 01       	movw	r26, r16
   3e6d8:	c7 01       	movw	r24, r14
					unsigned int data;

					// Read FLASH
					do {
#if defined(RAMPZ)
						data	=	pgm_read_word_far(address);
   3e6da:	ab bf       	out	0x3b, r26	; 59
   3e6dc:	fc 01       	movw	r30, r24
   3e6de:	67 91       	elpm	r22, Z+
   3e6e0:	76 91       	elpm	r23, Z+
#else
						data	=	pgm_read_word_near(address);
#endif
						*p++	=	(unsigned char)data;		//LSB
   3e6e2:	fa 01       	movw	r30, r20
   3e6e4:	60 83       	st	Z, r22
						*p++	=	(unsigned char)(data >> 8);	//MSB
   3e6e6:	71 83       	std	Z+1, r23	; 0x01
}



//*****************************************************************************
int main(void)
   3e6e8:	4e 5f       	subi	r20, 0xFE	; 254
   3e6ea:	5f 4f       	sbci	r21, 0xFF	; 255
#else
						data	=	pgm_read_word_near(address);
#endif
						*p++	=	(unsigned char)data;		//LSB
						*p++	=	(unsigned char)(data >> 8);	//MSB
						address	+=	2;							// Select next word in memory
   3e6ec:	02 96       	adiw	r24, 0x02	; 2
   3e6ee:	a1 1d       	adc	r26, r1
   3e6f0:	b1 1d       	adc	r27, r1
						size	-=	2;
   3e6f2:	22 50       	subi	r18, 0x02	; 2
   3e6f4:	30 40       	sbci	r19, 0x00	; 0
					}while (size);
   3e6f6:	89 f7       	brne	.-30     	; 0x3e6da <main+0x57a>
   3e6f8:	7c 01       	movw	r14, r24
   3e6fa:	8d 01       	movw	r16, r26
   3e6fc:	da 01       	movw	r26, r20
   3e6fe:	22 c0       	rjmp	.+68     	; 0x3e744 <main+0x5e4>
			{
				unsigned int	size	=	((msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char	*p		=	msgBuffer+1;
				msgLength				=	size+3;

				*p++	=	STATUS_CMD_OK;
   3e700:	fe 01       	movw	r30, r28
   3e702:	33 96       	adiw	r30, 0x03	; 3
}



//*****************************************************************************
int main(void)
   3e704:	21 50       	subi	r18, 0x01	; 1
   3e706:	30 40       	sbci	r19, 0x00	; 0
   3e708:	40 e0       	ldi	r20, 0x00	; 0
   3e70a:	50 e0       	ldi	r21, 0x00	; 0
   3e70c:	2f 5f       	subi	r18, 0xFF	; 255
   3e70e:	3f 4f       	sbci	r19, 0xFF	; 255
   3e710:	4f 4f       	sbci	r20, 0xFF	; 255
   3e712:	5f 4f       	sbci	r21, 0xFF	; 255
   3e714:	2e 0d       	add	r18, r14
   3e716:	3f 1d       	adc	r19, r15
   3e718:	40 1f       	adc	r20, r16
   3e71a:	51 1f       	adc	r21, r17
				}
				else
				{
					/* Read EEPROM */
					do {
						EEARL	=	address;			// Setup EEPROM address
   3e71c:	e1 bc       	out	0x21, r14	; 33
						EEARH	=	((address >> 8));
   3e71e:	bb 27       	eor	r27, r27
   3e720:	a1 2f       	mov	r26, r17
   3e722:	90 2f       	mov	r25, r16
   3e724:	8f 2d       	mov	r24, r15
   3e726:	82 bd       	out	0x22, r24	; 34
						address++;					// Select next EEPROM byte
   3e728:	08 94       	sec
   3e72a:	e1 1c       	adc	r14, r1
   3e72c:	f1 1c       	adc	r15, r1
   3e72e:	01 1d       	adc	r16, r1
   3e730:	11 1d       	adc	r17, r1
						EECR	|=	(1<<EERE);			// Read EEPROM
   3e732:	f8 9a       	sbi	0x1f, 0	; 31
						*p++	=	EEDR;				// Send EEPROM data
   3e734:	80 b5       	in	r24, 0x20	; 32
   3e736:	81 93       	st	Z+, r24
   3e738:	df 01       	movw	r26, r30
						size--;
					} while (size);
   3e73a:	e2 16       	cp	r14, r18
   3e73c:	f3 06       	cpc	r15, r19
   3e73e:	04 07       	cpc	r16, r20
   3e740:	15 07       	cpc	r17, r21
   3e742:	61 f7       	brne	.-40     	; 0x3e71c <main+0x5bc>
				}
				*p++	=	STATUS_CMD_OK;
   3e744:	1c 92       	st	X, r1
			}
			break;
   3e746:	90 e0       	ldi	r25, 0x00	; 0
   3e748:	06 c0       	rjmp	.+12     	; 0x3e756 <main+0x5f6>

			default:
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_FAILED;
   3e74a:	f0 ec       	ldi	r31, 0xC0	; 192
   3e74c:	fa 83       	std	Y+2, r31	; 0x02
				break;
   3e74e:	90 e0       	ldi	r25, 0x00	; 0
				*p++	=	STATUS_CMD_OK;
			}
			break;

			default:
				msgLength		=	2;
   3e750:	22 e0       	ldi	r18, 0x02	; 2
   3e752:	c2 2e       	mov	r12, r18
   3e754:	d1 2c       	mov	r13, r1
			}

			/*
			 * Now send answer message back
			 */
			sendchar(MESSAGE_START);
   3e756:	8b e1       	ldi	r24, 0x1B	; 27
   3e758:	c9 5d       	subi	r28, 0xD9	; 217
   3e75a:	de 4f       	sbci	r29, 0xFE	; 254
   3e75c:	98 83       	st	Y, r25
   3e75e:	c7 52       	subi	r28, 0x27	; 39
   3e760:	d1 40       	sbci	r29, 0x01	; 1
   3e762:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
			checksum	=	MESSAGE_START^0;

			sendchar(seqNum);
   3e766:	89 2d       	mov	r24, r9
   3e768:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
   3e76c:	8d 2d       	mov	r24, r13
   3e76e:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
			checksum	^=	c;

			c			=	msgLength&0x00FF;
			sendchar(c);
   3e772:	8c 2d       	mov	r24, r12
   3e774:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
			checksum ^= c;

			sendchar(TOKEN);
   3e778:	8e e0       	ldi	r24, 0x0E	; 14
   3e77a:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
			sendchar(seqNum);
			checksum	^=	seqNum;

			c			=	((msgLength>>8)&0xFF);
			sendchar(c);
			checksum	^=	c;
   3e77e:	95 e1       	ldi	r25, 0x15	; 21
   3e780:	89 2e       	mov	r8, r25
   3e782:	89 24       	eor	r8, r9

			c			=	msgLength&0x00FF;
			sendchar(c);
			checksum ^= c;
   3e784:	8c 24       	eor	r8, r12

			sendchar(TOKEN);
			checksum ^= TOKEN;
   3e786:	8d 24       	eor	r8, r13

			p	=	msgBuffer;
   3e788:	5e 01       	movw	r10, r28
   3e78a:	08 94       	sec
   3e78c:	a1 1c       	adc	r10, r1
   3e78e:	b1 1c       	adc	r11, r1
   3e790:	19 c0       	rjmp	.+50     	; 0x3e7c4 <main+0x664>
			while ( msgLength )
			{
				c	=	*p++;
   3e792:	f5 01       	movw	r30, r10
   3e794:	21 91       	ld	r18, Z+
   3e796:	5f 01       	movw	r10, r30
				sendchar(c);
   3e798:	82 2f       	mov	r24, r18
   3e79a:	ca 5d       	subi	r28, 0xDA	; 218
   3e79c:	de 4f       	sbci	r29, 0xFE	; 254
   3e79e:	28 83       	st	Y, r18
   3e7a0:	c6 52       	subi	r28, 0x26	; 38
   3e7a2:	d1 40       	sbci	r29, 0x01	; 1
   3e7a4:	c9 5d       	subi	r28, 0xD9	; 217
   3e7a6:	de 4f       	sbci	r29, 0xFE	; 254
   3e7a8:	98 83       	st	Y, r25
   3e7aa:	c7 52       	subi	r28, 0x27	; 39
   3e7ac:	d1 40       	sbci	r29, 0x01	; 1
   3e7ae:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
				checksum ^=c;
   3e7b2:	ca 5d       	subi	r28, 0xDA	; 218
   3e7b4:	de 4f       	sbci	r29, 0xFE	; 254
   3e7b6:	28 81       	ld	r18, Y
   3e7b8:	c6 52       	subi	r28, 0x26	; 38
   3e7ba:	d1 40       	sbci	r29, 0x01	; 1
   3e7bc:	82 26       	eor	r8, r18
				msgLength--;
   3e7be:	08 94       	sec
   3e7c0:	c1 08       	sbc	r12, r1
   3e7c2:	d1 08       	sbc	r13, r1
   3e7c4:	c9 5d       	subi	r28, 0xD9	; 217
   3e7c6:	de 4f       	sbci	r29, 0xFE	; 254
   3e7c8:	98 81       	ld	r25, Y
   3e7ca:	c7 52       	subi	r28, 0x27	; 39
   3e7cc:	d1 40       	sbci	r29, 0x01	; 1

			sendchar(TOKEN);
			checksum ^= TOKEN;

			p	=	msgBuffer;
			while ( msgLength )
   3e7ce:	c1 14       	cp	r12, r1
   3e7d0:	d1 04       	cpc	r13, r1
   3e7d2:	f9 f6       	brne	.-66     	; 0x3e792 <main+0x632>
				c	=	*p++;
				sendchar(c);
				checksum ^=c;
				msgLength--;
			}
			sendchar(checksum);
   3e7d4:	88 2d       	mov	r24, r8
   3e7d6:	c9 5d       	subi	r28, 0xD9	; 217
   3e7d8:	de 4f       	sbci	r29, 0xFE	; 254
   3e7da:	98 83       	st	Y, r25
   3e7dc:	c7 52       	subi	r28, 0x27	; 39
   3e7de:	d1 40       	sbci	r29, 0x01	; 1
   3e7e0:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>


	if (boot_state==1)
	{
		//*	main loop
		while (!isLeave)
   3e7e4:	c9 5d       	subi	r28, 0xD9	; 217
   3e7e6:	de 4f       	sbci	r29, 0xFE	; 254
   3e7e8:	98 81       	ld	r25, Y
   3e7ea:	c7 52       	subi	r28, 0x27	; 39
   3e7ec:	d1 40       	sbci	r29, 0x01	; 1
   3e7ee:	99 23       	and	r25, r25
   3e7f0:	39 f4       	brne	.+14     	; 0x3e800 <main+0x6a0>
				sendchar(c);
				checksum ^=c;
				msgLength--;
			}
			sendchar(checksum);
			seqNum++;
   3e7f2:	93 94       	inc	r9
   3e7f4:	20 e0       	ldi	r18, 0x00	; 0
   3e7f6:	30 e0       	ldi	r19, 0x00	; 0
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}


	if (boot_state==1)
   3e7f8:	60 e0       	ldi	r22, 0x00	; 0
   3e7fa:	70 e0       	ldi	r23, 0x00	; 0
   3e7fc:	80 e0       	ldi	r24, 0x00	; 0
   3e7fe:	54 cd       	rjmp	.-1368   	; 0x3e2a8 <main+0x148>
	}



#ifdef _DEBUG_SERIAL_
	sendchar('j');
   3e800:	8a e6       	ldi	r24, 0x6A	; 106
   3e802:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
	//	sendchar('p');
	//	sendchar(' ');
	//	sendchar('u');
	//	sendchar('s');
	//	sendchar('r');
	sendchar(0x0d);
   3e806:	8d e0       	ldi	r24, 0x0D	; 13
   3e808:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>
	sendchar(0x0a);
   3e80c:	8a e0       	ldi	r24, 0x0A	; 10
   3e80e:	0f 94 95 f0 	call	0x3e12a	; 0x3e12a <sendchar>

	delay_ms(100);
   3e812:	84 e6       	ldi	r24, 0x64	; 100
   3e814:	90 e0       	ldi	r25, 0x00	; 0
   3e816:	0f 94 a1 f0 	call	0x3e142	; 0x3e142 <delay_ms>
#endif



	asm volatile ("nop");			// wait until port has changed
   3e81a:	00 00       	nop

	/*
	 * Now leave bootloader
	 */

	UART_STATUS_REG	&=	0xfd;
   3e81c:	80 91 c0 00 	lds	r24, 0x00C0
   3e820:	8d 7f       	andi	r24, 0xFD	; 253
   3e822:	80 93 c0 00 	sts	0x00C0, r24
	boot_rww_enable();				// enable application section
   3e826:	81 e1       	ldi	r24, 0x11	; 17
   3e828:	80 93 57 00 	sts	0x0057, r24
   3e82c:	e8 95       	spm


	asm volatile(
   3e82e:	ee 27       	eor	r30, r30
   3e830:	ff 27       	eor	r31, r31
   3e832:	09 94       	ijmp
   3e834:	ff cf       	rjmp	.-2      	; 0x3e834 <main+0x6d4>
				switch (msgParseState){
				case ST_START:
					if ( c == MESSAGE_START )
					{
						msgParseState	=	ST_GET_SEQ_NUM;
						checksum		=	MESSAGE_START^0;
   3e836:	8b e1       	ldi	r24, 0x1B	; 27
   3e838:	88 2e       	mov	r8, r24

				switch (msgParseState){
				case ST_START:
					if ( c == MESSAGE_START )
					{
						msgParseState	=	ST_GET_SEQ_NUM;
   3e83a:	81 e0       	ldi	r24, 0x01	; 1
   3e83c:	33 cd       	rjmp	.-1434   	; 0x3e2a4 <main+0x144>
						checksum		^=	c;
						ii				=	0;
					}
					else
					{
						msgParseState	=	ST_START;
   3e83e:	80 e0       	ldi	r24, 0x00	; 0
   3e840:	31 cd       	rjmp	.-1438   	; 0x3e2a4 <main+0x144>
				case ST_GET_DATA:
					msgBuffer[ii++]	=	c;
					checksum		^=	c;
					if (ii == msgLength )
					{
						msgParseState	=	ST_GET_CHECK;
   3e842:	86 e0       	ldi	r24, 0x06	; 6
   3e844:	2f cd       	rjmp	.-1442   	; 0x3e2a4 <main+0x144>

0003e846 <_exit>:
   3e846:	f8 94       	cli

0003e848 <__stop_program>:
   3e848:	ff cf       	rjmp	.-2      	; 0x3e848 <__stop_program>
