
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00007d36  000005aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000536  00007800  00007800  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000028  00000000  00000000  000005be  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000002a  00000000  00000000  000005e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004ee  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e5  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007db  00000000  00000000  00000ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000209  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000941  00000000  00000000  00001709  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000046  00000000  00000000  0000204a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007800 <__jumpMain>:
 * to reduce the code size, we need to provide our own initialization
 */
void __jumpMain     (void) __attribute__ ((naked)) __attribute__ ((section (".init9")));

void __jumpMain(void)
{    
    7800:	8f ef       	ldi	r24, 0xFF	; 255
	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

	/* init stack here, bug WinAVR 20071221 does not init stack based on __stack */  
	asm volatile ("ldi r24,%0":: "M" (RAMEND & 0xFF));          
	asm volatile ("ldi r25,%0":: "M" (RAMEND >> 8));
    7802:	98 e0       	ldi	r25, 0x08	; 8
	asm volatile ("out __SP_H__,r25" ::);
    7804:	9e bf       	out	0x3e, r25	; 62
	asm volatile ("out __SP_L__,r24" ::);
    7806:	8d bf       	out	0x3d, r24	; 61

	asm volatile ( "clr __zero_reg__" );                       // GCC depends on register r1 set to 0
    7808:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );  // set SREG to 0
    780a:	1f be       	out	0x3f, r1	; 63
#ifndef REMOVE_PROG_PIN_PULLUP	 
	PROG_PORT |= (1<<PROG_PIN);		                           // Enable internal pullup
#endif    
	asm volatile ( "rjmp main");                               // jump to main()
    780c:	0c c0       	rjmp	.+24     	; 0x7826 <main>

0000780e <sendchar>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG = c;                                         // prepare transmission
    780e:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));// wait until byte sent
    7812:	80 91 c0 00 	lds	r24, 0x00C0
    7816:	86 ff       	sbrs	r24, 6
    7818:	fc cf       	rjmp	.-8      	; 0x7812 <sendchar+0x4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);          // delete TXCflag
    781a:	80 91 c0 00 	lds	r24, 0x00C0
    781e:	80 64       	ori	r24, 0x40	; 64
    7820:	80 93 c0 00 	sts	0x00C0, r24
}
    7824:	08 95       	ret

00007826 <main>:
}


int main(void) __attribute__ ((OS_main));
int main(void)
{
    7826:	cd b7       	in	r28, 0x3d	; 61
    7828:	de b7       	in	r29, 0x3e	; 62
    782a:	c8 52       	subi	r28, 0x28	; 40
    782c:	d1 40       	sbci	r29, 0x01	; 1
    782e:	de bf       	out	0x3e, r29	; 62
    7830:	cd bf       	out	0x3d, r28	; 61
		 * set baudrate and enable USART receiver and transmiter without interrupts
		 */
	#if UART_BAUDRATE_DOUBLE_SPEED
		UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
	#endif
		UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
    7832:	87 e6       	ldi	r24, 0x67	; 103
    7834:	80 93 c4 00 	sts	0x00C4, r24
		UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
    7838:	88 e1       	ldi	r24, 0x18	; 24
    783a:	80 93 c1 00 	sts	0x00C1, r24


	msgLength		=	11;
	msgBuffer[0] 	=	CMD_SIGN_ON;
    783e:	81 e0       	ldi	r24, 0x01	; 1
    7840:	89 83       	std	Y+1, r24	; 0x01
	msgBuffer[1] 	=	STATUS_CMD_OK;
    7842:	1a 82       	std	Y+2, r1	; 0x02
	msgBuffer[2] 	=	8;
    7844:	88 e0       	ldi	r24, 0x08	; 8
    7846:	8b 83       	std	Y+3, r24	; 0x03
	msgBuffer[3] 	=	'A';
    7848:	81 e4       	ldi	r24, 0x41	; 65
    784a:	8c 83       	std	Y+4, r24	; 0x04
	msgBuffer[4] 	=	'V';
    784c:	86 e5       	ldi	r24, 0x56	; 86
    784e:	8d 83       	std	Y+5, r24	; 0x05
	msgBuffer[5] 	=	'R';
    7850:	82 e5       	ldi	r24, 0x52	; 82
    7852:	8e 83       	std	Y+6, r24	; 0x06
	msgBuffer[6] 	=	'I';
    7854:	89 e4       	ldi	r24, 0x49	; 73
    7856:	8f 83       	std	Y+7, r24	; 0x07
	msgBuffer[7] 	=	'S';
    7858:	83 e5       	ldi	r24, 0x53	; 83
    785a:	88 87       	std	Y+8, r24	; 0x08
	msgBuffer[8] 	=	'P';
    785c:	80 e5       	ldi	r24, 0x50	; 80
    785e:	89 87       	std	Y+9, r24	; 0x09
	msgBuffer[9] 	=	'_';
    7860:	8f e5       	ldi	r24, 0x5F	; 95
    7862:	8a 87       	std	Y+10, r24	; 0x0a
	msgBuffer[10]	=	'2';
    7864:	82 e3       	ldi	r24, 0x32	; 50
    7866:	8b 87       	std	Y+11, r24	; 0x0b
	sendchar(MESSAGE_START);
    7868:	8b e1       	ldi	r24, 0x1B	; 27
    786a:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum	=	MESSAGE_START^0;

	sendchar(seqNum);
    786e:	81 e0       	ldi	r24, 0x01	; 1
    7870:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum	^=	seqNum;

	c			=	((msgLength>>8)&0xFF);
	sendchar(c);
    7874:	80 e0       	ldi	r24, 0x00	; 0
    7876:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum	^=	c;

	c			=	msgLength&0x00FF;
	sendchar(c);
    787a:	8b e0       	ldi	r24, 0x0B	; 11
    787c:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum ^= c;

	sendchar(TOKEN);
    7880:	8e e0       	ldi	r24, 0x0E	; 14
    7882:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    7886:	7c e0       	ldi	r23, 0x0C	; 12
    7888:	e7 2e       	mov	r14, r23
    788a:	f1 2c       	mov	r15, r1
    788c:	ec 0e       	add	r14, r28
    788e:	fd 1e       	adc	r15, r29
	checksum ^= c;

	sendchar(TOKEN);
	checksum ^= TOKEN;

	p	=	msgBuffer;
    7890:	8e 01       	movw	r16, r28
    7892:	0f 5f       	subi	r16, 0xFF	; 255
    7894:	1f 4f       	sbci	r17, 0xFF	; 255
	c			=	msgLength&0x00FF;
	sendchar(c);
	checksum ^= c;

	sendchar(TOKEN);
	checksum ^= TOKEN;
    7896:	6f e1       	ldi	r22, 0x1F	; 31
    7898:	86 2e       	mov	r8, r22

	p	=	msgBuffer;
	while ( msgLength )
	{
		c	=	*p++;
    789a:	f8 01       	movw	r30, r16
    789c:	c1 90       	ld	r12, Z+
    789e:	8f 01       	movw	r16, r30
		sendchar(c);
    78a0:	8c 2d       	mov	r24, r12
    78a2:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
		checksum ^=c;
    78a6:	8c 24       	eor	r8, r12

	sendchar(TOKEN);
	checksum ^= TOKEN;

	p	=	msgBuffer;
	while ( msgLength )
    78a8:	0e 15       	cp	r16, r14
    78aa:	1f 05       	cpc	r17, r15
    78ac:	b1 f7       	brne	.-20     	; 0x789a <main+0x74>
		c	=	*p++;
		sendchar(c);
		checksum ^=c;
		msgLength--;
	}
	sendchar(checksum);
    78ae:	88 2d       	mov	r24, r8
    78b0:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
    78b4:	04 c0       	rjmp	.+8      	; 0x78be <main+0x98>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    78b6:	f5 e0       	ldi	r31, 0x05	; 5
    78b8:	fa 95       	dec	r31
    78ba:	f1 f7       	brne	.-4      	; 0x78b8 <main+0x92>
    78bc:	00 00       	nop
//}

//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
    78be:	80 91 c0 00 	lds	r24, 0x00C0
	}
	sendchar(checksum);
	seqNum++;
	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
    78c2:	87 ff       	sbrs	r24, 7
    78c4:	f8 cf       	rjmp	.-16     	; 0x78b6 <main+0x90>
    78c6:	21 e0       	ldi	r18, 0x01	; 1
    78c8:	30 e0       	ldi	r19, 0x00	; 0
    78ca:	52 e0       	ldi	r21, 0x02	; 2
    78cc:	95 2e       	mov	r9, r21
    78ce:	cc 24       	eor	r12, r12
    78d0:	dd 24       	eor	r13, r13
    78d2:	66 24       	eor	r6, r6
    78d4:	77 24       	eor	r7, r7
    78d6:	ee 24       	eor	r14, r14
    78d8:	ff 24       	eor	r15, r15
		{
			unsigned int	data;
#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
    78da:	f6 01       	movw	r30, r12
    78dc:	85 91       	lpm	r24, Z+
    78de:	94 91       	lpm	r25, Z+
    78e0:	ca 5d       	subi	r28, 0xDA	; 218
    78e2:	de 4f       	sbci	r29, 0xFE	; 254
    78e4:	99 83       	std	Y+1, r25	; 0x01
    78e6:	88 83       	st	Y, r24
    78e8:	c6 52       	subi	r28, 0x26	; 38
    78ea:	d1 40       	sbci	r29, 0x01	; 1
						msgParseState	=	ST_START;
					}
					break;

				case ST_GET_DATA:
					msgBuffer[ii++]	=	c;
    78ec:	2e 01       	movw	r4, r28
    78ee:	08 94       	sec
    78f0:	41 1c       	adc	r4, r1
    78f2:	51 1c       	adc	r5, r1

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char *p = msgBuffer+10;
    78f4:	4b e0       	ldi	r20, 0x0B	; 11
    78f6:	24 2e       	mov	r2, r20
    78f8:	31 2c       	mov	r3, r1
    78fa:	2c 0e       	add	r2, r28
    78fc:	3d 1e       	adc	r3, r29
    78fe:	0f c2       	rjmp	.+1054   	; 0x7d1e <main+0x4f8>
	}
	sendchar(checksum);
	seqNum++;
	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
    7900:	20 e0       	ldi	r18, 0x00	; 0
    7902:	30 e0       	ldi	r19, 0x00	; 0
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
			{
				if (boot_state==1)
    7904:	21 30       	cpi	r18, 0x01	; 1
    7906:	31 05       	cpc	r19, r1
    7908:	d1 f4       	brne	.+52     	; 0x793e <main+0x118>
    790a:	20 c0       	rjmp	.+64     	; 0x794c <main+0x126>
	uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
	{
		// wait for data
		count++;
    790c:	2f 5f       	subi	r18, 0xFF	; 255
    790e:	3f 4f       	sbci	r19, 0xFF	; 255
    7910:	4f 4f       	sbci	r20, 0xFF	; 255
    7912:	5f 4f       	sbci	r21, 0xFF	; 255
		if (count > MAX_TIME_COUNT)
    7914:	21 30       	cpi	r18, 0x01	; 1
    7916:	92 e1       	ldi	r25, 0x12	; 18
    7918:	39 07       	cpc	r19, r25
    791a:	9a e7       	ldi	r25, 0x7A	; 122
    791c:	49 07       	cpc	r20, r25
    791e:	90 e0       	ldi	r25, 0x00	; 0
    7920:	59 07       	cpc	r21, r25
    7922:	80 f0       	brcs	.+32     	; 0x7944 <main+0x11e>
#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
    7924:	ca 5d       	subi	r28, 0xDA	; 218
    7926:	de 4f       	sbci	r29, 0xFE	; 254
    7928:	e8 81       	ld	r30, Y
    792a:	f9 81       	ldd	r31, Y+1	; 0x01
    792c:	c6 52       	subi	r28, 0x26	; 38
    792e:	d1 40       	sbci	r29, 0x01	; 1
    7930:	1f ef       	ldi	r17, 0xFF	; 255
    7932:	ef 3f       	cpi	r30, 0xFF	; 255
    7934:	f1 07       	cpc	r31, r17
    7936:	19 f0       	breq	.+6      	; 0x793e <main+0x118>
			{
				asm volatile(
    7938:	ee 27       	eor	r30, r30
    793a:	ff 27       	eor	r31, r31
    793c:	09 94       	ijmp
#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
    793e:	20 e0       	ldi	r18, 0x00	; 0
    7940:	30 e0       	ldi	r19, 0x00	; 0
    7942:	a9 01       	movw	r20, r18
#define	 MAX_TIME_COUNT	(F_CPU >> 1)
static unsigned char recchar_timeout(void)
{
	uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
    7944:	90 91 c0 00 	lds	r25, 0x00C0
    7948:	97 ff       	sbrs	r25, 7
    794a:	e0 cf       	rjmp	.-64     	; 0x790c <main+0xe6>
				);
			}
			count	=	0;
		}
	}
	return UART_DATA_REG;
    794c:	20 91 c6 00 	lds	r18, 0x00C6
//										sendchar('c');
//										sendchar(':');
//										sendchar(c);


				switch (msgParseState){
    7950:	83 30       	cpi	r24, 0x03	; 3
    7952:	f9 f0       	breq	.+62     	; 0x7992 <main+0x16c>
    7954:	84 30       	cpi	r24, 0x04	; 4
    7956:	28 f4       	brcc	.+10     	; 0x7962 <main+0x13c>
    7958:	81 30       	cpi	r24, 0x01	; 1
    795a:	69 f0       	breq	.+26     	; 0x7976 <main+0x150>
    795c:	82 30       	cpi	r24, 0x02	; 2
    795e:	a0 f4       	brcc	.+40     	; 0x7988 <main+0x162>
    7960:	07 c0       	rjmp	.+14     	; 0x7970 <main+0x14a>
    7962:	85 30       	cpi	r24, 0x05	; 5
    7964:	29 f1       	breq	.+74     	; 0x79b0 <main+0x18a>
    7966:	85 30       	cpi	r24, 0x05	; 5
    7968:	d8 f0       	brcs	.+54     	; 0x79a0 <main+0x17a>
    796a:	86 30       	cpi	r24, 0x06	; 6
    796c:	91 f5       	brne	.+100    	; 0x79d2 <main+0x1ac>
    796e:	2d c0       	rjmp	.+90     	; 0x79ca <main+0x1a4>
				case ST_START:
					if ( c == MESSAGE_START )
    7970:	2b 31       	cpi	r18, 0x1B	; 27
    7972:	31 f6       	brne	.-116    	; 0x7900 <main+0xda>
    7974:	d8 c1       	rjmp	.+944    	; 0x7d26 <main+0x500>
						checksum		=	MESSAGE_START^0;
					}
					break;

				case ST_GET_SEQ_NUM:
					if ( (c == 1) || (c == seqNum) )
    7976:	21 30       	cpi	r18, 0x01	; 1
    7978:	19 f0       	breq	.+6      	; 0x7980 <main+0x15a>
    797a:	29 15       	cp	r18, r9
    797c:	09 f0       	breq	.+2      	; 0x7980 <main+0x15a>
    797e:	d7 c1       	rjmp	.+942    	; 0x7d2e <main+0x508>
					{
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
						checksum		^=	c;
    7980:	82 26       	eor	r8, r18
    7982:	92 2e       	mov	r9, r18

				case ST_GET_SEQ_NUM:
					if ( (c == 1) || (c == seqNum) )
					{
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
    7984:	82 e0       	ldi	r24, 0x02	; 2
						checksum		^=	c;
    7986:	bc cf       	rjmp	.-136    	; 0x7900 <main+0xda>
						msgParseState	=	ST_START;
					}
					break;

				case ST_MSG_SIZE_1:
					msgLength		=	c<<8;
    7988:	72 2f       	mov	r23, r18
    798a:	60 e0       	ldi	r22, 0x00	; 0
					msgParseState	=	ST_MSG_SIZE_2;
					checksum		^=	c;
    798c:	82 26       	eor	r8, r18
					}
					break;

				case ST_MSG_SIZE_1:
					msgLength		=	c<<8;
					msgParseState	=	ST_MSG_SIZE_2;
    798e:	83 e0       	ldi	r24, 0x03	; 3
					checksum		^=	c;
					break;
    7990:	b7 cf       	rjmp	.-146    	; 0x7900 <main+0xda>

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
    7992:	82 2f       	mov	r24, r18
    7994:	90 e0       	ldi	r25, 0x00	; 0
    7996:	68 2b       	or	r22, r24
    7998:	79 2b       	or	r23, r25
					msgParseState	=	ST_GET_TOKEN;
					checksum		^=	c;
    799a:	82 26       	eor	r8, r18
					checksum		^=	c;
					break;

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
					msgParseState	=	ST_GET_TOKEN;
    799c:	84 e0       	ldi	r24, 0x04	; 4
					checksum		^=	c;
					break;
    799e:	b0 cf       	rjmp	.-160    	; 0x7900 <main+0xda>

				case ST_GET_TOKEN:
					if ( c == TOKEN )
    79a0:	2e 30       	cpi	r18, 0x0E	; 14
    79a2:	09 f0       	breq	.+2      	; 0x79a6 <main+0x180>
    79a4:	c4 c1       	rjmp	.+904    	; 0x7d2e <main+0x508>
					{
						msgParseState	=	ST_GET_DATA;
						checksum		^=	c;
    79a6:	82 26       	eor	r8, r18
						ii				=	0;
    79a8:	cc 24       	eor	r12, r12
    79aa:	dd 24       	eor	r13, r13
					break;

				case ST_GET_TOKEN:
					if ( c == TOKEN )
					{
						msgParseState	=	ST_GET_DATA;
    79ac:	85 e0       	ldi	r24, 0x05	; 5
    79ae:	a8 cf       	rjmp	.-176    	; 0x7900 <main+0xda>
						msgParseState	=	ST_START;
					}
					break;

				case ST_GET_DATA:
					msgBuffer[ii++]	=	c;
    79b0:	f2 01       	movw	r30, r4
    79b2:	ec 0d       	add	r30, r12
    79b4:	fd 1d       	adc	r31, r13
    79b6:	20 83       	st	Z, r18
    79b8:	08 94       	sec
    79ba:	c1 1c       	adc	r12, r1
    79bc:	d1 1c       	adc	r13, r1
					checksum		^=	c;
    79be:	82 26       	eor	r8, r18
					if (ii == msgLength )
    79c0:	c6 16       	cp	r12, r22
    79c2:	d7 06       	cpc	r13, r23
    79c4:	09 f0       	breq	.+2      	; 0x79c8 <main+0x1a2>
    79c6:	9c cf       	rjmp	.-200    	; 0x7900 <main+0xda>
    79c8:	b4 c1       	rjmp	.+872    	; 0x7d32 <main+0x50c>
						msgParseState	=	ST_GET_CHECK;
					}
					break;

				case ST_GET_CHECK:
					if ( c == checksum )
    79ca:	28 15       	cp	r18, r8
    79cc:	09 f0       	breq	.+2      	; 0x79d0 <main+0x1aa>
    79ce:	af c1       	rjmp	.+862    	; 0x7d2e <main+0x508>
    79d0:	03 c0       	rjmp	.+6      	; 0x79d8 <main+0x1b2>
		{
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
    79d2:	87 30       	cpi	r24, 0x07	; 7
    79d4:	09 f0       	breq	.+2      	; 0x79d8 <main+0x1b2>
    79d6:	94 cf       	rjmp	.-216    	; 0x7900 <main+0xda>

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0])
    79d8:	49 81       	ldd	r20, Y+1	; 0x01
    79da:	43 31       	cpi	r20, 0x13	; 19
    79dc:	09 f4       	brne	.+2      	; 0x79e0 <main+0x1ba>
    79de:	bb c0       	rjmp	.+374    	; 0x7b56 <main+0x330>
    79e0:	44 31       	cpi	r20, 0x14	; 20
    79e2:	b0 f4       	brcc	.+44     	; 0x7a10 <main+0x1ea>
    79e4:	46 30       	cpi	r20, 0x06	; 6
    79e6:	09 f4       	brne	.+2      	; 0x79ea <main+0x1c4>
    79e8:	9d c0       	rjmp	.+314    	; 0x7b24 <main+0x2fe>
    79ea:	47 30       	cpi	r20, 0x07	; 7
    79ec:	50 f4       	brcc	.+20     	; 0x7a02 <main+0x1dc>
    79ee:	42 30       	cpi	r20, 0x02	; 2
    79f0:	09 f4       	brne	.+2      	; 0x79f4 <main+0x1ce>
    79f2:	af c0       	rjmp	.+350    	; 0x7b52 <main+0x32c>
    79f4:	43 30       	cpi	r20, 0x03	; 3
    79f6:	09 f4       	brne	.+2      	; 0x79fa <main+0x1d4>
    79f8:	52 c0       	rjmp	.+164    	; 0x7a9e <main+0x278>
    79fa:	41 30       	cpi	r20, 0x01	; 1
    79fc:	09 f0       	breq	.+2      	; 0x7a00 <main+0x1da>
    79fe:	59 c1       	rjmp	.+690    	; 0x7cb2 <main+0x48c>
    7a00:	38 c0       	rjmp	.+112    	; 0x7a72 <main+0x24c>
    7a02:	40 31       	cpi	r20, 0x10	; 16
    7a04:	08 f4       	brcc	.+2      	; 0x7a08 <main+0x1e2>
    7a06:	55 c1       	rjmp	.+682    	; 0x7cb2 <main+0x48c>
    7a08:	42 31       	cpi	r20, 0x12	; 18
    7a0a:	08 f4       	brcc	.+2      	; 0x7a0e <main+0x1e8>
    7a0c:	a2 c0       	rjmp	.+324    	; 0x7b52 <main+0x32c>
    7a0e:	84 c0       	rjmp	.+264    	; 0x7b18 <main+0x2f2>
    7a10:	48 31       	cpi	r20, 0x18	; 24
    7a12:	09 f4       	brne	.+2      	; 0x7a16 <main+0x1f0>
    7a14:	6a c0       	rjmp	.+212    	; 0x7aea <main+0x2c4>
    7a16:	49 31       	cpi	r20, 0x19	; 25
    7a18:	50 f4       	brcc	.+20     	; 0x7a2e <main+0x208>
    7a1a:	45 31       	cpi	r20, 0x15	; 21
    7a1c:	09 f4       	brne	.+2      	; 0x7a20 <main+0x1fa>
    7a1e:	9b c0       	rjmp	.+310    	; 0x7b56 <main+0x330>
    7a20:	45 31       	cpi	r20, 0x15	; 21
    7a22:	08 f4       	brcc	.+2      	; 0x7a26 <main+0x200>
    7a24:	01 c1       	rjmp	.+514    	; 0x7c28 <main+0x402>
    7a26:	46 31       	cpi	r20, 0x16	; 22
    7a28:	09 f0       	breq	.+2      	; 0x7a2c <main+0x206>
    7a2a:	43 c1       	rjmp	.+646    	; 0x7cb2 <main+0x48c>
    7a2c:	fd c0       	rjmp	.+506    	; 0x7c28 <main+0x402>
    7a2e:	4b 31       	cpi	r20, 0x1B	; 27
    7a30:	09 f4       	brne	.+2      	; 0x7a34 <main+0x20e>
    7a32:	44 c0       	rjmp	.+136    	; 0x7abc <main+0x296>
    7a34:	4d 31       	cpi	r20, 0x1D	; 29
    7a36:	21 f0       	breq	.+8      	; 0x7a40 <main+0x21a>
    7a38:	4a 31       	cpi	r20, 0x1A	; 26
    7a3a:	09 f0       	breq	.+2      	; 0x7a3e <main+0x218>
    7a3c:	3a c1       	rjmp	.+628    	; 0x7cb2 <main+0x48c>
    7a3e:	49 c0       	rjmp	.+146    	; 0x7ad2 <main+0x2ac>
			case CMD_SPI_MULTI:
			{
				unsigned char answerByte = 0;

				// only Read Signature Bytes implemented, return dummy value for other instructions
				if ( msgBuffer[4]== 0x30 )
    7a40:	9d 81       	ldd	r25, Y+5	; 0x05
    7a42:	90 33       	cpi	r25, 0x30	; 48
    7a44:	39 f4       	brne	.+14     	; 0x7a54 <main+0x22e>
				{
					unsigned char signatureIndex = msgBuffer[6];
    7a46:	8f 81       	ldd	r24, Y+7	; 0x07

					if ( signatureIndex == 0 )
    7a48:	88 23       	and	r24, r24
    7a4a:	31 f0       	breq	.+12     	; 0x7a58 <main+0x232>
						answerByte = (SIGNATURE_BYTES >>16) & 0x000000FF;
					else if ( signatureIndex == 1 )
    7a4c:	81 30       	cpi	r24, 0x01	; 1
    7a4e:	31 f4       	brne	.+12     	; 0x7a5c <main+0x236>
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
    7a50:	85 e9       	ldi	r24, 0x95	; 149
    7a52:	05 c0       	rjmp	.+10     	; 0x7a5e <main+0x238>
			switch (msgBuffer[0])
			{
#ifndef REMOVE_CMD_SPI_MULTI
			case CMD_SPI_MULTI:
			{
				unsigned char answerByte = 0;
    7a54:	80 e0       	ldi	r24, 0x00	; 0
    7a56:	03 c0       	rjmp	.+6      	; 0x7a5e <main+0x238>
				if ( msgBuffer[4]== 0x30 )
				{
					unsigned char signatureIndex = msgBuffer[6];

					if ( signatureIndex == 0 )
						answerByte = (SIGNATURE_BYTES >>16) & 0x000000FF;
    7a58:	8e e1       	ldi	r24, 0x1E	; 30
    7a5a:	01 c0       	rjmp	.+2      	; 0x7a5e <main+0x238>
					else if ( signatureIndex == 1 )
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
					else
						answerByte = SIGNATURE_BYTES & 0x000000FF;
    7a5c:	8f e0       	ldi	r24, 0x0F	; 15
				}
				msgLength = 7;
				msgBuffer[1] = STATUS_CMD_OK;
    7a5e:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = 0;
    7a60:	1b 82       	std	Y+3, r1	; 0x03
				msgBuffer[3] = msgBuffer[4];  // Instruction Byte 1
    7a62:	9c 83       	std	Y+4, r25	; 0x04
				msgBuffer[4] = msgBuffer[5];  // Instruction Byte 2
    7a64:	9e 81       	ldd	r25, Y+6	; 0x06
    7a66:	9d 83       	std	Y+5, r25	; 0x05
				msgBuffer[5] = answerByte;
    7a68:	8e 83       	std	Y+6, r24	; 0x06
				msgBuffer[6] = STATUS_CMD_OK;
    7a6a:	1f 82       	std	Y+7, r1	; 0x07
					else if ( signatureIndex == 1 )
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
					else
						answerByte = SIGNATURE_BYTES & 0x000000FF;
				}
				msgLength = 7;
    7a6c:	07 e0       	ldi	r16, 0x07	; 7
    7a6e:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[3] = msgBuffer[4];  // Instruction Byte 1
				msgBuffer[4] = msgBuffer[5];  // Instruction Byte 2
				msgBuffer[5] = answerByte;
				msgBuffer[6] = STATUS_CMD_OK;
			}
			break;
    7a70:	24 c1       	rjmp	.+584    	; 0x7cba <main+0x494>
#endif

			case CMD_SIGN_ON:
				msgLength = 11;
				msgBuffer[1]  = STATUS_CMD_OK;
    7a72:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2]  = 8;
    7a74:	88 e0       	ldi	r24, 0x08	; 8
    7a76:	8b 83       	std	Y+3, r24	; 0x03
				msgBuffer[3]  = 'A';
    7a78:	81 e4       	ldi	r24, 0x41	; 65
    7a7a:	8c 83       	std	Y+4, r24	; 0x04
				msgBuffer[4]  = 'V';
    7a7c:	86 e5       	ldi	r24, 0x56	; 86
    7a7e:	8d 83       	std	Y+5, r24	; 0x05
				msgBuffer[5]  = 'R';
    7a80:	82 e5       	ldi	r24, 0x52	; 82
    7a82:	8e 83       	std	Y+6, r24	; 0x06
				msgBuffer[6]  = 'I';
    7a84:	89 e4       	ldi	r24, 0x49	; 73
    7a86:	8f 83       	std	Y+7, r24	; 0x07
				msgBuffer[7]  = 'S';
    7a88:	83 e5       	ldi	r24, 0x53	; 83
    7a8a:	88 87       	std	Y+8, r24	; 0x08
				msgBuffer[8]  = 'P';
    7a8c:	80 e5       	ldi	r24, 0x50	; 80
    7a8e:	89 87       	std	Y+9, r24	; 0x09
				msgBuffer[9]  = '_';
    7a90:	8f e5       	ldi	r24, 0x5F	; 95
    7a92:	8a 87       	std	Y+10, r24	; 0x0a
				msgBuffer[10] = '2';
    7a94:	82 e3       	ldi	r24, 0x32	; 50
    7a96:	8b 87       	std	Y+11, r24	; 0x0b
			}
			break;
#endif

			case CMD_SIGN_ON:
				msgLength = 11;
    7a98:	0b e0       	ldi	r16, 0x0B	; 11
    7a9a:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[6]  = 'I';
				msgBuffer[7]  = 'S';
				msgBuffer[8]  = 'P';
				msgBuffer[9]  = '_';
				msgBuffer[10] = '2';
				break;
    7a9c:	0e c1       	rjmp	.+540    	; 0x7cba <main+0x494>

			case CMD_GET_PARAMETER:
			{
				unsigned char value;

				switch(msgBuffer[1])
    7a9e:	ea 81       	ldd	r30, Y+2	; 0x02
    7aa0:	e0 58       	subi	r30, 0x80	; 128
    7aa2:	e3 31       	cpi	r30, 0x13	; 19
    7aa4:	28 f4       	brcc	.+10     	; 0x7ab0 <main+0x28a>
    7aa6:	f0 e0       	ldi	r31, 0x00	; 0
    7aa8:	e0 50       	subi	r30, 0x00	; 0
    7aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    7aac:	80 81       	ld	r24, Z
    7aae:	01 c0       	rjmp	.+2      	; 0x7ab2 <main+0x28c>
    7ab0:	80 e0       	ldi	r24, 0x00	; 0
				default:
					value = 0;
					break;
				}
				msgLength = 3;
				msgBuffer[1] = STATUS_CMD_OK;
    7ab2:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = value;
    7ab4:	8b 83       	std	Y+3, r24	; 0x03
					break;
				default:
					value = 0;
					break;
				}
				msgLength = 3;
    7ab6:	03 e0       	ldi	r16, 0x03	; 3
    7ab8:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[1] = STATUS_CMD_OK;
				msgBuffer[2] = value;
			}
			break;
    7aba:	ff c0       	rjmp	.+510    	; 0x7cba <main+0x494>
				msgBuffer[1] = STATUS_CMD_OK;
				break;

			case CMD_READ_SIGNATURE_ISP:
			{
				unsigned char signatureIndex = msgBuffer[4];
    7abc:	8d 81       	ldd	r24, Y+5	; 0x05
				unsigned char signature;

				if ( signatureIndex == 0 )
    7abe:	88 23       	and	r24, r24
    7ac0:	21 f0       	breq	.+8      	; 0x7aca <main+0x2a4>
					signature = (SIGNATURE_BYTES >>16) & 0x000000FF;
				else if ( signatureIndex == 1 )
    7ac2:	81 30       	cpi	r24, 0x01	; 1
    7ac4:	21 f4       	brne	.+8      	; 0x7ace <main+0x2a8>
					signature = (SIGNATURE_BYTES >> 8) & 0x000000FF;
    7ac6:	85 e9       	ldi	r24, 0x95	; 149
    7ac8:	24 c0       	rjmp	.+72     	; 0x7b12 <main+0x2ec>
			{
				unsigned char signatureIndex = msgBuffer[4];
				unsigned char signature;

				if ( signatureIndex == 0 )
					signature = (SIGNATURE_BYTES >>16) & 0x000000FF;
    7aca:	8e e1       	ldi	r24, 0x1E	; 30
    7acc:	22 c0       	rjmp	.+68     	; 0x7b12 <main+0x2ec>
				else if ( signatureIndex == 1 )
					signature = (SIGNATURE_BYTES >> 8) & 0x000000FF;
				else
					signature = SIGNATURE_BYTES & 0x000000FF;
    7ace:	8f e0       	ldi	r24, 0x0F	; 15
    7ad0:	20 c0       	rjmp	.+64     	; 0x7b12 <main+0x2ec>
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
    7ad2:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = boot_lock_fuse_bits_get( GET_LOCK_BITS );
    7ad4:	e1 e0       	ldi	r30, 0x01	; 1
    7ad6:	f0 e0       	ldi	r31, 0x00	; 0
    7ad8:	89 e0       	ldi	r24, 0x09	; 9
    7ada:	80 93 57 00 	sts	0x0057, r24
    7ade:	e4 91       	lpm	r30, Z+
    7ae0:	eb 83       	std	Y+3, r30	; 0x03
				msgBuffer[3] = STATUS_CMD_OK;
    7ae2:	1c 82       	std	Y+4, r1	; 0x04
				msgBuffer[3] = STATUS_CMD_OK;
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength = 4;
    7ae4:	04 e0       	ldi	r16, 0x04	; 4
    7ae6:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[1] = STATUS_CMD_OK;
				msgBuffer[2] = boot_lock_fuse_bits_get( GET_LOCK_BITS );
				msgBuffer[3] = STATUS_CMD_OK;
				break;
    7ae8:	e8 c0       	rjmp	.+464    	; 0x7cba <main+0x494>

			case CMD_READ_FUSE_ISP:
			{
				unsigned char fuseBits;

				if ( msgBuffer[2] == 0x50 )
    7aea:	8b 81       	ldd	r24, Y+3	; 0x03
    7aec:	80 35       	cpi	r24, 0x50	; 80
    7aee:	59 f4       	brne	.+22     	; 0x7b06 <main+0x2e0>
				{
					if ( msgBuffer[3] == 0x08 )
    7af0:	8c 81       	ldd	r24, Y+4	; 0x04
    7af2:	88 30       	cpi	r24, 0x08	; 8
    7af4:	21 f4       	brne	.+8      	; 0x7afe <main+0x2d8>
						fuseBits = boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
    7af6:	89 e0       	ldi	r24, 0x09	; 9
    7af8:	e2 e0       	ldi	r30, 0x02	; 2
    7afa:	f0 e0       	ldi	r31, 0x00	; 0
    7afc:	07 c0       	rjmp	.+14     	; 0x7b0c <main+0x2e6>
					else
						fuseBits = boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
    7afe:	89 e0       	ldi	r24, 0x09	; 9
    7b00:	e0 e0       	ldi	r30, 0x00	; 0
    7b02:	f0 e0       	ldi	r31, 0x00	; 0
    7b04:	03 c0       	rjmp	.+6      	; 0x7b0c <main+0x2e6>
				}
				else
				{
					fuseBits = boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
    7b06:	e3 e0       	ldi	r30, 0x03	; 3
    7b08:	f0 e0       	ldi	r31, 0x00	; 0
    7b0a:	89 e0       	ldi	r24, 0x09	; 9
    7b0c:	80 93 57 00 	sts	0x0057, r24
    7b10:	84 91       	lpm	r24, Z+
				}
				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
    7b12:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = fuseBits;
    7b14:	8b 83       	std	Y+3, r24	; 0x03
    7b16:	e5 cf       	rjmp	.-54     	; 0x7ae2 <main+0x2bc>
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
    7b18:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
				msgLength = 2;
    7b1a:	02 e0       	ldi	r16, 0x02	; 2
    7b1c:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[2] = STATUS_CMD_OK;
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
    7b1e:	66 24       	eor	r6, r6
    7b20:	77 24       	eor	r7, r7
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
				break;
    7b22:	cb c0       	rjmp	.+406    	; 0x7cba <main+0x494>

			case CMD_LOAD_ADDRESS:
#if defined(RAMPZ)
				address = ( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
#else
				address = ( ((msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;  //convert word to byte address
    7b24:	fc 81       	ldd	r31, Y+4	; 0x04
    7b26:	c1 5e       	subi	r28, 0xE1	; 225
    7b28:	de 4f       	sbci	r29, 0xFE	; 254
    7b2a:	f8 83       	st	Y, r31
    7b2c:	cf 51       	subi	r28, 0x1F	; 31
    7b2e:	d1 40       	sbci	r29, 0x01	; 1
    7b30:	c2 5e       	subi	r28, 0xE2	; 226
    7b32:	de 4f       	sbci	r29, 0xFE	; 254
    7b34:	18 82       	st	Y, r1
    7b36:	ce 51       	subi	r28, 0x1E	; 30
    7b38:	d1 40       	sbci	r29, 0x01	; 1
    7b3a:	ed 80       	ldd	r14, Y+5	; 0x05
    7b3c:	ff 24       	eor	r15, r15
    7b3e:	c2 5e       	subi	r28, 0xE2	; 226
    7b40:	de 4f       	sbci	r29, 0xFE	; 254
    7b42:	28 81       	ld	r18, Y
    7b44:	39 81       	ldd	r19, Y+1	; 0x01
    7b46:	ce 51       	subi	r28, 0x1E	; 30
    7b48:	d1 40       	sbci	r29, 0x01	; 1
    7b4a:	e2 2a       	or	r14, r18
    7b4c:	f3 2a       	or	r15, r19
    7b4e:	ee 0c       	add	r14, r14
    7b50:	ff 1c       	adc	r15, r15
#endif
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
    7b52:	1a 82       	std	Y+2, r1	; 0x02
    7b54:	b0 c0       	rjmp	.+352    	; 0x7cb6 <main+0x490>
				break;

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
    7b56:	3a 81       	ldd	r19, Y+2	; 0x02
    7b58:	cf 5d       	subi	r28, 0xDF	; 223
    7b5a:	de 4f       	sbci	r29, 0xFE	; 254
    7b5c:	38 83       	st	Y, r19
    7b5e:	c1 52       	subi	r28, 0x21	; 33
    7b60:	d1 40       	sbci	r29, 0x01	; 1
    7b62:	c0 5e       	subi	r28, 0xE0	; 224
    7b64:	de 4f       	sbci	r29, 0xFE	; 254
    7b66:	18 82       	st	Y, r1
    7b68:	c0 52       	subi	r28, 0x20	; 32
    7b6a:	d1 40       	sbci	r29, 0x01	; 1
    7b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    7b6e:	90 e0       	ldi	r25, 0x00	; 0
    7b70:	c0 5e       	subi	r28, 0xE0	; 224
    7b72:	de 4f       	sbci	r29, 0xFE	; 254
    7b74:	e8 81       	ld	r30, Y
    7b76:	f9 81       	ldd	r31, Y+1	; 0x01
    7b78:	c0 52       	subi	r28, 0x20	; 32
    7b7a:	d1 40       	sbci	r29, 0x01	; 1
    7b7c:	8e 2b       	or	r24, r30
    7b7e:	9f 2b       	or	r25, r31
				unsigned char *p = msgBuffer+10;
				unsigned int  data;
				unsigned char highByte, lowByte;
				address_t     tempaddress = address;

				if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
    7b80:	43 31       	cpi	r20, 0x13	; 19
    7b82:	09 f0       	breq	.+2      	; 0x7b86 <main+0x360>
    7b84:	3b c0       	rjmp	.+118    	; 0x7bfc <main+0x3d6>
				{
					// erase only main section (bootloader protection)
					if  (  eraseAddress < APP_END )
    7b86:	f0 e0       	ldi	r31, 0x00	; 0
    7b88:	6f 16       	cp	r6, r31
    7b8a:	f8 e7       	ldi	r31, 0x78	; 120
    7b8c:	7f 06       	cpc	r7, r31
    7b8e:	60 f4       	brcc	.+24     	; 0x7ba8 <main+0x382>
					{
						boot_page_erase(eraseAddress);	// Perform page erase
    7b90:	13 e0       	ldi	r17, 0x03	; 3
    7b92:	f3 01       	movw	r30, r6
    7b94:	10 93 57 00 	sts	0x0057, r17
    7b98:	e8 95       	spm
						boot_spm_busy_wait();		// Wait until the memory is erased.
    7b9a:	07 b6       	in	r0, 0x37	; 55
    7b9c:	00 fc       	sbrc	r0, 0
    7b9e:	fd cf       	rjmp	.-6      	; 0x7b9a <main+0x374>
						eraseAddress += SPM_PAGESIZE;    // point to next page to be erase
    7ba0:	20 e8       	ldi	r18, 0x80	; 128
    7ba2:	30 e0       	ldi	r19, 0x00	; 0
    7ba4:	62 0e       	add	r6, r18
    7ba6:	73 1e       	adc	r7, r19
				unsigned char fuseBits;

				if ( msgBuffer[2] == 0x50 )
				{
					if ( msgBuffer[3] == 0x08 )
						fuseBits = boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
    7ba8:	a7 01       	movw	r20, r14

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char *p = msgBuffer+10;
    7baa:	d1 01       	movw	r26, r2
						eraseAddress += SPM_PAGESIZE;    // point to next page to be erase
					}

					/* Write FLASH */
					do {
						lowByte   = *p++;
    7bac:	2c 91       	ld	r18, X
						highByte  = *p++;
    7bae:	11 96       	adiw	r26, 0x01	; 1
    7bb0:	3c 91       	ld	r19, X
    7bb2:	11 97       	sbiw	r26, 0x01	; 1
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    7bb4:	12 96       	adiw	r26, 0x02	; 2
					/* Write FLASH */
					do {
						lowByte   = *p++;
						highByte  = *p++;

						data =  (highByte << 8) | lowByte;
    7bb6:	73 2f       	mov	r23, r19
    7bb8:	60 e0       	ldi	r22, 0x00	; 0
    7bba:	30 e0       	ldi	r19, 0x00	; 0
    7bbc:	26 2b       	or	r18, r22
    7bbe:	37 2b       	or	r19, r23
						boot_page_fill(address,data);
    7bc0:	11 e0       	ldi	r17, 0x01	; 1
    7bc2:	fa 01       	movw	r30, r20
    7bc4:	09 01       	movw	r0, r18
    7bc6:	10 93 57 00 	sts	0x0057, r17
    7bca:	e8 95       	spm
    7bcc:	11 24       	eor	r1, r1

						address = address + 2;  	// Select next word in memory
    7bce:	4e 5f       	subi	r20, 0xFE	; 254
    7bd0:	5f 4f       	sbci	r21, 0xFF	; 255
						size -= 2;			// Reduce number of bytes to write by two
    7bd2:	02 97       	sbiw	r24, 0x02	; 2
					} while(size);			// Loop until all bytes written
    7bd4:	59 f7       	brne	.-42     	; 0x7bac <main+0x386>
    7bd6:	cc 5d       	subi	r28, 0xDC	; 220
    7bd8:	de 4f       	sbci	r29, 0xFE	; 254
    7bda:	79 83       	std	Y+1, r23	; 0x01
    7bdc:	68 83       	st	Y, r22
    7bde:	c4 52       	subi	r28, 0x24	; 36
    7be0:	d1 40       	sbci	r29, 0x01	; 1

					boot_page_write(tempaddress);
    7be2:	15 e0       	ldi	r17, 0x05	; 5
    7be4:	f7 01       	movw	r30, r14
    7be6:	10 93 57 00 	sts	0x0057, r17
    7bea:	e8 95       	spm
					boot_spm_busy_wait();
    7bec:	07 b6       	in	r0, 0x37	; 55
    7bee:	00 fc       	sbrc	r0, 0
    7bf0:	fd cf       	rjmp	.-6      	; 0x7bec <main+0x3c6>
					boot_rww_enable();				// Re-enable the RWW section
    7bf2:	21 e1       	ldi	r18, 0x11	; 17
    7bf4:	20 93 57 00 	sts	0x0057, r18
    7bf8:	e8 95       	spm
    7bfa:	13 c0       	rjmp	.+38     	; 0x7c22 <main+0x3fc>
				unsigned char *p = msgBuffer+10;
				unsigned int  data;
				unsigned char highByte, lowByte;
				address_t     tempaddress = address;

				if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
    7bfc:	ac 01       	movw	r20, r24
    7bfe:	97 01       	movw	r18, r14

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char *p = msgBuffer+10;
    7c00:	f1 01       	movw	r30, r2
				}
				else
				{
					/* write EEPROM */
					do {
						EEARL = address;			// Setup EEPROM address
    7c02:	21 bd       	out	0x21, r18	; 33
						EEARH = (address >> 8);
    7c04:	32 bd       	out	0x22, r19	; 34
						address++;					// Select next EEPROM byte
    7c06:	2f 5f       	subi	r18, 0xFF	; 255
    7c08:	3f 4f       	sbci	r19, 0xFF	; 255

						EEDR= *p++;				    // get byte from buffer
    7c0a:	61 91       	ld	r22, Z+
    7c0c:	60 bd       	out	0x20, r22	; 32
						EECR |= (1<<EEMWE);			// Write data into EEPROM
    7c0e:	fa 9a       	sbi	0x1f, 2	; 31
						EECR |= (1<<EEWE);
    7c10:	f9 9a       	sbi	0x1f, 1	; 31

						while (EECR & (1<<EEWE));	// Wait for write operation to finish
    7c12:	f9 99       	sbic	0x1f, 1	; 31
    7c14:	fe cf       	rjmp	.-4      	; 0x7c12 <main+0x3ec>
						size--;						// Decrease number of bytes to write
    7c16:	41 50       	subi	r20, 0x01	; 1
    7c18:	50 40       	sbci	r21, 0x00	; 0
					} while(size);					// Loop until all bytes written
    7c1a:	99 f7       	brne	.-26     	; 0x7c02 <main+0x3dc>
    7c1c:	a7 01       	movw	r20, r14
    7c1e:	48 0f       	add	r20, r24
    7c20:	59 1f       	adc	r21, r25
				}
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
    7c22:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
    7c24:	7a 01       	movw	r14, r20
    7c26:	47 c0       	rjmp	.+142    	; 0x7cb6 <main+0x490>

			case CMD_READ_FLASH_ISP:
			case CMD_READ_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
    7c28:	3a 81       	ldd	r19, Y+2	; 0x02
    7c2a:	cd 5d       	subi	r28, 0xDD	; 221
    7c2c:	de 4f       	sbci	r29, 0xFE	; 254
    7c2e:	38 83       	st	Y, r19
    7c30:	c3 52       	subi	r28, 0x23	; 35
    7c32:	d1 40       	sbci	r29, 0x01	; 1
    7c34:	ce 5d       	subi	r28, 0xDE	; 222
    7c36:	de 4f       	sbci	r29, 0xFE	; 254
    7c38:	18 82       	st	Y, r1
    7c3a:	c2 52       	subi	r28, 0x22	; 34
    7c3c:	d1 40       	sbci	r29, 0x01	; 1
    7c3e:	2b 81       	ldd	r18, Y+3	; 0x03
    7c40:	30 e0       	ldi	r19, 0x00	; 0
    7c42:	ce 5d       	subi	r28, 0xDE	; 222
    7c44:	de 4f       	sbci	r29, 0xFE	; 254
    7c46:	88 81       	ld	r24, Y
    7c48:	99 81       	ldd	r25, Y+1	; 0x01
    7c4a:	c2 52       	subi	r28, 0x22	; 34
    7c4c:	d1 40       	sbci	r29, 0x01	; 1
    7c4e:	28 2b       	or	r18, r24
    7c50:	39 2b       	or	r19, r25
				unsigned char *p = msgBuffer+1;
				msgLength = size+3;
    7c52:	89 01       	movw	r16, r18
    7c54:	0d 5f       	subi	r16, 0xFD	; 253
    7c56:	1f 4f       	sbci	r17, 0xFF	; 255

				*p++ = STATUS_CMD_OK;
    7c58:	1a 82       	std	Y+2, r1	; 0x02
				if (msgBuffer[0] == CMD_READ_FLASH_ISP )
    7c5a:	44 31       	cpi	r20, 0x14	; 20
    7c5c:	91 f4       	brne	.+36     	; 0x7c82 <main+0x45c>
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char *p = msgBuffer+1;
				msgLength = size+3;

				*p++ = STATUS_CMD_OK;
    7c5e:	de 01       	movw	r26, r28
    7c60:	13 96       	adiw	r26, 0x03	; 3
    7c62:	a7 01       	movw	r20, r14
					// Read FLASH
					do {
#if defined(RAMPZ)
						data = pgm_read_word_far(address);
#else
						data = pgm_read_word_near(address);
    7c64:	fa 01       	movw	r30, r20
    7c66:	85 91       	lpm	r24, Z+
    7c68:	94 91       	lpm	r25, Z+
#endif
						*p++ = (unsigned char)data;         //LSB
    7c6a:	8c 93       	st	X, r24
						*p++ = (unsigned char)(data >> 8);	//MSB
    7c6c:	11 96       	adiw	r26, 0x01	; 1
    7c6e:	9c 93       	st	X, r25
    7c70:	11 97       	sbiw	r26, 0x01	; 1
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    7c72:	12 96       	adiw	r26, 0x02	; 2
#else
						data = pgm_read_word_near(address);
#endif
						*p++ = (unsigned char)data;         //LSB
						*p++ = (unsigned char)(data >> 8);	//MSB
						address    += 2;  	 // Select next word in memory
    7c74:	4e 5f       	subi	r20, 0xFE	; 254
    7c76:	5f 4f       	sbci	r21, 0xFF	; 255
						size -= 2;
    7c78:	22 50       	subi	r18, 0x02	; 2
    7c7a:	30 40       	sbci	r19, 0x00	; 0
					}while (size);
    7c7c:	99 f7       	brne	.-26     	; 0x7c64 <main+0x43e>
    7c7e:	7a 01       	movw	r14, r20
    7c80:	16 c0       	rjmp	.+44     	; 0x7cae <main+0x488>
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char *p = msgBuffer+1;
				msgLength = size+3;

				*p++ = STATUS_CMD_OK;
    7c82:	ce 01       	movw	r24, r28
    7c84:	03 96       	adiw	r24, 0x03	; 3
    7c86:	e8 2f       	mov	r30, r24
    7c88:	69 2f       	mov	r22, r25
				if (msgBuffer[0] == CMD_READ_FLASH_ISP )
    7c8a:	c9 01       	movw	r24, r18
    7c8c:	a7 01       	movw	r20, r14
				}
				else
				{
					/* Read EEPROM */
					do {
						EEARL = address;			// Setup EEPROM address
    7c8e:	41 bd       	out	0x21, r20	; 33
						EEARH = ((address >> 8));
    7c90:	52 bd       	out	0x22, r21	; 34
						address++;					// Select next EEPROM byte
    7c92:	4f 5f       	subi	r20, 0xFF	; 255
    7c94:	5f 4f       	sbci	r21, 0xFF	; 255
						EECR |= (1<<EERE);			// Read EEPROM
    7c96:	f8 9a       	sbi	0x1f, 0	; 31
						*p++ = EEDR;				// Send EEPROM data
    7c98:	70 b5       	in	r23, 0x20	; 32
    7c9a:	ae 2f       	mov	r26, r30
    7c9c:	b6 2f       	mov	r27, r22
    7c9e:	7d 93       	st	X+, r23
    7ca0:	bd 01       	movw	r22, r26
    7ca2:	ea 2f       	mov	r30, r26
    7ca4:	67 2f       	mov	r22, r23
						size--;
    7ca6:	01 97       	sbiw	r24, 0x01	; 1
					}while(size);
    7ca8:	91 f7       	brne	.-28     	; 0x7c8e <main+0x468>
    7caa:	e2 0e       	add	r14, r18
    7cac:	f3 1e       	adc	r15, r19
				}
				*p++ = STATUS_CMD_OK;
    7cae:	1c 92       	st	X, r1
			}
			break;
    7cb0:	04 c0       	rjmp	.+8      	; 0x7cba <main+0x494>

			default:
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_FAILED;
    7cb2:	90 ec       	ldi	r25, 0xC0	; 192
    7cb4:	9a 83       	std	Y+2, r25	; 0x02
				*p++ = STATUS_CMD_OK;
			}
			break;

			default:
				msgLength = 2;
    7cb6:	02 e0       	ldi	r16, 0x02	; 2
    7cb8:	10 e0       	ldi	r17, 0x00	; 0
			}

			/*
			 * Now send answer message back
			 */
			sendchar(MESSAGE_START);     
    7cba:	8b e1       	ldi	r24, 0x1B	; 27
    7cbc:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum = MESSAGE_START^0;

			sendchar(seqNum);
    7cc0:	89 2d       	mov	r24, r9
    7cc2:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum ^= seqNum;

			c = ((msgLength>>8)&0xFF);
			sendchar(c);
    7cc6:	81 2f       	mov	r24, r17
    7cc8:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum ^= c;

			c = msgLength&0x00FF;
			sendchar(c);
    7ccc:	80 2f       	mov	r24, r16
    7cce:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum ^= c;

			sendchar(TOKEN);
    7cd2:	8e e0       	ldi	r24, 0x0E	; 14
    7cd4:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			sendchar(seqNum);
			checksum ^= seqNum;

			c = ((msgLength>>8)&0xFF);
			sendchar(c);
			checksum ^= c;
    7cd8:	95 e1       	ldi	r25, 0x15	; 21
    7cda:	89 2e       	mov	r8, r25
    7cdc:	89 24       	eor	r8, r9

			c = msgLength&0x00FF;
			sendchar(c);
			checksum ^= c;
    7cde:	80 26       	eor	r8, r16

			sendchar(TOKEN);
			checksum ^= TOKEN;
    7ce0:	81 26       	eor	r8, r17

			p = msgBuffer;
    7ce2:	52 01       	movw	r10, r4
			while ( msgLength )
    7ce4:	13 c0       	rjmp	.+38     	; 0x7d0c <main+0x4e6>
			{
				c = *p++;
    7ce6:	f5 01       	movw	r30, r10
    7ce8:	91 91       	ld	r25, Z+
    7cea:	5f 01       	movw	r10, r30
				sendchar(c);
    7cec:	89 2f       	mov	r24, r25
    7cee:	c8 5d       	subi	r28, 0xD8	; 216
    7cf0:	de 4f       	sbci	r29, 0xFE	; 254
    7cf2:	98 83       	st	Y, r25
    7cf4:	c8 52       	subi	r28, 0x28	; 40
    7cf6:	d1 40       	sbci	r29, 0x01	; 1
    7cf8:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
				checksum ^=c;
    7cfc:	c8 5d       	subi	r28, 0xD8	; 216
    7cfe:	de 4f       	sbci	r29, 0xFE	; 254
    7d00:	98 81       	ld	r25, Y
    7d02:	c8 52       	subi	r28, 0x28	; 40
    7d04:	d1 40       	sbci	r29, 0x01	; 1
    7d06:	89 26       	eor	r8, r25
				msgLength--;               
    7d08:	01 50       	subi	r16, 0x01	; 1
    7d0a:	10 40       	sbci	r17, 0x00	; 0

			sendchar(TOKEN);
			checksum ^= TOKEN;

			p = msgBuffer;
			while ( msgLength )
    7d0c:	01 15       	cp	r16, r1
    7d0e:	11 05       	cpc	r17, r1
    7d10:	51 f7       	brne	.-44     	; 0x7ce6 <main+0x4c0>
				c = *p++;
				sendchar(c);
				checksum ^=c;
				msgLength--;               
			}                   
			sendchar(checksum);	        
    7d12:	88 2d       	mov	r24, r8
    7d14:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			seqNum++;
    7d18:	93 94       	inc	r9
    7d1a:	20 e0       	ldi	r18, 0x00	; 0
    7d1c:	30 e0       	ldi	r19, 0x00	; 0
	}
	sendchar(checksum);
	seqNum++;
	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
    7d1e:	60 e0       	ldi	r22, 0x00	; 0
    7d20:	70 e0       	ldi	r23, 0x00	; 0
    7d22:	80 e0       	ldi	r24, 0x00	; 0
    7d24:	ef cd       	rjmp	.-1058   	; 0x7904 <main+0xde>
				switch (msgParseState){
				case ST_START:
					if ( c == MESSAGE_START )
					{
						msgParseState	=	ST_GET_SEQ_NUM;
						checksum		=	MESSAGE_START^0;
    7d26:	8b e1       	ldi	r24, 0x1B	; 27
    7d28:	88 2e       	mov	r8, r24

				switch (msgParseState){
				case ST_START:
					if ( c == MESSAGE_START )
					{
						msgParseState	=	ST_GET_SEQ_NUM;
    7d2a:	81 e0       	ldi	r24, 0x01	; 1
    7d2c:	e9 cd       	rjmp	.-1070   	; 0x7900 <main+0xda>
						checksum		^=	c;
						ii				=	0;
					}
					else
					{
						msgParseState	=	ST_START;
    7d2e:	80 e0       	ldi	r24, 0x00	; 0
    7d30:	e7 cd       	rjmp	.-1074   	; 0x7900 <main+0xda>
				case ST_GET_DATA:
					msgBuffer[ii++]	=	c;
					checksum		^=	c;
					if (ii == msgLength )
					{
						msgParseState	=	ST_GET_CHECK;
    7d32:	86 e0       	ldi	r24, 0x06	; 6
    7d34:	e5 cd       	rjmp	.-1078   	; 0x7900 <main+0xda>
