
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00007cac  00000520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ac  00007800  00007800  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000028  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000002a  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000429  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b6  00000000  00000000  000009af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000749  00000000  00000000  00000b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d5  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000811  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000046  00000000  00000000  00001cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007800 <__jumpMain>:
 * to reduce the code size, we need to provide our own initialization
 */
void __jumpMain     (void) __attribute__ ((naked)) __attribute__ ((section (".init9")));

void __jumpMain(void)
{    
    7800:	8f ef       	ldi	r24, 0xFF	; 255
	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

	/* init stack here, bug WinAVR 20071221 does not init stack based on __stack */  
	asm volatile ("ldi r24,%0":: "M" (RAMEND & 0xFF));          
	asm volatile ("ldi r25,%0":: "M" (RAMEND >> 8));
    7802:	98 e0       	ldi	r25, 0x08	; 8
	asm volatile ("out __SP_H__,r25" ::);
    7804:	9e bf       	out	0x3e, r25	; 62
	asm volatile ("out __SP_L__,r24" ::);
    7806:	8d bf       	out	0x3d, r24	; 61

	asm volatile ( "clr __zero_reg__" );                       // GCC depends on register r1 set to 0
    7808:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );  // set SREG to 0
    780a:	1f be       	out	0x3f, r1	; 63
#ifndef REMOVE_PROG_PIN_PULLUP	 
	PROG_PORT |= (1<<PROG_PIN);		                           // Enable internal pullup
#endif    
	asm volatile ( "rjmp main");                               // jump to main()
    780c:	0c c0       	rjmp	.+24     	; 0x7826 <main>

0000780e <sendchar>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG = c;                                         // prepare transmission
    780e:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));// wait until byte sent
    7812:	80 91 c0 00 	lds	r24, 0x00C0
    7816:	86 ff       	sbrs	r24, 6
    7818:	fc cf       	rjmp	.-8      	; 0x7812 <sendchar+0x4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);          // delete TXCflag
    781a:	80 91 c0 00 	lds	r24, 0x00C0
    781e:	80 64       	ori	r24, 0x40	; 64
    7820:	80 93 c0 00 	sts	0x00C0, r24
}
    7824:	08 95       	ret

00007826 <main>:
}


int main(void) __attribute__ ((OS_main));
int main(void)
{
    7826:	cd b7       	in	r28, 0x3d	; 61
    7828:	de b7       	in	r29, 0x3e	; 62
    782a:	c5 52       	subi	r28, 0x25	; 37
    782c:	d1 40       	sbci	r29, 0x01	; 1
    782e:	de bf       	out	0x3e, r29	; 62
    7830:	cd bf       	out	0x3d, r28	; 61
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG |= (1 <<UART_DOUBLE_SPEED);
#endif

#ifdef UART_BAUD_RATE_HIGH    
	UART_BAUD_RATE_HIGH = 0;     
    7832:	10 92 c5 00 	sts	0x00C5, r1
#endif       
	UART_BAUD_RATE_LOW = UART_BAUD_SELECT(BAUDRATE,F_CPU);
    7836:	83 e0       	ldi	r24, 0x03	; 3
    7838:	80 93 c4 00 	sts	0x00C4, r24
	UART_CONTROL_REG   = (1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER); 
    783c:	98 e1       	ldi	r25, 0x18	; 24
    783e:	90 93 c1 00 	sts	0x00C1, r25
	/*
	 * Branch to bootloader or application code ?
	 */	

#ifndef REMOVE_WATCHDOG_START
	if((MCUSR & (1 << WDRF)))
    7842:	84 b7       	in	r24, 0x34	; 52
	{
		start_bootloader = 1;
	}

	MCUSR &= ~(1<<WDRF);
    7844:	84 b7       	in	r24, 0x34	; 52
    7846:	87 7f       	andi	r24, 0xF7	; 247
    7848:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    784a:	0f b6       	in	r0, 0x3f	; 63
    784c:	f8 94       	cli
    784e:	90 93 60 00 	sts	0x0060, r25
    7852:	10 92 60 00 	sts	0x0060, r1
    7856:	0f be       	out	0x3f, r0	; 63
	//  sendchar('r');
	//  sendchar('.');
	//  sendchar('.');
	//  sendchar('.');
	msgLength		=	11;
	msgBuffer[0] 	=	CMD_SIGN_ON;
    7858:	81 e0       	ldi	r24, 0x01	; 1
    785a:	89 83       	std	Y+1, r24	; 0x01
	msgBuffer[1] 	=	STATUS_CMD_OK;
    785c:	1a 82       	std	Y+2, r1	; 0x02
	msgBuffer[2] 	=	8;
    785e:	88 e0       	ldi	r24, 0x08	; 8
    7860:	8b 83       	std	Y+3, r24	; 0x03
	msgBuffer[3] 	=	'A';
    7862:	81 e4       	ldi	r24, 0x41	; 65
    7864:	8c 83       	std	Y+4, r24	; 0x04
	msgBuffer[4] 	=	'V';
    7866:	86 e5       	ldi	r24, 0x56	; 86
    7868:	8d 83       	std	Y+5, r24	; 0x05
	msgBuffer[5] 	=	'R';
    786a:	82 e5       	ldi	r24, 0x52	; 82
    786c:	8e 83       	std	Y+6, r24	; 0x06
	msgBuffer[6] 	=	'I';
    786e:	89 e4       	ldi	r24, 0x49	; 73
    7870:	8f 83       	std	Y+7, r24	; 0x07
	msgBuffer[7] 	=	'S';
    7872:	83 e5       	ldi	r24, 0x53	; 83
    7874:	88 87       	std	Y+8, r24	; 0x08
	msgBuffer[8] 	=	'P';
    7876:	80 e5       	ldi	r24, 0x50	; 80
    7878:	89 87       	std	Y+9, r24	; 0x09
	msgBuffer[9] 	=	'_';
    787a:	8f e5       	ldi	r24, 0x5F	; 95
    787c:	8a 87       	std	Y+10, r24	; 0x0a
	msgBuffer[10]	=	'2';
    787e:	82 e3       	ldi	r24, 0x32	; 50
    7880:	8b 87       	std	Y+11, r24	; 0x0b
	sendchar(MESSAGE_START);
    7882:	8b e1       	ldi	r24, 0x1B	; 27
    7884:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum	=	MESSAGE_START^0;

	sendchar(seqNum);
    7888:	81 e0       	ldi	r24, 0x01	; 1
    788a:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum	^=	seqNum;

	c			=	((msgLength>>8)&0xFF);
	sendchar(c);
    788e:	80 e0       	ldi	r24, 0x00	; 0
    7890:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum	^=	c;

	c			=	msgLength&0x00FF;
	sendchar(c);
    7894:	8b e0       	ldi	r24, 0x0B	; 11
    7896:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum ^= c;

	sendchar(TOKEN);
    789a:	8e e0       	ldi	r24, 0x0E	; 14
    789c:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    78a0:	3c e0       	ldi	r19, 0x0C	; 12
    78a2:	e3 2e       	mov	r14, r19
    78a4:	f1 2c       	mov	r15, r1
    78a6:	ec 0e       	add	r14, r28
    78a8:	fd 1e       	adc	r15, r29
	checksum ^= c;

	sendchar(TOKEN);
	checksum ^= TOKEN;

	p	=	msgBuffer;
    78aa:	8e 01       	movw	r16, r28
    78ac:	0f 5f       	subi	r16, 0xFF	; 255
    78ae:	1f 4f       	sbci	r17, 0xFF	; 255
	c			=	msgLength&0x00FF;
	sendchar(c);
	checksum ^= c;

	sendchar(TOKEN);
	checksum ^= TOKEN;
    78b0:	2f e1       	ldi	r18, 0x1F	; 31
    78b2:	52 2e       	mov	r5, r18

	p	=	msgBuffer;
	while ( msgLength )
	{
		c	=	*p++;
    78b4:	d8 01       	movw	r26, r16
    78b6:	cd 90       	ld	r12, X+
    78b8:	8d 01       	movw	r16, r26
		sendchar(c);
    78ba:	8c 2d       	mov	r24, r12
    78bc:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
		checksum ^=c;
    78c0:	5c 24       	eor	r5, r12

	sendchar(TOKEN);
	checksum ^= TOKEN;

	p	=	msgBuffer;
	while ( msgLength )
    78c2:	0e 15       	cp	r16, r14
    78c4:	1f 05       	cpc	r17, r15
    78c6:	b1 f7       	brne	.-20     	; 0x78b4 <main+0x8e>
		c	=	*p++;
		sendchar(c);
		checksum ^=c;
		msgLength--;
	}
	sendchar(checksum);
    78c8:	85 2d       	mov	r24, r5
    78ca:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    78ce:	8f ef       	ldi	r24, 0xFF	; 255
    78d0:	90 e7       	ldi	r25, 0x70	; 112
    78d2:	a2 e0       	ldi	r26, 0x02	; 2
    78d4:	81 50       	subi	r24, 0x01	; 1
    78d6:	90 40       	sbci	r25, 0x00	; 0
    78d8:	a0 40       	sbci	r26, 0x00	; 0
    78da:	e1 f7       	brne	.-8      	; 0x78d4 <main+0xae>
    78dc:	00 c0       	rjmp	.+0      	; 0x78de <main+0xb8>
    78de:	00 00       	nop
	seqNum++;


	_delay_ms(100);

	if((UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
    78e0:	80 91 c0 00 	lds	r24, 0x00C0
    78e4:	87 ff       	sbrs	r24, 7
    78e6:	d0 c1       	rjmp	.+928    	; 0x7c88 <main+0x462>
	{
		char cmdChar = UART_DATA_REG;
    78e8:	80 91 c6 00 	lds	r24, 0x00C6
    78ec:	cd c1       	rjmp	.+922    	; 0x7c88 <main+0x462>
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while(!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)));  // wait for data
    78ee:	90 91 c0 00 	lds	r25, 0x00C0
    78f2:	97 ff       	sbrs	r25, 7
    78f4:	fc cf       	rjmp	.-8      	; 0x78ee <main+0xc8>
	return UART_DATA_REG;
    78f6:	40 91 c6 00 	lds	r20, 0x00C6
			 */            
			msgParseState = ST_START;
			while ( msgParseState != ST_PROCESS )
			{
				c = recchar();
				switch (msgParseState)
    78fa:	83 30       	cpi	r24, 0x03	; 3
    78fc:	f9 f0       	breq	.+62     	; 0x793c <main+0x116>
    78fe:	84 30       	cpi	r24, 0x04	; 4
    7900:	28 f4       	brcc	.+10     	; 0x790c <main+0xe6>
    7902:	81 30       	cpi	r24, 0x01	; 1
    7904:	69 f0       	breq	.+26     	; 0x7920 <main+0xfa>
    7906:	82 30       	cpi	r24, 0x02	; 2
    7908:	a0 f4       	brcc	.+40     	; 0x7932 <main+0x10c>
    790a:	07 c0       	rjmp	.+14     	; 0x791a <main+0xf4>
    790c:	85 30       	cpi	r24, 0x05	; 5
    790e:	29 f1       	breq	.+74     	; 0x795a <main+0x134>
    7910:	85 30       	cpi	r24, 0x05	; 5
    7912:	d8 f0       	brcs	.+54     	; 0x794a <main+0x124>
    7914:	86 30       	cpi	r24, 0x06	; 6
    7916:	59 f7       	brne	.-42     	; 0x78ee <main+0xc8>
    7918:	2d c0       	rjmp	.+90     	; 0x7974 <main+0x14e>
				{
				case ST_START:
					if( c == MESSAGE_START )
    791a:	4b 31       	cpi	r20, 0x1B	; 27
    791c:	a9 f5       	brne	.+106    	; 0x7988 <main+0x162>
    791e:	2e c0       	rjmp	.+92     	; 0x797c <main+0x156>
						checksum = MESSAGE_START^0;
					}
					break;

				case ST_GET_SEQ_NUM:
					if ( (c == 1) || (c == seqNum) )
    7920:	41 30       	cpi	r20, 0x01	; 1
    7922:	19 f0       	breq	.+6      	; 0x792a <main+0x104>
    7924:	4b 15       	cp	r20, r11
    7926:	09 f0       	breq	.+2      	; 0x792a <main+0x104>
    7928:	bf c1       	rjmp	.+894    	; 0x7ca8 <main+0x482>
					{
						seqNum = c;
						msgParseState = ST_MSG_SIZE_1;
						checksum ^= c;
    792a:	54 26       	eor	r5, r20
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while(!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)));  // wait for data
	return UART_DATA_REG;
    792c:	b4 2e       	mov	r11, r20

				case ST_GET_SEQ_NUM:
					if ( (c == 1) || (c == seqNum) )
					{
						seqNum = c;
						msgParseState = ST_MSG_SIZE_1;
    792e:	82 e0       	ldi	r24, 0x02	; 2
						checksum ^= c;
    7930:	de cf       	rjmp	.-68     	; 0x78ee <main+0xc8>
						msgParseState = ST_START;
					}
					break;

				case ST_MSG_SIZE_1:
					msgLength = (unsigned int)c<<8;
    7932:	34 2f       	mov	r19, r20
    7934:	20 e0       	ldi	r18, 0x00	; 0
					msgParseState = ST_MSG_SIZE_2;
					checksum ^= c;
    7936:	54 26       	eor	r5, r20
					}
					break;

				case ST_MSG_SIZE_1:
					msgLength = (unsigned int)c<<8;
					msgParseState = ST_MSG_SIZE_2;
    7938:	83 e0       	ldi	r24, 0x03	; 3
					checksum ^= c;
					break;
    793a:	d9 cf       	rjmp	.-78     	; 0x78ee <main+0xc8>

				case ST_MSG_SIZE_2:
					msgLength |= c;
    793c:	84 2f       	mov	r24, r20
    793e:	90 e0       	ldi	r25, 0x00	; 0
    7940:	28 2b       	or	r18, r24
    7942:	39 2b       	or	r19, r25
					msgParseState = ST_GET_TOKEN;
					checksum ^= c;
    7944:	54 26       	eor	r5, r20
					checksum ^= c;
					break;

				case ST_MSG_SIZE_2:
					msgLength |= c;
					msgParseState = ST_GET_TOKEN;
    7946:	84 e0       	ldi	r24, 0x04	; 4
					checksum ^= c;
					break;
    7948:	d2 cf       	rjmp	.-92     	; 0x78ee <main+0xc8>

				case ST_GET_TOKEN:
					if ( c == TOKEN )
    794a:	4e 30       	cpi	r20, 0x0E	; 14
    794c:	09 f0       	breq	.+2      	; 0x7950 <main+0x12a>
    794e:	ac c1       	rjmp	.+856    	; 0x7ca8 <main+0x482>
					{
						msgParseState = ST_GET_DATA;
						checksum ^= c;
    7950:	54 26       	eor	r5, r20
						i = 0;
    7952:	88 24       	eor	r8, r8
    7954:	99 24       	eor	r9, r9
					break;

				case ST_GET_TOKEN:
					if ( c == TOKEN )
					{
						msgParseState = ST_GET_DATA;
    7956:	85 e0       	ldi	r24, 0x05	; 5
    7958:	ca cf       	rjmp	.-108    	; 0x78ee <main+0xc8>
						msgParseState = ST_START;
					}
					break;

				case ST_GET_DATA:
					msgBuffer[i++] = c;
    795a:	f1 01       	movw	r30, r2
    795c:	e8 0d       	add	r30, r8
    795e:	f9 1d       	adc	r31, r9
    7960:	40 83       	st	Z, r20
    7962:	08 94       	sec
    7964:	81 1c       	adc	r8, r1
    7966:	91 1c       	adc	r9, r1
					checksum ^= c;
    7968:	54 26       	eor	r5, r20
					if ( i == msgLength )
    796a:	82 16       	cp	r8, r18
    796c:	93 06       	cpc	r9, r19
    796e:	09 f0       	breq	.+2      	; 0x7972 <main+0x14c>
    7970:	be cf       	rjmp	.-132    	; 0x78ee <main+0xc8>
    7972:	08 c0       	rjmp	.+16     	; 0x7984 <main+0x15e>
						msgParseState = ST_GET_CHECK;
					}
					break;

				case ST_GET_CHECK:
					if( c == checksum )
    7974:	45 15       	cp	r20, r5
    7976:	09 f0       	breq	.+2      	; 0x797a <main+0x154>
    7978:	97 c1       	rjmp	.+814    	; 0x7ca8 <main+0x482>
    797a:	09 c0       	rjmp	.+18     	; 0x798e <main+0x168>
				{
				case ST_START:
					if( c == MESSAGE_START )
					{
						msgParseState = ST_GET_SEQ_NUM;
						checksum = MESSAGE_START^0;
    797c:	9b e1       	ldi	r25, 0x1B	; 27
    797e:	59 2e       	mov	r5, r25
				switch (msgParseState)
				{
				case ST_START:
					if( c == MESSAGE_START )
					{
						msgParseState = ST_GET_SEQ_NUM;
    7980:	81 e0       	ldi	r24, 0x01	; 1
    7982:	b5 cf       	rjmp	.-150    	; 0x78ee <main+0xc8>
				case ST_GET_DATA:
					msgBuffer[i++] = c;
					checksum ^= c;
					if ( i == msgLength )
					{
						msgParseState = ST_GET_CHECK;
    7984:	86 e0       	ldi	r24, 0x06	; 6
    7986:	b3 cf       	rjmp	.-154    	; 0x78ee <main+0xc8>
		{   
			/*
			 * Collect received bytes to a complete message
			 */            
			msgParseState = ST_START;
			while ( msgParseState != ST_PROCESS )
    7988:	87 30       	cpi	r24, 0x07	; 7
    798a:	09 f0       	breq	.+2      	; 0x798e <main+0x168>
    798c:	b0 cf       	rjmp	.-160    	; 0x78ee <main+0xc8>

				/*
				 * Now process the STK500 commands, see Atmel Appnote AVR068
				 */

			switch (msgBuffer[0])
    798e:	49 81       	ldd	r20, Y+1	; 0x01
    7990:	42 31       	cpi	r20, 0x12	; 18
    7992:	09 f4       	brne	.+2      	; 0x7996 <main+0x170>
    7994:	91 c0       	rjmp	.+290    	; 0x7ab8 <main+0x292>
    7996:	43 31       	cpi	r20, 0x13	; 19
    7998:	a8 f4       	brcc	.+42     	; 0x79c4 <main+0x19e>
    799a:	43 30       	cpi	r20, 0x03	; 3
    799c:	09 f4       	brne	.+2      	; 0x79a0 <main+0x17a>
    799e:	52 c0       	rjmp	.+164    	; 0x7a44 <main+0x21e>
    79a0:	44 30       	cpi	r20, 0x04	; 4
    79a2:	30 f4       	brcc	.+12     	; 0x79b0 <main+0x18a>
    79a4:	41 30       	cpi	r20, 0x01	; 1
    79a6:	b9 f1       	breq	.+110    	; 0x7a16 <main+0x1f0>
    79a8:	42 30       	cpi	r20, 0x02	; 2
    79aa:	09 f0       	breq	.+2      	; 0x79ae <main+0x188>
    79ac:	40 c1       	rjmp	.+640    	; 0x7c2e <main+0x408>
    79ae:	a2 c0       	rjmp	.+324    	; 0x7af4 <main+0x2ce>
    79b0:	46 30       	cpi	r20, 0x06	; 6
    79b2:	09 f4       	brne	.+2      	; 0x79b6 <main+0x190>
    79b4:	88 c0       	rjmp	.+272    	; 0x7ac6 <main+0x2a0>
    79b6:	46 30       	cpi	r20, 0x06	; 6
    79b8:	08 f4       	brcc	.+2      	; 0x79bc <main+0x196>
    79ba:	39 c1       	rjmp	.+626    	; 0x7c2e <main+0x408>
    79bc:	40 31       	cpi	r20, 0x10	; 16
    79be:	08 f4       	brcc	.+2      	; 0x79c2 <main+0x19c>
    79c0:	36 c1       	rjmp	.+620    	; 0x7c2e <main+0x408>
    79c2:	98 c0       	rjmp	.+304    	; 0x7af4 <main+0x2ce>
    79c4:	46 31       	cpi	r20, 0x16	; 22
    79c6:	09 f4       	brne	.+2      	; 0x79ca <main+0x1a4>
    79c8:	ed c0       	rjmp	.+474    	; 0x7ba4 <main+0x37e>
    79ca:	47 31       	cpi	r20, 0x17	; 23
    79cc:	e0 f4       	brcc	.+56     	; 0x7a06 <main+0x1e0>
    79ce:	44 31       	cpi	r20, 0x14	; 20
    79d0:	09 f4       	brne	.+2      	; 0x79d4 <main+0x1ae>
    79d2:	e8 c0       	rjmp	.+464    	; 0x7ba4 <main+0x37e>
				break;

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
    79d4:	9a 81       	ldd	r25, Y+2	; 0x02
    79d6:	cf 5d       	subi	r28, 0xDF	; 223
    79d8:	de 4f       	sbci	r29, 0xFE	; 254
    79da:	98 83       	st	Y, r25
    79dc:	c1 52       	subi	r28, 0x21	; 33
    79de:	d1 40       	sbci	r29, 0x01	; 1
    79e0:	c0 5e       	subi	r28, 0xE0	; 224
    79e2:	de 4f       	sbci	r29, 0xFE	; 254
    79e4:	18 82       	st	Y, r1
    79e6:	c0 52       	subi	r28, 0x20	; 32
    79e8:	d1 40       	sbci	r29, 0x01	; 1
    79ea:	8b 81       	ldd	r24, Y+3	; 0x03
    79ec:	90 e0       	ldi	r25, 0x00	; 0
    79ee:	c0 5e       	subi	r28, 0xE0	; 224
    79f0:	de 4f       	sbci	r29, 0xFE	; 254
    79f2:	a8 81       	ld	r26, Y
    79f4:	b9 81       	ldd	r27, Y+1	; 0x01
    79f6:	c0 52       	subi	r28, 0x20	; 32
    79f8:	d1 40       	sbci	r29, 0x01	; 1
    79fa:	8a 2b       	or	r24, r26
    79fc:	9b 2b       	or	r25, r27
				unsigned char *p = msgBuffer+10;
				unsigned int  data;
				unsigned char highByte, lowByte;
				address_t     tempaddress = address;

				if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
    79fe:	43 31       	cpi	r20, 0x13	; 19
    7a00:	09 f0       	breq	.+2      	; 0x7a04 <main+0x1de>
    7a02:	b9 c0       	rjmp	.+370    	; 0x7b76 <main+0x350>
    7a04:	79 c0       	rjmp	.+242    	; 0x7af8 <main+0x2d2>

				/*
				 * Now process the STK500 commands, see Atmel Appnote AVR068
				 */

			switch (msgBuffer[0])
    7a06:	4a 31       	cpi	r20, 0x1A	; 26
    7a08:	c1 f1       	breq	.+112    	; 0x7a7a <main+0x254>
    7a0a:	4b 31       	cpi	r20, 0x1B	; 27
    7a0c:	59 f1       	breq	.+86     	; 0x7a64 <main+0x23e>
    7a0e:	48 31       	cpi	r20, 0x18	; 24
    7a10:	09 f0       	breq	.+2      	; 0x7a14 <main+0x1ee>
    7a12:	0d c1       	rjmp	.+538    	; 0x7c2e <main+0x408>
    7a14:	3e c0       	rjmp	.+124    	; 0x7a92 <main+0x26c>
			break;
#endif

			case CMD_SIGN_ON:
				msgLength = 11;
				msgBuffer[1]  = STATUS_CMD_OK;
    7a16:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2]  = 8;
    7a18:	b8 e0       	ldi	r27, 0x08	; 8
    7a1a:	bb 83       	std	Y+3, r27	; 0x03
				msgBuffer[3]  = 'A';
    7a1c:	81 e4       	ldi	r24, 0x41	; 65
    7a1e:	8c 83       	std	Y+4, r24	; 0x04
				msgBuffer[4]  = 'V';
    7a20:	86 e5       	ldi	r24, 0x56	; 86
    7a22:	8d 83       	std	Y+5, r24	; 0x05
				msgBuffer[5]  = 'R';
    7a24:	82 e5       	ldi	r24, 0x52	; 82
    7a26:	8e 83       	std	Y+6, r24	; 0x06
				msgBuffer[6]  = 'I';
    7a28:	89 e4       	ldi	r24, 0x49	; 73
    7a2a:	8f 83       	std	Y+7, r24	; 0x07
				msgBuffer[7]  = 'S';
    7a2c:	83 e5       	ldi	r24, 0x53	; 83
    7a2e:	88 87       	std	Y+8, r24	; 0x08
				msgBuffer[8]  = 'P';
    7a30:	80 e5       	ldi	r24, 0x50	; 80
    7a32:	89 87       	std	Y+9, r24	; 0x09
				msgBuffer[9]  = '_';
    7a34:	8f e5       	ldi	r24, 0x5F	; 95
    7a36:	8a 87       	std	Y+10, r24	; 0x0a
				msgBuffer[10] = '2';
    7a38:	82 e3       	ldi	r24, 0x32	; 50
    7a3a:	8b 87       	std	Y+11, r24	; 0x0b
			}
			break;
#endif

			case CMD_SIGN_ON:
				msgLength = 11;
    7a3c:	8b e0       	ldi	r24, 0x0B	; 11
    7a3e:	e8 2e       	mov	r14, r24
    7a40:	f1 2c       	mov	r15, r1
				msgBuffer[6]  = 'I';
				msgBuffer[7]  = 'S';
				msgBuffer[8]  = 'P';
				msgBuffer[9]  = '_';
				msgBuffer[10] = '2';
				break;
    7a42:	fa c0       	rjmp	.+500    	; 0x7c38 <main+0x412>

			case CMD_GET_PARAMETER:
			{
				unsigned char value;

				switch(msgBuffer[1])
    7a44:	ea 81       	ldd	r30, Y+2	; 0x02
    7a46:	e0 58       	subi	r30, 0x80	; 128
    7a48:	e3 31       	cpi	r30, 0x13	; 19
    7a4a:	28 f4       	brcc	.+10     	; 0x7a56 <main+0x230>
    7a4c:	f0 e0       	ldi	r31, 0x00	; 0
    7a4e:	e0 50       	subi	r30, 0x00	; 0
    7a50:	ff 4f       	sbci	r31, 0xFF	; 255
    7a52:	80 81       	ld	r24, Z
    7a54:	01 c0       	rjmp	.+2      	; 0x7a58 <main+0x232>
    7a56:	80 e0       	ldi	r24, 0x00	; 0
				default:
					value = 0;
					break;
				}
				msgLength = 3;
				msgBuffer[1] = STATUS_CMD_OK;
    7a58:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = value;
    7a5a:	8b 83       	std	Y+3, r24	; 0x03
					break;
				default:
					value = 0;
					break;
				}
				msgLength = 3;
    7a5c:	b3 e0       	ldi	r27, 0x03	; 3
    7a5e:	eb 2e       	mov	r14, r27
    7a60:	f1 2c       	mov	r15, r1
				msgBuffer[1] = STATUS_CMD_OK;
				msgBuffer[2] = value;
			}
			break;
    7a62:	ea c0       	rjmp	.+468    	; 0x7c38 <main+0x412>
				msgBuffer[1] = STATUS_CMD_OK;
				break;

			case CMD_READ_SIGNATURE_ISP:
			{
				unsigned char signatureIndex = msgBuffer[4];
    7a64:	8d 81       	ldd	r24, Y+5	; 0x05
				unsigned char signature;

				if ( signatureIndex == 0 )
    7a66:	88 23       	and	r24, r24
    7a68:	21 f0       	breq	.+8      	; 0x7a72 <main+0x24c>
					signature = (SIGNATURE_BYTES >>16) & 0x000000FF;
				else if ( signatureIndex == 1 )
    7a6a:	81 30       	cpi	r24, 0x01	; 1
    7a6c:	21 f4       	brne	.+8      	; 0x7a76 <main+0x250>
					signature = (SIGNATURE_BYTES >> 8) & 0x000000FF;
    7a6e:	84 e9       	ldi	r24, 0x94	; 148
    7a70:	21 c0       	rjmp	.+66     	; 0x7ab4 <main+0x28e>
			{
				unsigned char signatureIndex = msgBuffer[4];
				unsigned char signature;

				if ( signatureIndex == 0 )
					signature = (SIGNATURE_BYTES >>16) & 0x000000FF;
    7a72:	8e e1       	ldi	r24, 0x1E	; 30
    7a74:	1f c0       	rjmp	.+62     	; 0x7ab4 <main+0x28e>
				else if ( signatureIndex == 1 )
					signature = (SIGNATURE_BYTES >> 8) & 0x000000FF;
				else
					signature = SIGNATURE_BYTES & 0x000000FF;
    7a76:	86 e0       	ldi	r24, 0x06	; 6
    7a78:	1d c0       	rjmp	.+58     	; 0x7ab4 <main+0x28e>
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
    7a7a:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = boot_lock_fuse_bits_get( GET_LOCK_BITS );
    7a7c:	e1 e0       	ldi	r30, 0x01	; 1
    7a7e:	f0 e0       	ldi	r31, 0x00	; 0
    7a80:	a0 92 57 00 	sts	0x0057, r10
    7a84:	84 91       	lpm	r24, Z+
    7a86:	8b 83       	std	Y+3, r24	; 0x03
				msgBuffer[3] = STATUS_CMD_OK;
    7a88:	1c 82       	std	Y+4, r1	; 0x04
				msgBuffer[3] = STATUS_CMD_OK;
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength = 4;
    7a8a:	a4 e0       	ldi	r26, 0x04	; 4
    7a8c:	ea 2e       	mov	r14, r26
    7a8e:	f1 2c       	mov	r15, r1
				msgBuffer[1] = STATUS_CMD_OK;
				msgBuffer[2] = boot_lock_fuse_bits_get( GET_LOCK_BITS );
				msgBuffer[3] = STATUS_CMD_OK;
				break;
    7a90:	d3 c0       	rjmp	.+422    	; 0x7c38 <main+0x412>

			case CMD_READ_FUSE_ISP:
			{
				unsigned char fuseBits;

				if ( msgBuffer[2] == 0x50 )
    7a92:	8b 81       	ldd	r24, Y+3	; 0x03
    7a94:	80 35       	cpi	r24, 0x50	; 80
    7a96:	49 f4       	brne	.+18     	; 0x7aaa <main+0x284>
				{
					if ( msgBuffer[3] == 0x08 )
    7a98:	8c 81       	ldd	r24, Y+4	; 0x04
    7a9a:	88 30       	cpi	r24, 0x08	; 8
    7a9c:	19 f4       	brne	.+6      	; 0x7aa4 <main+0x27e>
						fuseBits = boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
    7a9e:	e2 e0       	ldi	r30, 0x02	; 2
    7aa0:	f0 e0       	ldi	r31, 0x00	; 0
    7aa2:	05 c0       	rjmp	.+10     	; 0x7aae <main+0x288>
					else
						fuseBits = boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
    7aa4:	e0 e0       	ldi	r30, 0x00	; 0
    7aa6:	f0 e0       	ldi	r31, 0x00	; 0
    7aa8:	02 c0       	rjmp	.+4      	; 0x7aae <main+0x288>
				}
				else
				{
					fuseBits = boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
    7aaa:	e3 e0       	ldi	r30, 0x03	; 3
    7aac:	f0 e0       	ldi	r31, 0x00	; 0
    7aae:	a0 92 57 00 	sts	0x0057, r10
    7ab2:	84 91       	lpm	r24, Z+
				}
				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
    7ab4:	1a 82       	std	Y+2, r1	; 0x02
    7ab6:	e7 cf       	rjmp	.-50     	; 0x7a86 <main+0x260>
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
    7ab8:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
				msgLength = 2;
    7aba:	f2 e0       	ldi	r31, 0x02	; 2
    7abc:	ef 2e       	mov	r14, r31
    7abe:	f1 2c       	mov	r15, r1
				msgBuffer[2] = STATUS_CMD_OK;
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
    7ac0:	66 24       	eor	r6, r6
    7ac2:	77 24       	eor	r7, r7
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
				break;
    7ac4:	b9 c0       	rjmp	.+370    	; 0x7c38 <main+0x412>

			case CMD_LOAD_ADDRESS:
#if defined(RAMPZ)
				address = ( ((address_t)(msgBuffer[1])<<24)|((address_t)(msgBuffer[2])<<16)|((address_t)(msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;
#else
				address = ( ((msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;  //convert word to byte address
    7ac6:	fc 81       	ldd	r31, Y+4	; 0x04
    7ac8:	c1 5e       	subi	r28, 0xE1	; 225
    7aca:	de 4f       	sbci	r29, 0xFE	; 254
    7acc:	f8 83       	st	Y, r31
    7ace:	cf 51       	subi	r28, 0x1F	; 31
    7ad0:	d1 40       	sbci	r29, 0x01	; 1
    7ad2:	c2 5e       	subi	r28, 0xE2	; 226
    7ad4:	de 4f       	sbci	r29, 0xFE	; 254
    7ad6:	18 82       	st	Y, r1
    7ad8:	ce 51       	subi	r28, 0x1E	; 30
    7ada:	d1 40       	sbci	r29, 0x01	; 1
    7adc:	0d 81       	ldd	r16, Y+5	; 0x05
    7ade:	10 e0       	ldi	r17, 0x00	; 0
    7ae0:	c2 5e       	subi	r28, 0xE2	; 226
    7ae2:	de 4f       	sbci	r29, 0xFE	; 254
    7ae4:	28 81       	ld	r18, Y
    7ae6:	39 81       	ldd	r19, Y+1	; 0x01
    7ae8:	ce 51       	subi	r28, 0x1E	; 30
    7aea:	d1 40       	sbci	r29, 0x01	; 1
    7aec:	02 2b       	or	r16, r18
    7aee:	13 2b       	or	r17, r19
    7af0:	00 0f       	add	r16, r16
    7af2:	11 1f       	adc	r17, r17
#endif
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
    7af4:	1a 82       	std	Y+2, r1	; 0x02
    7af6:	9d c0       	rjmp	.+314    	; 0x7c32 <main+0x40c>
				address_t     tempaddress = address;

				if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
				{
					// erase only main section (bootloader protection)
					if  (  eraseAddress < APP_END )
    7af8:	30 e0       	ldi	r19, 0x00	; 0
    7afa:	63 16       	cp	r6, r19
    7afc:	38 e7       	ldi	r19, 0x78	; 120
    7afe:	73 06       	cpc	r7, r19
    7b00:	68 f4       	brcc	.+26     	; 0x7b1c <main+0x2f6>
					{
						boot_page_erase(eraseAddress);	// Perform page erase
    7b02:	73 e0       	ldi	r23, 0x03	; 3
    7b04:	f7 2e       	mov	r15, r23
    7b06:	f3 01       	movw	r30, r6
    7b08:	f0 92 57 00 	sts	0x0057, r15
    7b0c:	e8 95       	spm
						boot_spm_busy_wait();		// Wait until the memory is erased.
    7b0e:	07 b6       	in	r0, 0x37	; 55
    7b10:	00 fc       	sbrc	r0, 0
    7b12:	fd cf       	rjmp	.-6      	; 0x7b0e <main+0x2e8>
						eraseAddress += SPM_PAGESIZE;    // point to next page to be erase
    7b14:	20 e8       	ldi	r18, 0x80	; 128
    7b16:	30 e0       	ldi	r19, 0x00	; 0
    7b18:	62 0e       	add	r6, r18
    7b1a:	73 1e       	adc	r7, r19
				unsigned char fuseBits;

				if ( msgBuffer[2] == 0x50 )
				{
					if ( msgBuffer[3] == 0x08 )
						fuseBits = boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
    7b1c:	98 01       	movw	r18, r16

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char *p = msgBuffer+10;
    7b1e:	de 01       	movw	r26, r28
    7b20:	1b 96       	adiw	r26, 0x0b	; 11
						eraseAddress += SPM_PAGESIZE;    // point to next page to be erase
					}

					/* Write FLASH */
					do {
						lowByte   = *p++;
    7b22:	4c 91       	ld	r20, X
						highByte  = *p++;
    7b24:	11 96       	adiw	r26, 0x01	; 1
    7b26:	5c 91       	ld	r21, X
    7b28:	11 97       	sbiw	r26, 0x01	; 1
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    7b2a:	12 96       	adiw	r26, 0x02	; 2
					/* Write FLASH */
					do {
						lowByte   = *p++;
						highByte  = *p++;

						data =  (highByte << 8) | lowByte;
    7b2c:	75 2f       	mov	r23, r21
    7b2e:	60 e0       	ldi	r22, 0x00	; 0
    7b30:	50 e0       	ldi	r21, 0x00	; 0
    7b32:	46 2b       	or	r20, r22
    7b34:	57 2b       	or	r21, r23
						boot_page_fill(address,data);
    7b36:	ff 24       	eor	r15, r15
    7b38:	f3 94       	inc	r15
    7b3a:	f9 01       	movw	r30, r18
    7b3c:	0a 01       	movw	r0, r20
    7b3e:	f0 92 57 00 	sts	0x0057, r15
    7b42:	e8 95       	spm
    7b44:	11 24       	eor	r1, r1

						address = address + 2;  	// Select next word in memory
    7b46:	2e 5f       	subi	r18, 0xFE	; 254
    7b48:	3f 4f       	sbci	r19, 0xFF	; 255
						size -= 2;			// Reduce number of bytes to write by two
    7b4a:	02 97       	sbiw	r24, 0x02	; 2
					} while(size);			// Loop until all bytes written
    7b4c:	51 f7       	brne	.-44     	; 0x7b22 <main+0x2fc>
    7b4e:	cc 5d       	subi	r28, 0xDC	; 220
    7b50:	de 4f       	sbci	r29, 0xFE	; 254
    7b52:	79 83       	std	Y+1, r23	; 0x01
    7b54:	68 83       	st	Y, r22
    7b56:	c4 52       	subi	r28, 0x24	; 36
    7b58:	d1 40       	sbci	r29, 0x01	; 1

					boot_page_write(tempaddress);
    7b5a:	65 e0       	ldi	r22, 0x05	; 5
    7b5c:	f6 2e       	mov	r15, r22
    7b5e:	f8 01       	movw	r30, r16
    7b60:	f0 92 57 00 	sts	0x0057, r15
    7b64:	e8 95       	spm
					boot_spm_busy_wait();
    7b66:	07 b6       	in	r0, 0x37	; 55
    7b68:	00 fc       	sbrc	r0, 0
    7b6a:	fd cf       	rjmp	.-6      	; 0x7b66 <main+0x340>
					boot_rww_enable();				// Re-enable the RWW section
    7b6c:	81 e1       	ldi	r24, 0x11	; 17
    7b6e:	80 93 57 00 	sts	0x0057, r24
    7b72:	e8 95       	spm
    7b74:	14 c0       	rjmp	.+40     	; 0x7b9e <main+0x378>
				unsigned char *p = msgBuffer+10;
				unsigned int  data;
				unsigned char highByte, lowByte;
				address_t     tempaddress = address;

				if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
    7b76:	ac 01       	movw	r20, r24
    7b78:	98 01       	movw	r18, r16

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char *p = msgBuffer+10;
    7b7a:	fe 01       	movw	r30, r28
    7b7c:	3b 96       	adiw	r30, 0x0b	; 11
				}
				else
				{
					/* write EEPROM */
					do {
						EEARL = address;			// Setup EEPROM address
    7b7e:	21 bd       	out	0x21, r18	; 33
						EEARH = (address >> 8);
    7b80:	32 bd       	out	0x22, r19	; 34
						address++;					// Select next EEPROM byte
    7b82:	2f 5f       	subi	r18, 0xFF	; 255
    7b84:	3f 4f       	sbci	r19, 0xFF	; 255

						EEDR= *p++;				    // get byte from buffer
    7b86:	61 91       	ld	r22, Z+
    7b88:	60 bd       	out	0x20, r22	; 32
						EECR |= (1<<EEMWE);			// Write data into EEPROM
    7b8a:	fa 9a       	sbi	0x1f, 2	; 31
						EECR |= (1<<EEWE);
    7b8c:	f9 9a       	sbi	0x1f, 1	; 31

						while (EECR & (1<<EEWE));	// Wait for write operation to finish
    7b8e:	f9 99       	sbic	0x1f, 1	; 31
    7b90:	fe cf       	rjmp	.-4      	; 0x7b8e <main+0x368>
						size--;						// Decrease number of bytes to write
    7b92:	41 50       	subi	r20, 0x01	; 1
    7b94:	50 40       	sbci	r21, 0x00	; 0
					} while(size);					// Loop until all bytes written
    7b96:	99 f7       	brne	.-26     	; 0x7b7e <main+0x358>
    7b98:	98 01       	movw	r18, r16
    7b9a:	28 0f       	add	r18, r24
    7b9c:	39 1f       	adc	r19, r25
				}
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
    7b9e:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
    7ba0:	89 01       	movw	r16, r18
    7ba2:	47 c0       	rjmp	.+142    	; 0x7c32 <main+0x40c>

			case CMD_READ_FLASH_ISP:
			case CMD_READ_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
    7ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    7ba6:	cd 5d       	subi	r28, 0xDD	; 221
    7ba8:	de 4f       	sbci	r29, 0xFE	; 254
    7baa:	98 83       	st	Y, r25
    7bac:	c3 52       	subi	r28, 0x23	; 35
    7bae:	d1 40       	sbci	r29, 0x01	; 1
    7bb0:	ce 5d       	subi	r28, 0xDE	; 222
    7bb2:	de 4f       	sbci	r29, 0xFE	; 254
    7bb4:	18 82       	st	Y, r1
    7bb6:	c2 52       	subi	r28, 0x22	; 34
    7bb8:	d1 40       	sbci	r29, 0x01	; 1
    7bba:	2b 81       	ldd	r18, Y+3	; 0x03
    7bbc:	30 e0       	ldi	r19, 0x00	; 0
    7bbe:	ce 5d       	subi	r28, 0xDE	; 222
    7bc0:	de 4f       	sbci	r29, 0xFE	; 254
    7bc2:	a8 81       	ld	r26, Y
    7bc4:	b9 81       	ldd	r27, Y+1	; 0x01
    7bc6:	c2 52       	subi	r28, 0x22	; 34
    7bc8:	d1 40       	sbci	r29, 0x01	; 1
    7bca:	2a 2b       	or	r18, r26
    7bcc:	3b 2b       	or	r19, r27
				unsigned char *p = msgBuffer+1;
				msgLength = size+3;
    7bce:	53 e0       	ldi	r21, 0x03	; 3
    7bd0:	e5 2e       	mov	r14, r21
    7bd2:	f1 2c       	mov	r15, r1
    7bd4:	e2 0e       	add	r14, r18
    7bd6:	f3 1e       	adc	r15, r19

				*p++ = STATUS_CMD_OK;
    7bd8:	1a 82       	std	Y+2, r1	; 0x02
				if (msgBuffer[0] == CMD_READ_FLASH_ISP )
    7bda:	44 31       	cpi	r20, 0x14	; 20
    7bdc:	81 f4       	brne	.+32     	; 0x7bfe <main+0x3d8>
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char *p = msgBuffer+1;
				msgLength = size+3;

				*p++ = STATUS_CMD_OK;
    7bde:	de 01       	movw	r26, r28
    7be0:	13 96       	adiw	r26, 0x03	; 3
					// Read FLASH
					do {
#if defined(RAMPZ)
						data = pgm_read_word_far(address);
#else
						data = pgm_read_word_near(address);
    7be2:	f8 01       	movw	r30, r16
    7be4:	85 91       	lpm	r24, Z+
    7be6:	94 91       	lpm	r25, Z+
#endif
						*p++ = (unsigned char)data;         //LSB
    7be8:	8c 93       	st	X, r24
						*p++ = (unsigned char)(data >> 8);	//MSB
    7bea:	11 96       	adiw	r26, 0x01	; 1
    7bec:	9c 93       	st	X, r25
    7bee:	11 97       	sbiw	r26, 0x01	; 1
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    7bf0:	12 96       	adiw	r26, 0x02	; 2
#else
						data = pgm_read_word_near(address);
#endif
						*p++ = (unsigned char)data;         //LSB
						*p++ = (unsigned char)(data >> 8);	//MSB
						address    += 2;  	 // Select next word in memory
    7bf2:	0e 5f       	subi	r16, 0xFE	; 254
    7bf4:	1f 4f       	sbci	r17, 0xFF	; 255
						size -= 2;
    7bf6:	22 50       	subi	r18, 0x02	; 2
    7bf8:	30 40       	sbci	r19, 0x00	; 0
					}while (size);
    7bfa:	99 f7       	brne	.-26     	; 0x7be2 <main+0x3bc>
    7bfc:	16 c0       	rjmp	.+44     	; 0x7c2a <main+0x404>
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char *p = msgBuffer+1;
				msgLength = size+3;

				*p++ = STATUS_CMD_OK;
    7bfe:	ce 01       	movw	r24, r28
    7c00:	03 96       	adiw	r24, 0x03	; 3
    7c02:	e8 2f       	mov	r30, r24
    7c04:	69 2f       	mov	r22, r25
				if (msgBuffer[0] == CMD_READ_FLASH_ISP )
    7c06:	c9 01       	movw	r24, r18
    7c08:	a8 01       	movw	r20, r16
				}
				else
				{
					/* Read EEPROM */
					do {
						EEARL = address;			// Setup EEPROM address
    7c0a:	41 bd       	out	0x21, r20	; 33
						EEARH = ((address >> 8));
    7c0c:	52 bd       	out	0x22, r21	; 34
						address++;					// Select next EEPROM byte
    7c0e:	4f 5f       	subi	r20, 0xFF	; 255
    7c10:	5f 4f       	sbci	r21, 0xFF	; 255
						EECR |= (1<<EERE);			// Read EEPROM
    7c12:	f8 9a       	sbi	0x1f, 0	; 31
						*p++ = EEDR;				// Send EEPROM data
    7c14:	70 b5       	in	r23, 0x20	; 32
    7c16:	ae 2f       	mov	r26, r30
    7c18:	b6 2f       	mov	r27, r22
    7c1a:	7d 93       	st	X+, r23
    7c1c:	bd 01       	movw	r22, r26
    7c1e:	ea 2f       	mov	r30, r26
    7c20:	67 2f       	mov	r22, r23
						size--;
    7c22:	01 97       	sbiw	r24, 0x01	; 1
					}while(size);
    7c24:	91 f7       	brne	.-28     	; 0x7c0a <main+0x3e4>
    7c26:	02 0f       	add	r16, r18
    7c28:	13 1f       	adc	r17, r19
				}
				*p++ = STATUS_CMD_OK;
    7c2a:	1c 92       	st	X, r1
			}
			break;
    7c2c:	05 c0       	rjmp	.+10     	; 0x7c38 <main+0x412>

			default:
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_FAILED;
    7c2e:	b0 ec       	ldi	r27, 0xC0	; 192
    7c30:	ba 83       	std	Y+2, r27	; 0x02
				*p++ = STATUS_CMD_OK;
			}
			break;

			default:
				msgLength = 2;
    7c32:	32 e0       	ldi	r19, 0x02	; 2
    7c34:	e3 2e       	mov	r14, r19
    7c36:	f1 2c       	mov	r15, r1
			}

			/*
			 * Now send answer message back
			 */
			sendchar(MESSAGE_START);     
    7c38:	8b e1       	ldi	r24, 0x1B	; 27
    7c3a:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum = MESSAGE_START^0;

			sendchar(seqNum);
    7c3e:	8b 2d       	mov	r24, r11
    7c40:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum ^= seqNum;

			c = ((msgLength>>8)&0xFF);
			sendchar(c);
    7c44:	8f 2d       	mov	r24, r15
    7c46:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum ^= c;

			c = msgLength&0x00FF;
			sendchar(c);
    7c4a:	8e 2d       	mov	r24, r14
    7c4c:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum ^= c;

			sendchar(TOKEN);
    7c50:	8e e0       	ldi	r24, 0x0E	; 14
    7c52:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			sendchar(seqNum);
			checksum ^= seqNum;

			c = ((msgLength>>8)&0xFF);
			sendchar(c);
			checksum ^= c;
    7c56:	25 e1       	ldi	r18, 0x15	; 21
    7c58:	52 2e       	mov	r5, r18
    7c5a:	5b 24       	eor	r5, r11

			c = msgLength&0x00FF;
			sendchar(c);
			checksum ^= c;
    7c5c:	5e 24       	eor	r5, r14

			sendchar(TOKEN);
			checksum ^= TOKEN;
    7c5e:	5f 24       	eor	r5, r15

			p = msgBuffer;
    7c60:	61 01       	movw	r12, r2
			while ( msgLength )
    7c62:	0a c0       	rjmp	.+20     	; 0x7c78 <main+0x452>
			{
				c = *p++;
    7c64:	f6 01       	movw	r30, r12
    7c66:	41 90       	ld	r4, Z+
    7c68:	6f 01       	movw	r12, r30
				sendchar(c);
    7c6a:	84 2d       	mov	r24, r4
    7c6c:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
				checksum ^=c;
    7c70:	54 24       	eor	r5, r4
				msgLength--;               
    7c72:	08 94       	sec
    7c74:	e1 08       	sbc	r14, r1
    7c76:	f1 08       	sbc	r15, r1

			sendchar(TOKEN);
			checksum ^= TOKEN;

			p = msgBuffer;
			while ( msgLength )
    7c78:	e1 14       	cp	r14, r1
    7c7a:	f1 04       	cpc	r15, r1
    7c7c:	99 f7       	brne	.-26     	; 0x7c64 <main+0x43e>
				c = *p++;
				sendchar(c);
				checksum ^=c;
				msgLength--;               
			}                   
			sendchar(checksum);	        
    7c7e:	85 2d       	mov	r24, r5
    7c80:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			seqNum++;
    7c84:	b3 94       	inc	r11
    7c86:	0e c0       	rjmp	.+28     	; 0x7ca4 <main+0x47e>
	seqNum++;


	_delay_ms(100);

	if((UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
    7c88:	92 e0       	ldi	r25, 0x02	; 2
    7c8a:	b9 2e       	mov	r11, r25
    7c8c:	88 24       	eor	r8, r8
    7c8e:	99 24       	eor	r9, r9
    7c90:	66 24       	eor	r6, r6
    7c92:	77 24       	eor	r7, r7
    7c94:	00 e0       	ldi	r16, 0x00	; 0
    7c96:	10 e0       	ldi	r17, 0x00	; 0
						msgParseState = ST_START;
					}
					break;

				case ST_GET_DATA:
					msgBuffer[i++] = c;
    7c98:	1e 01       	movw	r2, r28
    7c9a:	08 94       	sec
    7c9c:	21 1c       	adc	r2, r1
    7c9e:	31 1c       	adc	r3, r1
			break;

			case CMD_READ_LOCK_ISP:
				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
				msgBuffer[2] = boot_lock_fuse_bits_get( GET_LOCK_BITS );
    7ca0:	89 e0       	ldi	r24, 0x09	; 9
    7ca2:	a8 2e       	mov	r10, r24
	p	=	msgBuffer;
	while ( msgLength )
	{
		c	=	*p++;
		sendchar(c);
		checksum ^=c;
    7ca4:	20 e0       	ldi	r18, 0x00	; 0
    7ca6:	30 e0       	ldi	r19, 0x00	; 0
    7ca8:	80 e0       	ldi	r24, 0x00	; 0
    7caa:	21 ce       	rjmp	.-958    	; 0x78ee <main+0xc8>
